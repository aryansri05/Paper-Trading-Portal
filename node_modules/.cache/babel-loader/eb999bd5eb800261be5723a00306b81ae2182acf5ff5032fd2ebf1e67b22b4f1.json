{"ast":null,"code":"var _jsxFileName = \"/Users/aryansrivastava/projects/Paper-Trading-Portal/src/components/StockChart.js\",\n  _s = $RefreshSig$();\n// src/components/StockChart.js\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport Chart from 'react-apexcharts';\n// Import both API keys now\nimport { FINNHUB_API_KEY, ALPHA_VANTAGE_API_KEY, isInvalidApiKey, CURRENCY_SYMBOL } from '../TradingDataContext';\n\n// Define options for the chart\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultChartOptions = {\n  chart: {\n    type: 'candlestick',\n    height: 350,\n    toolbar: {\n      show: true,\n      tools: {\n        download: true,\n        selection: true,\n        zoom: true,\n        zoomin: true,\n        zoomout: true,\n        pan: true,\n        reset: true\n      }\n    }\n  },\n  title: {\n    text: 'Candlestick Chart',\n    align: 'left'\n  },\n  xaxis: {\n    type: 'datetime',\n    labels: {\n      formatter: function (val) {\n        return new Date(val).toLocaleDateString();\n      }\n    }\n  },\n  yaxis: {\n    tooltip: {\n      enabled: true\n    },\n    labels: {\n      formatter: value => `${CURRENCY_SYMBOL}${value ? value.toFixed(2) : ''}`\n    }\n  },\n  plotOptions: {\n    candlestick: {\n      colors: {\n        up: '#00B746',\n        // Green for up candles\n        down: '#EF403C' // Red for down candles\n      }\n    }\n  },\n  tooltip: {\n    x: {\n      format: 'dd MMM不堪' // Standard ApexCharts date format\n    },\n    y: {\n      formatter: function (val) {\n        return `${CURRENCY_SYMBOL}${val ? val.toFixed(2) : ''}`;\n      }\n    }\n  }\n};\nfunction StockChart({\n  symbol\n}) {\n  _s();\n  var _series$;\n  const [series, setSeries] = useState([{\n    data: []\n  }]);\n  const [loading, setLoading] = useState(true);\n  const [chartError, setChartError] = useState(null);\n  const [chartOptions, setChartOptions] = useState(defaultChartOptions);\n  const fetchHistoricalData = useCallback(async stockSymbol => {\n    // Use Alpha Vantage API key for historical data check\n    if (!stockSymbol || isInvalidApiKey(ALPHA_VANTAGE_API_KEY)) {\n      setChartError(\"Invalid symbol or Alpha Vantage API Key. Please ensure it's correct and active.\");\n      setLoading(false);\n      setSeries([{\n        data: []\n      }]);\n      return;\n    }\n    setLoading(true);\n    setChartError(null);\n    setSeries([{\n      data: []\n    }]); // Clear previous data\n\n    try {\n      // Alpha Vantage API endpoint for daily time series\n      // 'outputsize=compact' typically returns the last 100 days\n      const response = await axios.get(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${stockSymbol}&outputsize=compact&apikey=${ALPHA_VANTAGE_API_KEY}`);\n\n      // Check for Alpha Vantage specific error messages first\n      if (response.data[\"Error Message\"]) {\n        setChartError(`Alpha Vantage API Error: ${response.data[\"Error Message\"]}. Check your symbol and API key. You might have hit the free tier rate limit (5 calls/minute, 500 calls/day).`);\n        setSeries([{\n          data: []\n        }]);\n        return;\n      }\n      if (response.data[\"Note\"]) {\n        setChartError(`Alpha Vantage API Note: ${response.data[\"Note\"]}. You've likely hit the free tier rate limit (5 calls/minute, 500 calls/day). Please wait and try again.`);\n        setSeries([{\n          data: []\n        }]);\n        return;\n      }\n\n      // Alpha Vantage returns data under a key like \"Time Series (Daily)\"\n      const timeSeries = response.data['Time Series (Daily)'];\n      if (!timeSeries || Object.keys(timeSeries).length === 0) {\n        setChartError(`No historical (daily) data found for ${stockSymbol} from Alpha Vantage. This could be due to an invalid symbol or data not being available.`);\n        setSeries([{\n          data: []\n        }]);\n        return;\n      }\n\n      // Alpha Vantage data is in reverse chronological order (newest first).\n      // We need to sort it by date ascending for the chart.\n      const formattedData = Object.keys(timeSeries).sort((a, b) => new Date(a) - new Date(b)) // Sort by date ascending\n      .map(date => ({\n        x: new Date(date),\n        // Date string to Date object\n        y: [parseFloat(timeSeries[date]['1. open']), parseFloat(timeSeries[date]['2. high']), parseFloat(timeSeries[date]['3. low']), parseFloat(timeSeries[date]['4. close'])]\n      }));\n      setSeries([{\n        data: formattedData\n      }]);\n      setChartOptions(prevOptions => ({\n        ...prevOptions,\n        title: {\n          text: `${stockSymbol} Candlestick Chart (Daily Data from Alpha Vantage)`\n        }\n      }));\n    } catch (err) {\n      console.error(\"Error fetching historical data from Alpha Vantage:\", err);\n      // General error message for network issues or unhandled API responses\n      setChartError(`Failed to load chart for ${stockSymbol} from Alpha Vantage. Please verify your API key and check your internet connection.`);\n      setSeries([{\n        data: []\n      }]);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  useEffect(() => {\n    fetchHistoricalData(symbol);\n  }, [symbol, fetchHistoricalData]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading chart data from Alpha Vantage...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this);\n  }\n  if (chartError) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"message error-message\",\n      children: chartError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 16\n    }, this);\n  }\n  if (((_series$ = series[0]) === null || _series$ === void 0 ? void 0 : _series$.data.length) === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"message info-message\",\n      children: [\"No chart data available for \", symbol, \" from Alpha Vantage for the requested period. This is likely due to API limitations or the symbol not having data.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stock-chart-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(Chart, {\n      options: chartOptions,\n      series: series,\n      type: \"candlestick\",\n      height: 350\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 9\n  }, this);\n}\n_s(StockChart, \"I3SdLQefiMxMtsoxSRvWU6Fp21c=\");\n_c = StockChart;\nexport default StockChart;\nvar _c;\n$RefreshReg$(_c, \"StockChart\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","axios","Chart","FINNHUB_API_KEY","ALPHA_VANTAGE_API_KEY","isInvalidApiKey","CURRENCY_SYMBOL","jsxDEV","_jsxDEV","defaultChartOptions","chart","type","height","toolbar","show","tools","download","selection","zoom","zoomin","zoomout","pan","reset","title","text","align","xaxis","labels","formatter","val","Date","toLocaleDateString","yaxis","tooltip","enabled","value","toFixed","plotOptions","candlestick","colors","up","down","x","format","y","StockChart","symbol","_s","_series$","series","setSeries","data","loading","setLoading","chartError","setChartError","chartOptions","setChartOptions","fetchHistoricalData","stockSymbol","response","get","timeSeries","Object","keys","length","formattedData","sort","a","b","map","date","parseFloat","prevOptions","err","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","options","_c","$RefreshReg$"],"sources":["/Users/aryansrivastava/projects/Paper-Trading-Portal/src/components/StockChart.js"],"sourcesContent":["// src/components/StockChart.js\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport Chart from 'react-apexcharts';\n// Import both API keys now\nimport { FINNHUB_API_KEY, ALPHA_VANTAGE_API_KEY, isInvalidApiKey, CURRENCY_SYMBOL } from '../TradingDataContext'; \n\n// Define options for the chart\nconst defaultChartOptions = {\n    chart: {\n        type: 'candlestick',\n        height: 350,\n        toolbar: {\n            show: true,\n            tools: {\n                download: true,\n                selection: true,\n                zoom: true,\n                zoomin: true,\n                zoomout: true,\n                pan: true,\n                reset: true,\n            },\n        },\n    },\n    title: {\n        text: 'Candlestick Chart',\n        align: 'left'\n    },\n    xaxis: {\n        type: 'datetime',\n        labels: {\n            formatter: function(val) {\n                return new Date(val).toLocaleDateString();\n            }\n        }\n    },\n    yaxis: {\n        tooltip: {\n            enabled: true\n        },\n        labels: {\n            formatter: (value) => `${CURRENCY_SYMBOL}${value ? value.toFixed(2) : ''}`\n        }\n    },\n    plotOptions: {\n        candlestick: {\n            colors: {\n                up: '#00B746', // Green for up candles\n                down: '#EF403C' // Red for down candles\n            }\n        }\n    },\n    tooltip: {\n        x: {\n            format: 'dd MMM不堪' // Standard ApexCharts date format\n        },\n        y: {\n            formatter: function(val) {\n                return `${CURRENCY_SYMBOL}${val ? val.toFixed(2) : ''}`;\n            }\n        }\n    }\n};\n\nfunction StockChart({ symbol }) {\n    const [series, setSeries] = useState([{ data: [] }]);\n    const [loading, setLoading] = useState(true);\n    const [chartError, setChartError] = useState(null);\n    const [chartOptions, setChartOptions] = useState(defaultChartOptions);\n\n    const fetchHistoricalData = useCallback(async (stockSymbol) => {\n        // Use Alpha Vantage API key for historical data check\n        if (!stockSymbol || isInvalidApiKey(ALPHA_VANTAGE_API_KEY)) {\n            setChartError(\"Invalid symbol or Alpha Vantage API Key. Please ensure it's correct and active.\");\n            setLoading(false);\n            setSeries([{ data: [] }]);\n            return;\n        }\n\n        setLoading(true);\n        setChartError(null);\n        setSeries([{ data: [] }]); // Clear previous data\n\n        try {\n            // Alpha Vantage API endpoint for daily time series\n            // 'outputsize=compact' typically returns the last 100 days\n            const response = await axios.get(\n                `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${stockSymbol}&outputsize=compact&apikey=${ALPHA_VANTAGE_API_KEY}`\n            );\n\n            // Check for Alpha Vantage specific error messages first\n            if (response.data[\"Error Message\"]) {\n                setChartError(`Alpha Vantage API Error: ${response.data[\"Error Message\"]}. Check your symbol and API key. You might have hit the free tier rate limit (5 calls/minute, 500 calls/day).`);\n                setSeries([{ data: [] }]);\n                return;\n            }\n            if (response.data[\"Note\"]) {\n                 setChartError(`Alpha Vantage API Note: ${response.data[\"Note\"]}. You've likely hit the free tier rate limit (5 calls/minute, 500 calls/day). Please wait and try again.`);\n                 setSeries([{ data: [] }]);\n                 return;\n            }\n\n            // Alpha Vantage returns data under a key like \"Time Series (Daily)\"\n            const timeSeries = response.data['Time Series (Daily)'];\n\n            if (!timeSeries || Object.keys(timeSeries).length === 0) {\n                setChartError(`No historical (daily) data found for ${stockSymbol} from Alpha Vantage. This could be due to an invalid symbol or data not being available.`);\n                setSeries([{ data: [] }]);\n                return;\n            }\n\n            // Alpha Vantage data is in reverse chronological order (newest first).\n            // We need to sort it by date ascending for the chart.\n            const formattedData = Object.keys(timeSeries)\n                .sort((a, b) => new Date(a) - new Date(b)) // Sort by date ascending\n                .map(date => ({\n                    x: new Date(date), // Date string to Date object\n                    y: [\n                        parseFloat(timeSeries[date]['1. open']),\n                        parseFloat(timeSeries[date]['2. high']),\n                        parseFloat(timeSeries[date]['3. low']),\n                        parseFloat(timeSeries[date]['4. close'])\n                    ]\n                }));\n\n            setSeries([{ data: formattedData }]);\n            setChartOptions(prevOptions => ({\n                ...prevOptions,\n                title: { text: `${stockSymbol} Candlestick Chart (Daily Data from Alpha Vantage)` }\n            }));\n\n        } catch (err) {\n            console.error(\"Error fetching historical data from Alpha Vantage:\", err);\n            // General error message for network issues or unhandled API responses\n            setChartError(`Failed to load chart for ${stockSymbol} from Alpha Vantage. Please verify your API key and check your internet connection.`);\n            setSeries([{ data: [] }]);\n        } finally {\n            setLoading(false);\n        }\n    }, []);\n\n    useEffect(() => {\n        fetchHistoricalData(symbol);\n    }, [symbol, fetchHistoricalData]);\n\n    if (loading) {\n        return (\n            <div className=\"chart-loading\">\n                <div className=\"spinner\"></div>\n                <p>Loading chart data from Alpha Vantage...</p>\n            </div>\n        );\n    }\n\n    if (chartError) {\n        return <p className=\"message error-message\">{chartError}</p>;\n    }\n\n    if (series[0]?.data.length === 0) {\n        return <p className=\"message info-message\">No chart data available for {symbol} from Alpha Vantage for the requested period. This is likely due to API limitations or the symbol not having data.</p>;\n    }\n\n    return (\n        <div className=\"stock-chart-wrapper\">\n            <Chart\n                options={chartOptions}\n                series={series}\n                type=\"candlestick\"\n                height={350}\n            />\n        </div>\n    );\n}\n\nexport default StockChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}