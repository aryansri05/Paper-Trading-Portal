{"ast":null,"code":"var _jsxFileName = \"/Users/aryansrivastava/projects/paper-trading-app/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { supabase } from \"./supabaseClient\"; // Make sure this path is correct\nimport AuthForm from \"./AuthForm\"; // Your authentication component\nimport TradingDashboard from \"./TradingDashboard\"; // Your main dashboard component\nimport './App.css'; // Assuming you have some basic CSS\n\nfunction App() {\n  // session will hold the Supabase session object if a user is logged in\n  const [session, setSession] = useState(null);\n  // user will hold the Supabase user object from the session\n  const [user, setUser] = useState(null);\n  // Optional: A loading state while checking the initial session\n  const [loadingInitialSession, setLoadingInitialSession] = useState(true);\n  useEffect(() => {\n    let _isMounted = true; // To prevent state updates on unmounted component\n\n    const getInitialSession = async () => {\n      setLoadingInitialSession(true);\n      const {\n        data: {\n          session\n        },\n        error\n      } = await supabase.auth.getSession();\n      if (_isMounted) {\n        if (error) {\n          console.error(\"Error getting initial session:\", error);\n          setSession(null);\n          setUser(null);\n        } else {\n          setSession(session);\n          setUser((session === null || session === void 0 ? void 0 : session.user) || null);\n        }\n        setLoadingInitialSession(false);\n      }\n    };\n    getInitialSession();\n\n    // Set up the real-time listener for authentication state changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange((event, currentSession) => {\n      if (_isMounted) {\n        console.log(\"Supabase Auth State Change Event:\", event);\n        console.log(\"Current Session:\", currentSession);\n        setSession(currentSession);\n        setUser((currentSession === null || currentSession === void 0 ? void 0 : currentSession.user) || null);\n        setLoadingInitialSession(false); // Ensure loading is false after any auth change\n      }\n    });\n\n    // Cleanup function for when the component unmounts\n    return () => {\n      _isMounted = false;\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n  }, []); // Empty dependency array means this effect runs once on mount\n\n  // Render a loading state while we determine the initial session\n  if (loadingInitialSession) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: 'center',\n        marginTop: '50px',\n        fontSize: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, \"Loading session...\");\n  }\n\n  // Conditional Rendering based on session existence\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, session ?\n  /*#__PURE__*/\n  // If there's a session, render the dashboard\n  React.createElement(TradingDashboard, {\n    user: user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }) :\n  /*#__PURE__*/\n  // If no session, render the authentication form\n  // No need for an onLogin prop here if you're using onAuthStateChange\n  React.createElement(AuthForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }));\n}\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","supabase","AuthForm","TradingDashboard","App","session","setSession","user","setUser","loadingInitialSession","setLoadingInitialSession","_isMounted","getInitialSession","data","error","auth","getSession","console","subscription","onAuthStateChange","event","currentSession","log","unsubscribe","createElement","style","textAlign","marginTop","fontSize","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className"],"sources":["/Users/aryansrivastava/projects/paper-trading-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { supabase } from \"./supabaseClient\"; // Make sure this path is correct\nimport AuthForm from \"./AuthForm\"; // Your authentication component\nimport TradingDashboard from \"./TradingDashboard\"; // Your main dashboard component\nimport './App.css'; // Assuming you have some basic CSS\n\nfunction App() {\n  // session will hold the Supabase session object if a user is logged in\n  const [session, setSession] = useState(null);\n  // user will hold the Supabase user object from the session\n  const [user, setUser] = useState(null);\n  // Optional: A loading state while checking the initial session\n  const [loadingInitialSession, setLoadingInitialSession] = useState(true);\n\n  useEffect(() => {\n    let _isMounted = true; // To prevent state updates on unmounted component\n\n    const getInitialSession = async () => {\n      setLoadingInitialSession(true);\n      const { data: { session }, error } = await supabase.auth.getSession();\n      if (_isMounted) {\n        if (error) {\n          console.error(\"Error getting initial session:\", error);\n          setSession(null);\n          setUser(null);\n        } else {\n          setSession(session);\n          setUser(session?.user || null);\n        }\n        setLoadingInitialSession(false);\n      }\n    };\n\n    getInitialSession();\n\n    // Set up the real-time listener for authentication state changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      (event, currentSession) => {\n        if (_isMounted) {\n          console.log(\"Supabase Auth State Change Event:\", event);\n          console.log(\"Current Session:\", currentSession);\n          setSession(currentSession);\n          setUser(currentSession?.user || null);\n          setLoadingInitialSession(false); // Ensure loading is false after any auth change\n        }\n      }\n    );\n\n    // Cleanup function for when the component unmounts\n    return () => {\n      _isMounted = false;\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n  }, []); // Empty dependency array means this effect runs once on mount\n\n  // Render a loading state while we determine the initial session\n  if (loadingInitialSession) {\n    return (\n      <div style={{ textAlign: 'center', marginTop: '50px', fontSize: '20px' }}>\n        Loading session...\n      </div>\n    );\n  }\n\n  // Conditional Rendering based on session existence\n  return (\n    <div className=\"App\">\n      {session ? (\n        // If there's a session, render the dashboard\n        <TradingDashboard user={user} />\n      ) : (\n        // If no session, render the authentication form\n        // No need for an onLogin prop here if you're using onAuthStateChange\n        <AuthForm />\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}