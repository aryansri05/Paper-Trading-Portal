{"ast":null,"code":"var _jsxFileName = \"/Users/aryansrivastava/projects/Paper-Trading-Portal/src/TradingDataContext.js\";\n// src/TradingDataContext.js\nimport React, { createContext, useContext, useState, useEffect, useCallback, useMemo } from \"react\";\nimport { supabase } from \"./supabaseClient\";\nimport axios from \"axios\";\nconst TradingDataContext = createContext();\n\n// Constants for API Key and Currency Symbol\n// WARNING: Hardcoding API keys directly in source code is not recommended for security.\n// Consider using environment variables (.env file) for production deployment.\n// MODIFICATION: Updated Finnhub API Key to the full, correct one.\nconst FINNHUB_API_KEY = \"d108911r01qhkqr8ggb0d108911r01qhkqr8ggbg\"; // YOUR API KEY IS NOW HARDCODED HERE\nconst CURRENCY_SYMBOL = process.env.REACT_APP_CURRENCY_SYMBOL || \"$\";\n\n// Helper to check if API key is valid (simple check)\nconst isInvalidApiKey = key => {\n  return !key || key === \"YOUR_FINNHUB_API_KEY\" || key.length < 10;\n};\nexport const TradingDataProvider = ({\n  children\n}) => {\n  const [user, setUser] = useState(null);\n  const [trades, setTrades] = useState([]);\n  const [capital, setCapital] = useState(10000); // Initial capital\n  const [livePrices, setLivePrices] = useState({});\n  const [availableSymbols, setAvailableSymbols] = useState([]);\n  const [symbolError, setSymbolError] = useState(\"\");\n  const [loadingData, setLoadingData] = useState(true);\n  const [session, setSession] = useState(null); // Supabase session\n  const [watchListSymbols, setWatchListSymbols] = useState([]);\n\n  // --- Fetch live prices for a given list of symbols ---\n  const fetchLivePrices = useCallback(async symbolsToFetch => {\n    // Filter out invalid symbols or duplicates\n    const uniqueSymbols = [...new Set(symbolsToFetch)].filter(s => s && typeof s === 'string');\n    if (uniqueSymbols.length === 0 || isInvalidApiKey(FINNHUB_API_KEY)) {\n      setLivePrices(prev => {\n        const newPrices = {};\n        if (uniqueSymbols.length === 0) return prev;\n        uniqueSymbols.forEach(sym => {\n          if (prev[sym]) newPrices[sym] = prev[sym];\n        });\n        return newPrices;\n      });\n      return;\n    }\n    try {\n      const responses = await Promise.all(uniqueSymbols.map(symbol => axios.get(`https://finnhub.io/api/v1/quote?symbol=<span class=\"math-inline\">\\{symbol\\}&token\\=</span>{FINNHUB_API_KEY}`)));\n      const newPrices = {};\n      responses.forEach((res, index) => {\n        const symbol = uniqueSymbols[index];\n        if (res.data && res.data.c !== 0) {\n          newPrices[symbol] = res.data.c;\n        } else {\n          newPrices[symbol] = null; // Mark as unavailable\n        }\n      });\n      setLivePrices(prev => ({\n        ...prev,\n        ...newPrices\n      }));\n    } catch (error) {\n      console.error(\"Error fetching live prices:\", error);\n      const errorPrices = {};\n      uniqueSymbols.forEach(symbol => {\n        errorPrices[symbol] = null;\n      });\n      setLivePrices(prev => ({\n        ...prev,\n        ...errorPrices\n      }));\n    }\n  }, []);\n\n  // --- Helper to fetch user's capital from Supabase ---\n  const fetchCapital = useCallback(async userId => {\n    if (!userId) {\n      setCapital(10000);\n      return;\n    }\n    setLoadingData(true);\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from(\"user_profiles\").select(\"capital\").eq(\"user_id\", userId).single();\n      if (error && error.code !== 'PGRST116') {\n        throw error;\n      }\n      if (data) {\n        setCapital(data.capital);\n      } else {\n        const {\n          data: newProfile,\n          error: insertError\n        } = await supabase.from(\"user_profiles\").insert([{\n          user_id: userId,\n          capital: 10000\n        }]).select(\"capital\").single();\n        if (insertError) throw insertError;\n        setCapital(newProfile.capital);\n      }\n    } catch (error) {\n      console.error(\"Error fetching or setting capital:\", error.message);\n      setCapital(10000);\n    } finally {\n      setLoadingData(false);\n    }\n  }, []);\n\n  // --- Function to update capital in Supabase ---\n  const updateCapitalInDb = useCallback(async (newCapital, userId) => {\n    if (!userId) {\n      console.warn(\"updateCapitalInDb: No user ID, not updating DB.\");\n      return;\n    }\n    setLoadingData(true);\n    try {\n      const {\n        error\n      } = await supabase.from(\"user_profiles\").update({\n        capital: newCapital\n      }).eq(\"user_id\", userId);\n      if (error) throw error;\n      setCapital(newCapital);\n    } catch (error) {\n      console.error(\"Error updating capital in DB:\", error.message);\n    } finally {\n      setLoadingData(false);\n    }\n  }, []);\n\n  // --- Wrapped setCapital to update DB as well ---\n  const handleSetCapital = useCallback(async newCapital => {\n    setCapital(newCapital);\n    if (user === null || user === void 0 ? void 0 : user.id) {\n      await updateCapitalInDb(newCapital, user.id);\n    } else {\n      console.warn(\"No user ID available for DB capital update.\");\n    }\n  }, [user, updateCapitalInDb]);\n\n  // --- Fetch trades for the current user ---\n  const fetchTrades = useCallback(async userId => {\n    if (!userId) {\n      setTrades([]);\n      return;\n    }\n    setLoadingData(true);\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from(\"trades\").select(\"*\").eq(\"user_id\", userId).order(\"created_at\", {\n        ascending: false\n      });\n      if (error) throw error;\n      setTrades(data);\n    } catch (error) {\n      console.error(\"Error fetching trades:\", error.message);\n      setTrades([]);\n    } finally {\n      setLoadingData(false);\n    }\n  }, []);\n\n  // --- Fetch watchlist symbols for the current user ---\n  const fetchWatchlist = useCallback(async userId => {\n    if (!userId) {\n      setWatchListSymbols([]);\n      return;\n    }\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from(\"watchlists\").select(\"symbol\").eq(\"user_id\", userId).order(\"created_at\", {\n        ascending: true\n      });\n      if (error) throw error;\n      setWatchListSymbols(data.map(item => item.symbol));\n    } catch (error) {\n      console.error(\"Error fetching watchlist:\", error.message);\n      setWatchListSymbols([]);\n    }\n  }, []);\n\n  // --- Add symbol to watchlist ---\n  const addToWatchlist = useCallback(async symbol => {\n    if (!(user === null || user === void 0 ? void 0 : user.id)) {\n      throw new Error(\"User not authenticated.\");\n    }\n    const normalizedSymbol = symbol.toUpperCase();\n    if (watchListSymbols.includes(normalizedSymbol)) {\n      throw new Error(`'${normalizedSymbol}' is already in your watchlist.`);\n    }\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from(\"watchlists\").insert([{\n        user_id: user.id,\n        symbol: normalizedSymbol\n      }]).select(\"symbol\").single();\n      if (error) throw error;\n      setWatchListSymbols(prev => [...prev, data.symbol]);\n      fetchLivePrices([normalizedSymbol]);\n    } catch (error) {\n      console.error(\"Error adding to watchlist:\", error.message);\n      throw error;\n    }\n  }, [user, watchListSymbols, fetchLivePrices]);\n\n  // --- Remove symbol from watchlist ---\n  const removeFromWatchlist = useCallback(async symbol => {\n    if (!(user === null || user === void 0 ? void 0 : user.id)) {\n      throw new Error(\"User not authenticated.\");\n    }\n    try {\n      const {\n        error\n      } = await supabase.from(\"watchlists\").delete().eq(\"user_id\", user.id).eq(\"symbol\", symbol.toUpperCase());\n      if (error) throw error;\n      setWatchListSymbols(prev => prev.filter(s => s !== symbol.toUpperCase()));\n      setLivePrices(prev => {\n        const newPrices = {\n          ...prev\n        };\n        delete newPrices[symbol.toUpperCase()];\n        return newPrices;\n      });\n    } catch (error) {\n      console.error(\"Error removing from watchlist:\", error.message);\n      throw error;\n    }\n  }, [user]);\n\n  // --- Fetch available US stock symbols from Finnhub ---\n  const fetchAvailableSymbols = useCallback(async () => {\n    if (isInvalidApiKey(FINNHUB_API_KEY)) {\n      setSymbolError(\"Invalid Finnhub API Key. Cannot fetch US stock symbols.\");\n      return;\n    }\n    setLoadingData(true);\n    try {\n      const {\n        data\n      } = await axios.get(`https://finnhub.io/api/v1/stock/symbol?exchange=US&token=${FINNHUB_API_KEY}`);\n      const filteredSymbols = data.filter(s => s.type === \"Common Stock\" || s.type === \"ADR\" || s.type === \"REIT\" || s.type === \"ETP\" || s.type === \"ETF\").map(s => s.symbol).sort();\n      setAvailableSymbols(filteredSymbols);\n      setSymbolError(\"\");\n    } catch (error) {\n      console.error(\"Error fetching available symbols:\", error);\n      setSymbolError(\"Failed to fetch US stock symbols. This might be due to API rate limits or an invalid Finnhub API key (free tier keys have limited symbol access).\");\n      setAvailableSymbols([]);\n    } finally {\n      setLoadingData(false);\n    }\n  }, []);\n\n  // --- Calculate PnL and Holdings ---\n  const calculatePnL = useCallback(() => {\n    let holdings = {};\n    let totalRealizedPnl = 0;\n    trades.forEach(trade => {\n      if (!holdings[trade.symbol]) {\n        holdings[trade.symbol] = {\n          symbol: trade.symbol,\n          netQty: 0,\n          totalCost: 0,\n          avgBuyPrice: 0\n        };\n      }\n      if (trade.type === \"buy\") {\n        holdings[trade.symbol].totalCost += trade.quantity * trade.price;\n        holdings[trade.symbol].netQty += trade.quantity;\n        holdings[trade.symbol].avgBuyPrice = holdings[trade.symbol].totalCost / holdings[trade.symbol].netQty;\n      } else {\n        const {\n          netQty: currentNetQty,\n          avgBuyPrice\n        } = holdings[trade.symbol];\n        if (currentNetQty > 0) {\n          const sellProfit = (trade.price - avgBuyPrice) * trade.quantity;\n          totalRealizedPnl += sellProfit;\n        }\n        holdings[trade.symbol].netQty -= trade.quantity;\n        if (holdings[trade.symbol].netQty <= 0) {\n          holdings[trade.symbol].totalCost = 0;\n          holdings[trade.symbol].avgBuyPrice = 0;\n        } else {\n          holdings[trade.symbol].totalCost = holdings[trade.symbol].netQty * holdings[trade.symbol].avgBuyPrice;\n        }\n      }\n    });\n    let totalUnrealizedPnl = 0;\n    Object.values(holdings).forEach(holding => {\n      if (holding.netQty > 0 && livePrices[holding.symbol]) {\n        const livePrice = livePrices[holding.symbol];\n        const unrealized = (livePrice - holding.avgBuyPrice) * holding.netQty;\n        holding.unrealizedPnl = unrealized.toFixed(2);\n        totalUnrealizedPnl += unrealized;\n      } else {\n        holding.unrealizedPnl = \"0.00\";\n      }\n    });\n    return {\n      holdings: Object.values(holdings),\n      totalRealizedPnl: totalRealizedPnl.toFixed(2),\n      totalUnrealizedPnl: totalUnrealizedPnl.toFixed(2)\n    };\n  }, [trades, livePrices]);\n\n  // --- Calculate total portfolio value ---\n  const calculateTotalPortfolioValue = useCallback(() => {\n    const {\n      holdings\n    } = calculatePnL();\n    let holdingsValue = 0;\n    holdings.forEach(holding => {\n      if (holding.netQty > 0 && livePrices[holding.symbol]) {\n        holdingsValue += holding.netQty * livePrices[holding.symbol];\n      }\n    });\n    return (capital + holdingsValue).toFixed(2);\n  }, [capital, calculatePnL, livePrices]);\n\n  // --- Remove trade logic ---\n  const removeTrade = useCallback(async tradeToRemove => {\n    if (!(user === null || user === void 0 ? void 0 : user.id)) throw new Error(\"User not authenticated.\");\n    try {\n      const {\n        error: deleteError\n      } = await supabase.from(\"trades\").delete().eq(\"id\", tradeToRemove.id).eq(\"user_id\", user.id);\n      if (deleteError) throw deleteError;\n      await fetchTrades(user.id);\n      const {\n        data: allTradesAfterDeletion,\n        error: fetchAllTradesError\n      } = await supabase.from(\"trades\").select(\"*\").eq(\"user_id\", user.id).order(\"created_at\", {\n        ascending: true\n      });\n      if (fetchAllTradesError) throw fetchAllTradesError;\n      let calculatedCapital = 10000;\n      allTradesAfterDeletion.forEach(trade => {\n        if (trade.type === 'buy') {\n          calculatedCapital -= trade.quantity * trade.price;\n        } else {\n          calculatedCapital += trade.quantity * trade.price;\n        }\n      });\n      await handleSetCapital(calculatedCapital);\n    } catch (error) {\n      console.error(\"Error removing trade:\", error.message);\n      throw error;\n    }\n  }, [user, fetchTrades, handleSetCapital]);\n\n  // --- Initial Data Load on Mount or User Change ---\n  useEffect(() => {\n    const {\n      data: authListener\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      setSession(session);\n      const currentUser = (session === null || session === void 0 ? void 0 : session.user) || null;\n      setUser(currentUser);\n      if (currentUser) {\n        setLoadingData(true);\n        await fetchCapital(currentUser.id);\n        await fetchTrades(currentUser.id);\n        await fetchWatchlist(currentUser.id);\n        setLoadingData(false);\n      } else {\n        setCapital(10000);\n        setTrades([]);\n        setWatchListSymbols([]);\n        setLivePrices({});\n        setUser(null);\n        setLoadingData(false);\n      }\n    });\n\n    // Initial check for session\n    const checkSession = async () => {\n      setLoadingData(true);\n      const {\n        data: {\n          session\n        }\n      } = await supabase.auth.getSession();\n      setSession(session);\n      const currentUser = (session === null || session === void 0 ? void 0 : session.user) || null;\n      setUser(currentUser);\n      if (currentUser) {\n        await fetchCapital(currentUser.id);\n        await fetchTrades(currentUser.id);\n        await fetchWatchlist(currentUser.id);\n      }\n      setLoadingData(false);\n    };\n    checkSession();\n    fetchAvailableSymbols(); // Fetch symbols once on load\n\n    return () => {\n      authListener.subscription.unsubscribe();\n    };\n  }, [fetchCapital, fetchTrades, fetchAvailableSymbols, fetchWatchlist]);\n\n  // --- Effect to fetch live prices for all relevant symbols ---\n  useEffect(() => {\n    const allSymbols = [...new Set([...trades.map(t => t.symbol), ...watchListSymbols, ...Object.keys(livePrices)])].filter(Boolean);\n    if (allSymbols.length > 0) {\n      fetchLivePrices(allSymbols);\n      const interval = setInterval(() => {\n        fetchLivePrices(allSymbols);\n      }, 20000);\n      return () => clearInterval(interval);\n    }\n  }, [trades, watchListSymbols, fetchLivePrices]);\n\n  // Memoize the context value to prevent unnecessary re-renders\n  const contextValue = useMemo(() => ({\n    user,\n    trades,\n    capital,\n    setCapital: handleSetCapital,\n    livePrices,\n    availableSymbols,\n    symbolError,\n    setSymbolError,\n    fetchTrades,\n    fetchLivePrices,\n    calculatePnL,\n    calculateTotalPortfolioValue,\n    isInvalidApiKey,\n    FINNHUB_API_KEY,\n    CURRENCY_SYMBOL,\n    loadingData,\n    removeTrade,\n    watchListSymbols,\n    addToWatchlist,\n    removeFromWatchlist\n  }), [user, trades, capital, handleSetCapital, livePrices, availableSymbols, symbolError, setSymbolError, fetchTrades, fetchLivePrices, calculatePnL, calculateTotalPortfolioValue, isInvalidApiKey, FINNHUB_API_KEY, CURRENCY_SYMBOL, loadingData, removeTrade, addToWatchlist, removeFromWatchlist, watchListSymbols]);\n  return /*#__PURE__*/React.createElement(TradingDataContext.Provider, {\n    value: contextValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport const useTradingData = () => useContext(TradingDataContext);","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","useMemo","supabase","axios","TradingDataContext","FINNHUB_API_KEY","CURRENCY_SYMBOL","process","env","REACT_APP_CURRENCY_SYMBOL","isInvalidApiKey","key","length","TradingDataProvider","children","user","setUser","trades","setTrades","capital","setCapital","livePrices","setLivePrices","availableSymbols","setAvailableSymbols","symbolError","setSymbolError","loadingData","setLoadingData","session","setSession","watchListSymbols","setWatchListSymbols","fetchLivePrices","symbolsToFetch","uniqueSymbols","Set","filter","s","prev","newPrices","forEach","sym","responses","Promise","all","map","symbol","get","res","index","data","c","error","console","errorPrices","fetchCapital","userId","from","select","eq","single","code","newProfile","insertError","insert","user_id","message","updateCapitalInDb","newCapital","warn","update","handleSetCapital","id","fetchTrades","order","ascending","fetchWatchlist","item","addToWatchlist","Error","normalizedSymbol","toUpperCase","includes","removeFromWatchlist","delete","fetchAvailableSymbols","filteredSymbols","type","sort","calculatePnL","holdings","totalRealizedPnl","trade","netQty","totalCost","avgBuyPrice","quantity","price","currentNetQty","sellProfit","totalUnrealizedPnl","Object","values","holding","livePrice","unrealized","unrealizedPnl","toFixed","calculateTotalPortfolioValue","holdingsValue","removeTrade","tradeToRemove","deleteError","allTradesAfterDeletion","fetchAllTradesError","calculatedCapital","authListener","auth","onAuthStateChange","event","currentUser","checkSession","getSession","subscription","unsubscribe","allSymbols","t","keys","Boolean","interval","setInterval","clearInterval","contextValue","createElement","Provider","value","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","useTradingData"],"sources":["/Users/aryansrivastava/projects/Paper-Trading-Portal/src/TradingDataContext.js"],"sourcesContent":["// src/TradingDataContext.js\nimport React, { createContext, useContext, useState, useEffect, useCallback, useMemo } from \"react\";\nimport { supabase } from \"./supabaseClient\";\nimport axios from \"axios\";\n\nconst TradingDataContext = createContext();\n\n// Constants for API Key and Currency Symbol\n// WARNING: Hardcoding API keys directly in source code is not recommended for security.\n// Consider using environment variables (.env file) for production deployment.\n// MODIFICATION: Updated Finnhub API Key to the full, correct one.\nconst FINNHUB_API_KEY = \"d108911r01qhkqr8ggb0d108911r01qhkqr8ggbg\"; // YOUR API KEY IS NOW HARDCODED HERE\nconst CURRENCY_SYMBOL = process.env.REACT_APP_CURRENCY_SYMBOL || \"$\";\n\n// Helper to check if API key is valid (simple check)\nconst isInvalidApiKey = (key) => {\n  return !key || key === \"YOUR_FINNHUB_API_KEY\" || key.length < 10;\n};\n\nexport const TradingDataProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [trades, setTrades] = useState([]);\n  const [capital, setCapital] = useState(10000); // Initial capital\n  const [livePrices, setLivePrices] = useState({});\n  const [availableSymbols, setAvailableSymbols] = useState([]);\n  const [symbolError, setSymbolError] = useState(\"\");\n  const [loadingData, setLoadingData] = useState(true);\n  const [session, setSession] = useState(null); // Supabase session\n  const [watchListSymbols, setWatchListSymbols] = useState([]);\n\n  // --- Fetch live prices for a given list of symbols ---\n  const fetchLivePrices = useCallback(async (symbolsToFetch) => {\n    // Filter out invalid symbols or duplicates\n    const uniqueSymbols = [...new Set(symbolsToFetch)].filter(s => s && typeof s === 'string');\n\n    if (uniqueSymbols.length === 0 || isInvalidApiKey(FINNHUB_API_KEY)) {\n      setLivePrices((prev) => {\n        const newPrices = {};\n        if (uniqueSymbols.length === 0) return prev;\n\n        uniqueSymbols.forEach(sym => {\n            if (prev[sym]) newPrices[sym] = prev[sym];\n        });\n        return newPrices;\n      });\n      return;\n    }\n\n    try {\n      const responses = await Promise.all(\n        uniqueSymbols.map((symbol) =>\n          axios.get(`https://finnhub.io/api/v1/quote?symbol=<span class=\"math-inline\">\\{symbol\\}&token\\=</span>{FINNHUB_API_KEY}`)\n        )\n      );\n\n      const newPrices = {};\n      responses.forEach((res, index) => {\n        const symbol = uniqueSymbols[index];\n        if (res.data && res.data.c !== 0) {\n          newPrices[symbol] = res.data.c;\n        } else {\n          newPrices[symbol] = null; // Mark as unavailable\n        }\n      });\n\n      setLivePrices((prev) => ({ ...prev, ...newPrices }));\n    } catch (error) {\n      console.error(\"Error fetching live prices:\", error);\n      const errorPrices = {};\n      uniqueSymbols.forEach(symbol => { errorPrices[symbol] = null; });\n      setLivePrices((prev) => ({ ...prev, ...errorPrices }));\n    }\n  }, []);\n\n  // --- Helper to fetch user's capital from Supabase ---\n  const fetchCapital = useCallback(async (userId) => {\n    if (!userId) {\n      setCapital(10000);\n      return;\n    }\n    setLoadingData(true);\n    try {\n      const { data, error } = await supabase\n        .from(\"user_profiles\")\n        .select(\"capital\")\n        .eq(\"user_id\", userId)\n        .single();\n\n      if (error && error.code !== 'PGRST116') {\n        throw error;\n      }\n\n      if (data) {\n        setCapital(data.capital);\n      } else {\n        const { data: newProfile, error: insertError } = await supabase\n          .from(\"user_profiles\")\n          .insert([{ user_id: userId, capital: 10000 }])\n          .select(\"capital\")\n          .single();\n\n        if (insertError) throw insertError;\n        setCapital(newProfile.capital);\n      }\n    } catch (error) {\n      console.error(\"Error fetching or setting capital:\", error.message);\n      setCapital(10000);\n    } finally {\n      setLoadingData(false);\n    }\n  }, []);\n\n  // --- Function to update capital in Supabase ---\n  const updateCapitalInDb = useCallback(async (newCapital, userId) => {\n    if (!userId) {\n      console.warn(\"updateCapitalInDb: No user ID, not updating DB.\");\n      return;\n    }\n    setLoadingData(true);\n    try {\n      const { error } = await supabase\n        .from(\"user_profiles\")\n        .update({ capital: newCapital })\n        .eq(\"user_id\", userId);\n\n      if (error) throw error;\n      setCapital(newCapital);\n    } catch (error) {\n      console.error(\"Error updating capital in DB:\", error.message);\n    } finally {\n      setLoadingData(false);\n    }\n  }, []);\n\n  // --- Wrapped setCapital to update DB as well ---\n  const handleSetCapital = useCallback(async (newCapital) => {\n    setCapital(newCapital);\n    if (user?.id) {\n      await updateCapitalInDb(newCapital, user.id);\n    } else {\n      console.warn(\"No user ID available for DB capital update.\");\n    }\n  }, [user, updateCapitalInDb]);\n\n  // --- Fetch trades for the current user ---\n  const fetchTrades = useCallback(async (userId) => {\n    if (!userId) {\n      setTrades([]);\n      return;\n    }\n    setLoadingData(true);\n    try {\n      const { data, error } = await supabase\n        .from(\"trades\")\n        .select(\"*\")\n        .eq(\"user_id\", userId)\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      setTrades(data);\n    } catch (error) {\n      console.error(\"Error fetching trades:\", error.message);\n      setTrades([]);\n    } finally {\n      setLoadingData(false);\n    }\n  }, []);\n\n  // --- Fetch watchlist symbols for the current user ---\n  const fetchWatchlist = useCallback(async (userId) => {\n    if (!userId) {\n      setWatchListSymbols([]);\n      return;\n    }\n    try {\n      const { data, error } = await supabase\n        .from(\"watchlists\")\n        .select(\"symbol\")\n        .eq(\"user_id\", userId)\n        .order(\"created_at\", { ascending: true });\n\n      if (error) throw error;\n      setWatchListSymbols(data.map(item => item.symbol));\n    } catch (error) {\n      console.error(\"Error fetching watchlist:\", error.message);\n      setWatchListSymbols([]);\n    }\n  }, []);\n\n  // --- Add symbol to watchlist ---\n  const addToWatchlist = useCallback(async (symbol) => {\n    if (!user?.id) {\n      throw new Error(\"User not authenticated.\");\n    }\n    const normalizedSymbol = symbol.toUpperCase();\n    if (watchListSymbols.includes(normalizedSymbol)) {\n      throw new Error(`'${normalizedSymbol}' is already in your watchlist.`);\n    }\n\n    try {\n      const { data, error } = await supabase\n        .from(\"watchlists\")\n        .insert([{ user_id: user.id, symbol: normalizedSymbol }])\n        .select(\"symbol\")\n        .single();\n\n      if (error) throw error;\n      setWatchListSymbols((prev) => [...prev, data.symbol]);\n      fetchLivePrices([normalizedSymbol]);\n    } catch (error) {\n      console.error(\"Error adding to watchlist:\", error.message);\n      throw error;\n    }\n  }, [user, watchListSymbols, fetchLivePrices]);\n\n  // --- Remove symbol from watchlist ---\n  const removeFromWatchlist = useCallback(async (symbol) => {\n    if (!user?.id) {\n      throw new Error(\"User not authenticated.\");\n    }\n    try {\n      const { error } = await supabase\n        .from(\"watchlists\")\n        .delete()\n        .eq(\"user_id\", user.id)\n        .eq(\"symbol\", symbol.toUpperCase());\n\n      if (error) throw error;\n      setWatchListSymbols((prev) => prev.filter((s) => s !== symbol.toUpperCase()));\n      setLivePrices((prev) => {\n        const newPrices = { ...prev };\n        delete newPrices[symbol.toUpperCase()];\n        return newPrices;\n      });\n    } catch (error) {\n      console.error(\"Error removing from watchlist:\", error.message);\n      throw error;\n    }\n  }, [user]);\n\n  // --- Fetch available US stock symbols from Finnhub ---\n  const fetchAvailableSymbols = useCallback(async () => {\n    if (isInvalidApiKey(FINNHUB_API_KEY)) {\n      setSymbolError(\"Invalid Finnhub API Key. Cannot fetch US stock symbols.\");\n      return;\n    }\n    setLoadingData(true);\n    try {\n      const { data } = await axios.get(\n        `https://finnhub.io/api/v1/stock/symbol?exchange=US&token=${FINNHUB_API_KEY}`\n      );\n      const filteredSymbols = data\n        .filter(\n          (s) =>\n            s.type === \"Common Stock\" ||\n            s.type === \"ADR\" ||\n            s.type === \"REIT\" ||\n            s.type === \"ETP\" ||\n            s.type === \"ETF\"\n        )\n        .map((s) => s.symbol)\n        .sort();\n\n      setAvailableSymbols(filteredSymbols);\n      setSymbolError(\"\");\n    } catch (error) {\n      console.error(\"Error fetching available symbols:\", error);\n      setSymbolError(\n        \"Failed to fetch US stock symbols. This might be due to API rate limits or an invalid Finnhub API key (free tier keys have limited symbol access).\"\n      );\n      setAvailableSymbols([]);\n    } finally {\n      setLoadingData(false);\n    }\n  }, []);\n\n  // --- Calculate PnL and Holdings ---\n  const calculatePnL = useCallback(() => {\n    let holdings = {};\n    let totalRealizedPnl = 0;\n\n    trades.forEach((trade) => {\n      if (!holdings[trade.symbol]) {\n        holdings[trade.symbol] = {\n          symbol: trade.symbol,\n          netQty: 0,\n          totalCost: 0,\n          avgBuyPrice: 0,\n        };\n      }\n\n      if (trade.type === \"buy\") {\n        holdings[trade.symbol].totalCost += trade.quantity * trade.price;\n        holdings[trade.symbol].netQty += trade.quantity;\n        holdings[trade.symbol].avgBuyPrice =\n          holdings[trade.symbol].totalCost / holdings[trade.symbol].netQty;\n      } else {\n        const { netQty: currentNetQty, avgBuyPrice } = holdings[trade.symbol];\n        if (currentNetQty > 0) {\n          const sellProfit = (trade.price - avgBuyPrice) * trade.quantity;\n          totalRealizedPnl += sellProfit;\n        }\n        holdings[trade.symbol].netQty -= trade.quantity;\n        if (holdings[trade.symbol].netQty <= 0) {\n          holdings[trade.symbol].totalCost = 0;\n          holdings[trade.symbol].avgBuyPrice = 0;\n        } else {\n          holdings[trade.symbol].totalCost = holdings[trade.symbol].netQty * holdings[trade.symbol].avgBuyPrice;\n        }\n      }\n    });\n\n    let totalUnrealizedPnl = 0;\n    Object.values(holdings).forEach((holding) => {\n      if (holding.netQty > 0 && livePrices[holding.symbol]) {\n        const livePrice = livePrices[holding.symbol];\n        const unrealized = (livePrice - holding.avgBuyPrice) * holding.netQty;\n        holding.unrealizedPnl = unrealized.toFixed(2);\n        totalUnrealizedPnl += unrealized;\n      } else {\n        holding.unrealizedPnl = \"0.00\";\n      }\n    });\n\n    return {\n      holdings: Object.values(holdings),\n      totalRealizedPnl: totalRealizedPnl.toFixed(2),\n      totalUnrealizedPnl: totalUnrealizedPnl.toFixed(2),\n    };\n  }, [trades, livePrices]);\n\n  // --- Calculate total portfolio value ---\n  const calculateTotalPortfolioValue = useCallback(() => {\n    const { holdings } = calculatePnL();\n    let holdingsValue = 0;\n    holdings.forEach(holding => {\n      if (holding.netQty > 0 && livePrices[holding.symbol]) {\n        holdingsValue += holding.netQty * livePrices[holding.symbol];\n      }\n    });\n    return (capital + holdingsValue).toFixed(2);\n  }, [capital, calculatePnL, livePrices]);\n\n  // --- Remove trade logic ---\n  const removeTrade = useCallback(async (tradeToRemove) => {\n    if (!user?.id) throw new Error(\"User not authenticated.\");\n\n    try {\n      const { error: deleteError } = await supabase\n        .from(\"trades\")\n        .delete()\n        .eq(\"id\", tradeToRemove.id)\n        .eq(\"user_id\", user.id);\n\n      if (deleteError) throw deleteError;\n\n      await fetchTrades(user.id);\n\n      const { data: allTradesAfterDeletion, error: fetchAllTradesError } = await supabase\n          .from(\"trades\")\n          .select(\"*\")\n          .eq(\"user_id\", user.id)\n          .order(\"created_at\", { ascending: true });\n\n      if (fetchAllTradesError) throw fetchAllTradesError;\n\n      let calculatedCapital = 10000;\n      allTradesAfterDeletion.forEach(trade => {\n          if (trade.type === 'buy') {\n              calculatedCapital -= (trade.quantity * trade.price);\n          } else {\n              calculatedCapital += (trade.quantity * trade.price);\n          }\n      });\n\n      await handleSetCapital(calculatedCapital);\n      \n    } catch (error) {\n      console.error(\"Error removing trade:\", error.message);\n      throw error;\n    }\n  }, [user, fetchTrades, handleSetCapital]);\n\n  // --- Initial Data Load on Mount or User Change ---\n  useEffect(() => {\n    const { data: authListener } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        setSession(session);\n        const currentUser = session?.user || null;\n        setUser(currentUser);\n\n        if (currentUser) {\n          setLoadingData(true);\n          await fetchCapital(currentUser.id);\n          await fetchTrades(currentUser.id);\n          await fetchWatchlist(currentUser.id);\n          setLoadingData(false);\n        } else {\n          setCapital(10000);\n          setTrades([]);\n          setWatchListSymbols([]);\n          setLivePrices({});\n          setUser(null);\n          setLoadingData(false);\n        }\n      }\n    );\n\n    // Initial check for session\n    const checkSession = async () => {\n      setLoadingData(true);\n      const { data: { session } } = await supabase.auth.getSession();\n      setSession(session);\n      const currentUser = session?.user || null;\n      setUser(currentUser);\n\n      if (currentUser) {\n        await fetchCapital(currentUser.id);\n        await fetchTrades(currentUser.id);\n        await fetchWatchlist(currentUser.id);\n      }\n      setLoadingData(false);\n    };\n\n    checkSession();\n    fetchAvailableSymbols(); // Fetch symbols once on load\n\n    return () => {\n      authListener.subscription.unsubscribe();\n    };\n  }, [fetchCapital, fetchTrades, fetchAvailableSymbols, fetchWatchlist]);\n\n  // --- Effect to fetch live prices for all relevant symbols ---\n  useEffect(() => {\n    const allSymbols = [\n      ...new Set([\n        ...trades.map((t) => t.symbol),\n        ...watchListSymbols,\n        ...Object.keys(livePrices)\n      ])\n    ].filter(Boolean);\n\n    if (allSymbols.length > 0) {\n      fetchLivePrices(allSymbols);\n\n      const interval = setInterval(() => {\n        fetchLivePrices(allSymbols);\n      }, 20000);\n\n      return () => clearInterval(interval);\n    }\n  }, [trades, watchListSymbols, fetchLivePrices]);\n\n\n  // Memoize the context value to prevent unnecessary re-renders\n  const contextValue = useMemo(\n    () => ({\n      user,\n      trades,\n      capital,\n      setCapital: handleSetCapital,\n      livePrices,\n      availableSymbols,\n      symbolError,\n      setSymbolError,\n      fetchTrades,\n      fetchLivePrices,\n      calculatePnL,\n      calculateTotalPortfolioValue,\n      isInvalidApiKey,\n      FINNHUB_API_KEY,\n      CURRENCY_SYMBOL,\n      loadingData,\n      removeTrade,\n      watchListSymbols,\n      addToWatchlist,\n      removeFromWatchlist,\n    }),\n    [\n      user,\n      trades,\n      capital,\n      handleSetCapital,\n      livePrices,\n      availableSymbols,\n      symbolError,\n      setSymbolError,\n      fetchTrades,\n      fetchLivePrices,\n      calculatePnL,\n      calculateTotalPortfolioValue,\n      isInvalidApiKey,\n      FINNHUB_API_KEY,\n      CURRENCY_SYMBOL,\n      loadingData,\n      removeTrade,\n      addToWatchlist,\n      removeFromWatchlist,\n      watchListSymbols,\n    ]\n  );\n\n  return (\n    <TradingDataContext.Provider value={contextValue}>\n      {children}\n    </TradingDataContext.Provider>\n  );\n};\n\nexport const useTradingData = () => useContext(TradingDataContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}