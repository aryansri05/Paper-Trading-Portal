{"ast":null,"code":"var _jsxFileName = \"/Users/aryansrivastava/projects/Paper-Trading-Portal/src/components/Auth.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { supabase } from '../supabaseClient'; // Correct, goes up to src/\nimport './Auth.css'; // Correct, now it's a sibling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AuthForm() {\n  _s();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isSignUp, setIsSignUp] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null); // New state for success messages\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n    setSuccessMessage(null); // Clear previous success messages\n\n    try {\n      let response;\n      if (isSignUp) {\n        response = await supabase.auth.signUp({\n          email,\n          password\n        });\n        if (response.error) {\n          setError(response.error.message);\n        } else if (response.data.user && !response.data.user.confirmed_at) {\n          // User created but not confirmed\n          setSuccessMessage(\"Sign up successful! Please check your email for a confirmation link to verify your account.\");\n          // Clear form fields after successful signup prompt\n          setEmail('');\n          setPassword('');\n        } else if (response.data.user) {\n          // User created and already confirmed (e.g., if email confirmation is off)\n          setSuccessMessage(\"Sign up successful! You are now logged in.\");\n        } else {\n          // Fallback for unexpected successful signup\n          setSuccessMessage(\"Sign up initiated! Please check your email to confirm your account.\");\n          setEmail('');\n          setPassword('');\n        }\n      } else {\n        response = await supabase.auth.signInWithPassword({\n          email,\n          password\n        });\n        if (response.error) {\n          // Provide more user-friendly login error messages\n          if (response.error.message.includes(\"Invalid login credentials\") || response.error.message.includes(\"Email not confirmed\")) {\n            setError(\"Incorrect email or password, or email not confirmed.\");\n          } else {\n            setError(response.error.message);\n          }\n        } else if (response.data.user) {\n          console.log(\"Login successful:\", response.data.user);\n          // App.js will handle redirect on successful login via onAuthStateChange\n        }\n      }\n    } catch (err) {\n      setError(err.message || \"An unexpected error occurred during authentication.\");\n      console.error(\"Authentication error during handleSubmit:\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"auth-form-container\",\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"auth-form-title\",\n      children: isSignUp ? \"Create Your Account\" : \"Login to Your Portal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"auth-form\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        placeholder: \"Email\",\n        value: email,\n        onChange: e => setEmail(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Password\",\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        children: loading ? \"Please wait...\" : isSignUp ? \"Sign Up\" : \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), successMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"auth-form-success\",\n      style: {\n        color: 'green',\n        marginTop: '15px',\n        textAlign: 'center'\n      },\n      children: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 26\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"auth-form-error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"auth-form-toggle-text\",\n      children: [isSignUp ? \"Already have an account?\" : \"Don't have an account?\", \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setError(null); // Clear errors when switching form type\n          setSuccessMessage(null); // Clear success messages\n          setIsSignUp(!isSignUp);\n          setEmail(''); // Clear fields when switching\n          setPassword('');\n        },\n        className: \"auth-form-toggle-button\",\n        children: isSignUp ? \"Login\" : \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"auth-form-toggle-text\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: async () => {\n          const userEmail = prompt(\"Please enter your email to reset password:\");\n          if (userEmail) {\n            setLoading(true);\n            setError(null);\n            setSuccessMessage(null);\n            try {\n              const {\n                error: resetError\n              } = await supabase.auth.resetPasswordForEmail(userEmail, {\n                redirectTo: window.location.origin + '/login?reset=true' // Redirect back to login after reset\n              });\n              if (resetError) {\n                setError(resetError.message);\n              } else {\n                setSuccessMessage(\"Password reset email sent! Check your inbox.\");\n              }\n            } catch (err) {\n              setError(err.message || \"Failed to send reset email.\");\n            } finally {\n              setLoading(false);\n            }\n          }\n        },\n        className: \"auth-form-toggle-button\",\n        children: \"Forgot Password?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthForm, \"BlrHKAH/nNO3VuLE8HB0E74t9cg=\");\n_c = AuthForm;\nexport default AuthForm;\nvar _c;\n$RefreshReg$(_c, \"AuthForm\");","map":{"version":3,"names":["React","useState","supabase","jsxDEV","_jsxDEV","AuthForm","_s","email","setEmail","password","setPassword","isSignUp","setIsSignUp","loading","setLoading","error","setError","successMessage","setSuccessMessage","handleSubmit","e","preventDefault","response","auth","signUp","message","data","user","confirmed_at","signInWithPassword","includes","console","log","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","required","disabled","style","color","marginTop","textAlign","onClick","userEmail","prompt","resetError","resetPasswordForEmail","redirectTo","window","location","origin","_c","$RefreshReg$"],"sources":["/Users/aryansrivastava/projects/Paper-Trading-Portal/src/components/Auth.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { supabase } from '../supabaseClient'; // Correct, goes up to src/\nimport './Auth.css'; // Correct, now it's a sibling\nfunction AuthForm() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isSignUp, setIsSignUp] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null); // New state for success messages\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n    setSuccessMessage(null); // Clear previous success messages\n\n    try {\n      let response;\n      if (isSignUp) {\n        response = await supabase.auth.signUp({ email, password });\n        \n        if (response.error) {\n          setError(response.error.message);\n        } else if (response.data.user && !response.data.user.confirmed_at) { // User created but not confirmed\n          setSuccessMessage(\"Sign up successful! Please check your email for a confirmation link to verify your account.\");\n          // Clear form fields after successful signup prompt\n          setEmail('');\n          setPassword('');\n        } else if (response.data.user) { // User created and already confirmed (e.g., if email confirmation is off)\n          setSuccessMessage(\"Sign up successful! You are now logged in.\");\n        } else { // Fallback for unexpected successful signup\n          setSuccessMessage(\"Sign up initiated! Please check your email to confirm your account.\");\n          setEmail('');\n          setPassword('');\n        }\n      } else {\n        response = await supabase.auth.signInWithPassword({ email, password });\n        \n        if (response.error) {\n          // Provide more user-friendly login error messages\n          if (response.error.message.includes(\"Invalid login credentials\") || response.error.message.includes(\"Email not confirmed\")) {\n            setError(\"Incorrect email or password, or email not confirmed.\");\n          } else {\n            setError(response.error.message);\n          }\n        } else if (response.data.user) {\n          console.log(\"Login successful:\", response.data.user);\n          // App.js will handle redirect on successful login via onAuthStateChange\n        }\n      }\n    } catch (err) {\n      setError(err.message || \"An unexpected error occurred during authentication.\");\n      console.error(\"Authentication error during handleSubmit:\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"auth-form-container\"> {/* Apply container class */}\n      <h2 className=\"auth-form-title\">{isSignUp ? \"Create Your Account\" : \"Login to Your Portal\"}</h2> {/* Updated titles */}\n      <form onSubmit={handleSubmit} className=\"auth-form\"> {/* Apply form class */}\n        <input\n          type=\"email\"\n          placeholder=\"Email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          required\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          required\n        />\n        <button type=\"submit\" disabled={loading}>\n          {loading ? \"Please wait...\" : isSignUp ? \"Sign Up\" : \"Login\"}\n        </button>\n      </form>\n\n      {/* Display success messages */}\n      {successMessage && <p className=\"auth-form-success\" style={{ color: 'green', marginTop: '15px', textAlign: 'center' }}>{successMessage}</p>}\n      {/* Display error messages */}\n      {error && <p className=\"auth-form-error\">{error}</p>}\n\n      <p className=\"auth-form-toggle-text\">\n        {isSignUp ? \"Already have an account?\" : \"Don't have an account?\"}{\" \"}\n        <button\n          onClick={() => {\n            setError(null); // Clear errors when switching form type\n            setSuccessMessage(null); // Clear success messages\n            setIsSignUp(!isSignUp);\n            setEmail(''); // Clear fields when switching\n            setPassword('');\n          }}\n          className=\"auth-form-toggle-button\"\n        >\n          {isSignUp ? \"Login\" : \"Sign Up\"}\n        </button>\n      </p>\n\n      {/* Optionally, add a \"Forgot Password\" link here */}\n      <p className=\"auth-form-toggle-text\">\n        <button\n          onClick={async () => {\n            const userEmail = prompt(\"Please enter your email to reset password:\");\n            if (userEmail) {\n              setLoading(true);\n              setError(null);\n              setSuccessMessage(null);\n              try {\n                const { error: resetError } = await supabase.auth.resetPasswordForEmail(userEmail, {\n                  redirectTo: window.location.origin + '/login?reset=true', // Redirect back to login after reset\n                });\n                if (resetError) {\n                  setError(resetError.message);\n                } else {\n                  setSuccessMessage(\"Password reset email sent! Check your inbox.\");\n                }\n              } catch (err) {\n                setError(err.message || \"Failed to send reset email.\");\n              } finally {\n                setLoading(false);\n              }\n            }\n          }}\n          className=\"auth-form-toggle-button\"\n        >\n          Forgot Password?\n        </button>\n      </p>\n    </div>\n  );\n}\n\nexport default AuthForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}