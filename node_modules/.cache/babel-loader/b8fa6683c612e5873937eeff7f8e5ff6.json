{"ast":null,"code":"var _jsxFileName = \"/Users/aryansrivastava/projects/Paper-Trading-Portal/src/AuthForm.jsx\";\nimport React, { useState } from \"react\";\nimport { supabase } from \"./supabaseClient\";\nimport './AuthForm.css'; // Import the new CSS file\n\nfunction AuthForm() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isSignUp, setIsSignUp] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null); // New state for success messages\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n    setSuccessMessage(null); // Clear previous success messages\n\n    try {\n      let response;\n      if (isSignUp) {\n        response = await supabase.auth.signUp({\n          email,\n          password\n        });\n        if (response.error) {\n          setError(response.error.message);\n        } else if (response.data.user && !response.data.user.confirmed_at) {\n          // User created but not confirmed\n          setSuccessMessage(\"Sign up successful! Please check your email for a confirmation link to verify your account.\");\n          // Clear form fields after successful signup prompt\n          setEmail('');\n          setPassword('');\n        } else if (response.data.user) {\n          // User created and already confirmed (e.g., if email confirmation is off)\n          setSuccessMessage(\"Sign up successful! You are now logged in.\");\n        } else {\n          // Fallback for unexpected successful signup\n          setSuccessMessage(\"Sign up initiated! Please check your email to confirm your account.\");\n          setEmail('');\n          setPassword('');\n        }\n      } else {\n        response = await supabase.auth.signInWithPassword({\n          email,\n          password\n        });\n        if (response.error) {\n          // Provide more user-friendly login error messages\n          if (response.error.message.includes(\"Invalid login credentials\") || response.error.message.includes(\"Email not confirmed\")) {\n            setError(\"Incorrect email or password, or email not confirmed.\");\n          } else {\n            setError(response.error.message);\n          }\n        } else if (response.data.user) {\n          console.log(\"Login successful:\", response.data.user);\n          // App.js will handle redirect on successful login via onAuthStateChange\n        }\n      }\n    } catch (err) {\n      setError(err.message || \"An unexpected error occurred during authentication.\");\n      console.error(\"Authentication error during handleSubmit:\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"auth-form-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, \" \", /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"auth-form-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, isSignUp ? \"Create Your Account\" : \"Login to Your Portal\"), \" \", /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"auth-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"email\",\n    placeholder: \"Email\",\n    value: email,\n    onChange: e => setEmail(e.target.value),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    placeholder: \"Password\",\n    value: password,\n    onChange: e => setPassword(e.target.value),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, loading ? \"Please wait...\" : isSignUp ? \"Sign Up\" : \"Login\")), successMessage && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"auth-form-success\",\n    style: {\n      color: 'green',\n      marginTop: '15px',\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 26\n    }\n  }, successMessage), error && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"auth-form-error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, error), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"auth-form-toggle-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, isSignUp ? \"Already have an account?\" : \"Don't have an account?\", \" \", /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setError(null); // Clear errors when switching form type\n      setSuccessMessage(null); // Clear success messages\n      setIsSignUp(!isSignUp);\n      setEmail(''); // Clear fields when switching\n      setPassword('');\n    },\n    className: \"auth-form-toggle-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, isSignUp ? \"Login\" : \"Sign Up\")), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"auth-form-toggle-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: async () => {\n      const userEmail = prompt(\"Please enter your email to reset password:\");\n      if (userEmail) {\n        setLoading(true);\n        setError(null);\n        setSuccessMessage(null);\n        try {\n          const {\n            error: resetError\n          } = await supabase.auth.resetPasswordForEmail(userEmail, {\n            redirectTo: window.location.origin + '/login?reset=true' // Redirect back to login after reset\n          });\n          if (resetError) {\n            setError(resetError.message);\n          } else {\n            setSuccessMessage(\"Password reset email sent! Check your inbox.\");\n          }\n        } catch (err) {\n          setError(err.message || \"Failed to send reset email.\");\n        } finally {\n          setLoading(false);\n        }\n      }\n    },\n    className: \"auth-form-toggle-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, \"Forgot Password?\")));\n}\nexport default AuthForm;","map":{"version":3,"names":["React","useState","supabase","AuthForm","email","setEmail","password","setPassword","isSignUp","setIsSignUp","loading","setLoading","error","setError","successMessage","setSuccessMessage","handleSubmit","e","preventDefault","response","auth","signUp","message","data","user","confirmed_at","signInWithPassword","includes","console","log","err","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","required","disabled","style","color","marginTop","textAlign","onClick","userEmail","prompt","resetError","resetPasswordForEmail","redirectTo","window","location","origin"],"sources":["/Users/aryansrivastava/projects/Paper-Trading-Portal/src/AuthForm.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { supabase } from \"./supabaseClient\";\nimport './AuthForm.css'; // Import the new CSS file\n\nfunction AuthForm() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isSignUp, setIsSignUp] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null); // New state for success messages\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n    setSuccessMessage(null); // Clear previous success messages\n\n    try {\n      let response;\n      if (isSignUp) {\n        response = await supabase.auth.signUp({ email, password });\n        \n        if (response.error) {\n          setError(response.error.message);\n        } else if (response.data.user && !response.data.user.confirmed_at) { // User created but not confirmed\n          setSuccessMessage(\"Sign up successful! Please check your email for a confirmation link to verify your account.\");\n          // Clear form fields after successful signup prompt\n          setEmail('');\n          setPassword('');\n        } else if (response.data.user) { // User created and already confirmed (e.g., if email confirmation is off)\n          setSuccessMessage(\"Sign up successful! You are now logged in.\");\n        } else { // Fallback for unexpected successful signup\n          setSuccessMessage(\"Sign up initiated! Please check your email to confirm your account.\");\n          setEmail('');\n          setPassword('');\n        }\n      } else {\n        response = await supabase.auth.signInWithPassword({ email, password });\n        \n        if (response.error) {\n          // Provide more user-friendly login error messages\n          if (response.error.message.includes(\"Invalid login credentials\") || response.error.message.includes(\"Email not confirmed\")) {\n            setError(\"Incorrect email or password, or email not confirmed.\");\n          } else {\n            setError(response.error.message);\n          }\n        } else if (response.data.user) {\n          console.log(\"Login successful:\", response.data.user);\n          // App.js will handle redirect on successful login via onAuthStateChange\n        }\n      }\n    } catch (err) {\n      setError(err.message || \"An unexpected error occurred during authentication.\");\n      console.error(\"Authentication error during handleSubmit:\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"auth-form-container\"> {/* Apply container class */}\n      <h2 className=\"auth-form-title\">{isSignUp ? \"Create Your Account\" : \"Login to Your Portal\"}</h2> {/* Updated titles */}\n      <form onSubmit={handleSubmit} className=\"auth-form\"> {/* Apply form class */}\n        <input\n          type=\"email\"\n          placeholder=\"Email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          required\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          required\n        />\n        <button type=\"submit\" disabled={loading}>\n          {loading ? \"Please wait...\" : isSignUp ? \"Sign Up\" : \"Login\"}\n        </button>\n      </form>\n\n      {/* Display success messages */}\n      {successMessage && <p className=\"auth-form-success\" style={{ color: 'green', marginTop: '15px', textAlign: 'center' }}>{successMessage}</p>}\n      {/* Display error messages */}\n      {error && <p className=\"auth-form-error\">{error}</p>}\n\n      <p className=\"auth-form-toggle-text\">\n        {isSignUp ? \"Already have an account?\" : \"Don't have an account?\"}{\" \"}\n        <button\n          onClick={() => {\n            setError(null); // Clear errors when switching form type\n            setSuccessMessage(null); // Clear success messages\n            setIsSignUp(!isSignUp);\n            setEmail(''); // Clear fields when switching\n            setPassword('');\n          }}\n          className=\"auth-form-toggle-button\"\n        >\n          {isSignUp ? \"Login\" : \"Sign Up\"}\n        </button>\n      </p>\n\n      {/* Optionally, add a \"Forgot Password\" link here */}\n      <p className=\"auth-form-toggle-text\">\n        <button\n          onClick={async () => {\n            const userEmail = prompt(\"Please enter your email to reset password:\");\n            if (userEmail) {\n              setLoading(true);\n              setError(null);\n              setSuccessMessage(null);\n              try {\n                const { error: resetError } = await supabase.auth.resetPasswordForEmail(userEmail, {\n                  redirectTo: window.location.origin + '/login?reset=true', // Redirect back to login after reset\n                });\n                if (resetError) {\n                  setError(resetError.message);\n                } else {\n                  setSuccessMessage(\"Password reset email sent! Check your inbox.\");\n                }\n              } catch (err) {\n                setError(err.message || \"Failed to send reset email.\");\n              } finally {\n                setLoading(false);\n              }\n            }\n          }}\n          className=\"auth-form-toggle-button\"\n        >\n          Forgot Password?\n        </button>\n      </p>\n    </div>\n  );\n}\n\nexport default AuthForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}