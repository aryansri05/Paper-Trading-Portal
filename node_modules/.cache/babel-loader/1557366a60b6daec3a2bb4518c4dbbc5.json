{"ast":null,"code":"var _jsxFileName = \"/Users/aryansrivastava/projects/paper-trading-app/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { supabase } from \"./supabaseClient\";\nimport AuthForm from \"./AuthForm\";\nimport TradingDashboard from \"./TradingDashboard\";\nimport './App.css';\nfunction App() {\n  const [session, setSession] = useState(null);\n  const [user, setUser] = useState(null);\n  const [loadingInitialSession, setLoadingInitialSession] = useState(true);\n  useEffect(() => {\n    let _isMounted = true;\n    const handleAuthStateChange = (event, currentSession) => {\n      if (_isMounted) {\n        console.log(\"Supabase Auth State Change Event:\", event);\n        console.log(\"Current Session:\", currentSession);\n\n        // Ensure that if a session exists, its user object is valid\n        if (currentSession && currentSession.user && currentSession.user.id) {\n          setSession(currentSession);\n          setUser(currentSession.user);\n        } else {\n          // If no session or user is invalid/missing, clear them\n          setSession(null);\n          setUser(null);\n        }\n        setLoadingInitialSession(false);\n      }\n    };\n\n    // Initial check for session on mount\n    const getSession = async () => {\n      setLoadingInitialSession(true);\n      const {\n        data: {\n          session\n        },\n        error\n      } = await supabase.auth.getSession();\n      if (_isMounted) {\n        if (error) {\n          console.error(\"Error getting initial session:\", error);\n          setSession(null);\n          setUser(null);\n        } else {\n          // Use the same logic as handleAuthStateChange\n          if (session && session.user && session.user.id) {\n            setSession(session);\n            setUser(session.user);\n          } else {\n            setSession(null);\n            setUser(null);\n          }\n        }\n        setLoadingInitialSession(false);\n      }\n    };\n    getSession(); // Call initial session check\n\n    // Set up the real-time listener for authentication state changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange(handleAuthStateChange);\n\n    // Cleanup function for when the component unmounts\n    return () => {\n      _isMounted = false;\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n  }, []);\n  if (loadingInitialSession) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: 'center',\n        marginTop: '50px',\n        fontSize: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }, \"Loading session...\");\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, session && user ?\n  /*#__PURE__*/\n  // Explicitly check for both session AND user\n  React.createElement(TradingDashboard, {\n    user: user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(AuthForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }));\n}\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","supabase","AuthForm","TradingDashboard","App","session","setSession","user","setUser","loadingInitialSession","setLoadingInitialSession","_isMounted","handleAuthStateChange","event","currentSession","console","log","id","getSession","data","error","auth","subscription","onAuthStateChange","unsubscribe","createElement","style","textAlign","marginTop","fontSize","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className"],"sources":["/Users/aryansrivastava/projects/paper-trading-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { supabase } from \"./supabaseClient\";\nimport AuthForm from \"./AuthForm\";\nimport TradingDashboard from \"./TradingDashboard\";\nimport './App.css';\n\nfunction App() {\n  const [session, setSession] = useState(null);\n  const [user, setUser] = useState(null);\n  const [loadingInitialSession, setLoadingInitialSession] = useState(true);\n\n  useEffect(() => {\n    let _isMounted = true;\n\n    const handleAuthStateChange = (event, currentSession) => {\n      if (_isMounted) {\n        console.log(\"Supabase Auth State Change Event:\", event);\n        console.log(\"Current Session:\", currentSession);\n        \n        // Ensure that if a session exists, its user object is valid\n        if (currentSession && currentSession.user && currentSession.user.id) {\n          setSession(currentSession);\n          setUser(currentSession.user);\n        } else {\n          // If no session or user is invalid/missing, clear them\n          setSession(null);\n          setUser(null);\n        }\n        setLoadingInitialSession(false);\n      }\n    };\n\n    // Initial check for session on mount\n    const getSession = async () => {\n      setLoadingInitialSession(true);\n      const { data: { session }, error } = await supabase.auth.getSession();\n      if (_isMounted) {\n        if (error) {\n          console.error(\"Error getting initial session:\", error);\n          setSession(null);\n          setUser(null);\n        } else {\n          // Use the same logic as handleAuthStateChange\n          if (session && session.user && session.user.id) {\n            setSession(session);\n            setUser(session.user);\n          } else {\n            setSession(null);\n            setUser(null);\n          }\n        }\n        setLoadingInitialSession(false);\n      }\n    };\n\n    getSession(); // Call initial session check\n\n    // Set up the real-time listener for authentication state changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(handleAuthStateChange);\n\n    // Cleanup function for when the component unmounts\n    return () => {\n      _isMounted = false;\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n  }, []);\n\n  if (loadingInitialSession) {\n    return (\n      <div style={{ textAlign: 'center', marginTop: '50px', fontSize: '20px' }}>\n        Loading session...\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      {session && user ? ( // Explicitly check for both session AND user\n        <TradingDashboard user={user} />\n      ) : (\n        <AuthForm />\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAO,WAAW;AAElB,SAASC,GAAGA,CAAA,EAAG;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACQ,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAExEC,SAAS,CAAC,MAAM;IACd,IAAIW,UAAU,GAAG,IAAI;IAErB,MAAMC,qBAAqB,GAAGA,CAACC,KAAK,EAAEC,cAAc,KAAK;MACvD,IAAIH,UAAU,EAAE;QACdI,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEH,KAAK,CAAC;QACvDE,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,cAAc,CAAC;;QAE/C;QACA,IAAIA,cAAc,IAAIA,cAAc,CAACP,IAAI,IAAIO,cAAc,CAACP,IAAI,CAACU,EAAE,EAAE;UACnEX,UAAU,CAACQ,cAAc,CAAC;UAC1BN,OAAO,CAACM,cAAc,CAACP,IAAI,CAAC;QAC9B,CAAC,MAAM;UACL;UACAD,UAAU,CAAC,IAAI,CAAC;UAChBE,OAAO,CAAC,IAAI,CAAC;QACf;QACAE,wBAAwB,CAAC,KAAK,CAAC;MACjC;IACF,CAAC;;IAED;IACA,MAAMQ,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7BR,wBAAwB,CAAC,IAAI,CAAC;MAC9B,MAAM;QAAES,IAAI,EAAE;UAAEd;QAAQ,CAAC;QAAEe;MAAM,CAAC,GAAG,MAAMnB,QAAQ,CAACoB,IAAI,CAACH,UAAU,CAAC,CAAC;MACrE,IAAIP,UAAU,EAAE;QACd,IAAIS,KAAK,EAAE;UACTL,OAAO,CAACK,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;UACtDd,UAAU,CAAC,IAAI,CAAC;UAChBE,OAAO,CAAC,IAAI,CAAC;QACf,CAAC,MAAM;UACL;UACA,IAAIH,OAAO,IAAIA,OAAO,CAACE,IAAI,IAAIF,OAAO,CAACE,IAAI,CAACU,EAAE,EAAE;YAC9CX,UAAU,CAACD,OAAO,CAAC;YACnBG,OAAO,CAACH,OAAO,CAACE,IAAI,CAAC;UACvB,CAAC,MAAM;YACLD,UAAU,CAAC,IAAI,CAAC;YAChBE,OAAO,CAAC,IAAI,CAAC;UACf;QACF;QACAE,wBAAwB,CAAC,KAAK,CAAC;MACjC;IACF,CAAC;IAEDQ,UAAU,CAAC,CAAC,CAAC,CAAC;;IAEd;IACA,MAAM;MAAEC,IAAI,EAAE;QAAEG;MAAa;IAAE,CAAC,GAAGrB,QAAQ,CAACoB,IAAI,CAACE,iBAAiB,CAACX,qBAAqB,CAAC;;IAEzF;IACA,OAAO,MAAM;MACXD,UAAU,GAAG,KAAK;MAClB,IAAIW,YAAY,EAAE;QAChBA,YAAY,CAACE,WAAW,CAAC,CAAC;MAC5B;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIf,qBAAqB,EAAE;IACzB,oBACEX,KAAA,CAAA2B,aAAA;MAAKC,KAAK,EAAE;QAAEC,SAAS,EAAE,QAAQ;QAAEC,SAAS,EAAE,MAAM;QAAEC,QAAQ,EAAE;MAAO,CAAE;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAC,oBAErE,CAAC;EAEV;EAEA,oBACErC,KAAA,CAAA2B,aAAA;IAAKW,SAAS,EAAC,KAAK;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACjB9B,OAAO,IAAIE,IAAI;EAAA;EAAK;EACnBT,KAAA,CAAA2B,aAAA,CAACtB,gBAAgB;IAACI,IAAI,EAAEA,IAAK;IAAAuB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,gBAEhCrC,KAAA,CAAA2B,aAAA,CAACvB,QAAQ;IAAA4B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAEV,CAAC;AAEV;AAEA,eAAe/B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module"}