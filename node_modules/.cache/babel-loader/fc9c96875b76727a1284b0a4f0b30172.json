{"ast":null,"code":"var _jsxFileName = \"/Users/aryansrivastava/projects/paper-trading-app/src/TradingDashboard.js\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { supabase } from \"./supabaseClient\"; // Ensure this path is correct\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from \"recharts\";\n\n// IMPORTANT: Replace with your actual Finnhub API Key from finnhub.io\n// This key is for demonstration. For broader real-time data, you might need a paid plan.\nconst FINNHUB_API_KEY = \"d108911r01qhkqr8ggb0d108911r01qhkqr8ggbg\"; // <--- YOUR NEW API KEY IS HERE\n\n// Helper to check for placeholder or dummy API keys\nconst isInvalidApiKey = key => {\n  return !key || key === \"YOUR_FINNHUB_API_KEY\" ||\n  // Generic placeholder\n  key === \"d0uaoehr01qn5fk47mdgd0uaoehr01qn5fk47me0\" ||\n  // Original placeholder\n  key === \"d0uv0tpr01qmg3uj77qgd0uv0tpr01qmg3uj77r0\" ||\n  // Common dummy key 1\n  key === \"d0uvgepr01qmg3uj9ug0d0uvgepr01qmg3uj9ugg\" ||\n  // Common dummy key 2\n  key === \"d0vlu8hr01qkepd13dpgd0vlu8hr01qkepd13dq0\" ||\n  // Previous provided key\n  key === \"d108911r01qhkqr8ggb0d108911r01qhkqr8ggbg\"; // Your newly provided key (still free-tier likely)\n};\nconst CURRENCY_SYMBOL = \"$\"; // Changed to USD symbol for US market stocks\n\nfunction TradingDashboard({\n  user\n}) {\n  // user prop comes from App.js\n  // Log the received user prop for debugging when component mounts or user changes\n  useEffect(() => {\n    console.log(\"TradingDashboard mounted or user prop changed. User:\", JSON.stringify(user, null, 2));\n  }, [user]);\n  const [trades, setTrades] = useState([]);\n  const [livePrices, setLivePrices] = useState({});\n  const [form, setForm] = useState({\n    symbol: \"\",\n    quantity: \"\",\n    type: \"buy\"\n  });\n  const [capital, setCapital] = useState(() => {\n    // Ensure user and user.id exist before trying to access localStorage\n    const userId = user === null || user === void 0 ? void 0 : user.id;\n    if (userId) {\n      const saved = localStorage.getItem(\"capital_\" + userId);\n      return saved ? Number(saved) : 100000; // Default capital in USD ($100,000)\n    }\n    return 100000; // Default if no user.id (should ideally not happen if App.js guards this)\n  });\n  const [availableSymbols, setAvailableSymbols] = useState([]); // Stores list of supported US stock symbols\n  const [symbolError, setSymbolError] = useState(\"\"); // For displaying errors related to symbols/API key\n\n  // Effect to fetch the list of available US stock symbols from Finnhub\n  useEffect(() => {\n    const fetchAvailableSymbols = async () => {\n      if (isInvalidApiKey(FINNHUB_API_KEY)) {\n        console.error(\"Cannot fetch symbols: Invalid Finnhub API Key detected. Please provide a valid key.\");\n        setSymbolError(\"Could not fetch available symbols. Please set a valid Finnhub API Key in the code.\");\n        setAvailableSymbols([]); // Clear any previous symbols\n        return;\n      }\n      try {\n        console.log(\"Fetching available US market symbols from Finnhub...\");\n        // Fetch symbols specifically for the US exchange\n        const res = await axios.get(`https://finnhub.io/api/v1/stock/symbol?exchange=US&token=${FINNHUB_API_KEY}`);\n        if (res.data && Array.isArray(res.data)) {\n          // Filter for common stocks and map to their display symbol\n          const symbols = res.data.filter(s => s.type === \"Common Stock\" && s.displaySymbol && s.symbol // Ensure symbol is also present\n          ).map(s => s.displaySymbol.toUpperCase()); // Convert to uppercase for consistency\n          setAvailableSymbols(symbols);\n          console.log(`Fetched ${symbols.length} US market symbols.`);\n          if (symbols.length === 0) {\n            setSymbolError(\"No US market symbols found. Check API key permissions or Finnhub US data coverage.\");\n          } else {\n            setSymbolError(\"\"); // Clear error if symbols are fetched\n          }\n        } else {\n          console.warn(\"No symbols returned or unexpected format from Finnhub for US market:\", res.data);\n          setSymbolError(\"Could not fetch symbols: No data or unexpected format from API for US market.\");\n          setAvailableSymbols([]);\n        }\n      } catch (err) {\n        var _err$response;\n        console.error(\"Error fetching available US symbols:\", err.message, (_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data);\n        setSymbolError(`Could not fetch available US symbols: ${err.message}. Check API key, network, and API limits.`);\n        setAvailableSymbols([]);\n      }\n    };\n    fetchAvailableSymbols();\n  }, []); // Runs once on component mount\n\n  // Effect to fetch user's trade history from Supabase\n  useEffect(() => {\n    // Fetch trades only if user and user.id are valid and not a placeholder\n    if (user && user.id && typeof user.id === 'string' && user.id.includes('-') && !user.id.startsWith(\"dummy-user-id\")) {\n      fetchTrades();\n    } else if (user && user.id) {\n      console.warn(\"fetchTrades skipped: user.id might be invalid or a placeholder:\", user.id);\n    }\n  }, [user]); // Re-fetch trades when the user object changes\n\n  // Effect to fetch live prices for traded/entered symbols\n  useEffect(() => {\n    if (isInvalidApiKey(FINNHUB_API_KEY)) {\n      if (!symbolError.includes(\"API Key\")) {\n        // Only update error if it's not already about API key\n        setSymbolError(\"Live price updates paused: Please set a valid Finnhub API Key.\");\n      }\n      return; // Stop execution if API key is invalid\n    }\n\n    // Combine symbols from existing trades and the current form input\n    const symbolsFromTrades = trades.map(t => t.symbol.toUpperCase());\n    const symbolFromForm = form.symbol ? [form.symbol.toUpperCase()] : [];\n\n    // Get unique symbols to fetch prices for\n    const uniqueSymbols = [...new Set([...symbolsFromTrades, ...symbolFromForm])];\n    const symbolsToFetch = uniqueSymbols.filter(s => !!s); // Filter out empty strings\n\n    if (symbolsToFetch.length === 0) {\n      return; // No symbols to fetch, exit early\n    }\n    const fetchPrices = async () => {\n      // console.log(\"Fetching prices for US symbols:\", symbolsToFetch); // Can be noisy for frequent updates\n      const currentPricesBatch = {};\n      for (const sym of symbolsToFetch) {\n        try {\n          const res = await axios.get(`https://finnhub.io/api/v1/quote?symbol=${sym}&token=${FINNHUB_API_KEY}`);\n          // Check if price (c) is a valid number and not zero (Finnhub often returns 0 for non-tradable/unsupported/rate-limited symbols)\n          if (res.data && typeof res.data.c === 'number' && res.data.c > 0) {\n            currentPricesBatch[sym] = res.data.c;\n          } else {\n            // Log a warning if price data is invalid/missing for a symbol\n            console.warn(`No valid price data for US symbol ${sym}. Finnhub response:`, res.data);\n          }\n        } catch (err) {\n          console.error(\"Error fetching price for US symbol\", sym, err.message);\n        }\n      }\n\n      // Update livePrices state if any valid prices were fetched in this batch\n      if (Object.keys(currentPricesBatch).length > 0) {\n        setLivePrices(prevPrices => ({\n          ...prevPrices,\n          ...currentPricesBatch\n        }));\n      }\n    };\n    fetchPrices(); // Fetch prices immediately on effect run\n    // Set up interval for subsequent price fetches (e.g., every 15 seconds)\n    const interval = setInterval(fetchPrices, 15000);\n    return () => clearInterval(interval); // Clean up interval on component unmount or dependencies change\n  }, [trades, form.symbol, FINNHUB_API_KEY, symbolError]); // Dependencies for price fetching\n\n  // Effect to save capital to localStorage whenever it changes\n  useEffect(() => {\n    // Save capital to localStorage only if user and user.id are valid\n    if (user && user.id && typeof user.id === 'string' && user.id.includes('-') && !user.id.startsWith(\"dummy-user-id\")) {\n      localStorage.setItem(\"capital_\" + user.id, capital.toString());\n    }\n  }, [capital, user]); // Capital and user are dependencies\n\n  // Function to fetch trades for the current user from Supabase\n  const fetchTrades = async () => {\n    const {\n      data,\n      error\n    } = await supabase.from(\"trades\").select(\"*\").eq(\"user_id\", user.id) // Filter trades by the current user's ID\n    .order(\"created_at\", {\n      ascending: true\n    }); // Order by creation time\n\n    if (!error) setTrades(data);else console.error(\"Error fetching trades:\", error.message);\n  };\n\n  // Handles input changes for the symbol and quantity form fields\n  const handleChange = e => {\n    let value = e.target.value.toUpperCase();\n    // Allow only alphanumeric characters for the symbol\n    if (e.target.name === \"symbol\") {\n      value = value.replace(/[^A-Z0-9]/g, '');\n    }\n    setForm({\n      ...form,\n      [e.target.name]: value\n    });\n  };\n\n  // Centralized function to validate and execute either a buy or sell trade\n  const validateAndExecuteTrade = async type => {\n    // **Explicit check for valid user and user.id at the start of trade execution**\n    if (!user || !user.id || typeof user.id !== 'string' || !user.id.includes('-') || user.id.startsWith(\"dummy-user-id\")) {\n      alert(\"User Authentication Error: Cannot execute trade without a valid user session. Please ensure you are logged in correctly.\");\n      console.error(\"Trade rejected: Invalid user object or user ID. User ID:\", user ? user.id : \"N/A\");\n      return;\n    }\n    console.log(`Attempting ${type} trade for user_id: ${user.id} with symbol: ${form.symbol}`); // Log before execution\n\n    if (isInvalidApiKey(FINNHUB_API_KEY)) {\n      alert(\"Trading disabled: Invalid Finnhub API Key. Please update it in the code.\");\n      return;\n    }\n    const sym = form.symbol.toUpperCase();\n    const qty = Number(form.quantity);\n    if (!sym || !qty || qty <= 0) {\n      alert(\"Invalid input: Symbol and positive quantity are required.\");\n      return;\n    }\n\n    // Validate symbol against the fetched list of available symbols (if the list is populated)\n    if (availableSymbols.length > 0 && !availableSymbols.includes(sym)) {\n      alert(`Symbol '${sym}' is not in the recognized list of US stocks. ` + `Please select from suggestions or ensure it's a valid US ticker.`);\n      setSymbolError(`Symbol '${sym}' not found in available US stock list. Is your API key providing full coverage?`);\n      return;\n    }\n    const price = livePrices[sym];\n    // Check if the price is a valid positive number\n    if (typeof price !== 'number' || price <= 0) {\n      alert(`Live price for '${sym}' is currently unavailable or invalid. ` + `Ensure the symbol is a correct US ticker, actively traded, and your API key is working. Try again shortly.`);\n      setSymbolError(`No valid live price for '${sym}'. Check US ticker, API data availability, or API key.`);\n      return;\n    }\n\n    // Prepare the trade object with the (now hopefully valid) user.id\n    const trade = {\n      user_id: user.id,\n      symbol: sym,\n      quantity: qty,\n      price,\n      type\n    };\n    if (type === \"buy\") {\n      const cost = qty * price;\n      if (cost > capital) {\n        alert(\"Not enough capital to perform this buy trade.\");\n        return;\n      }\n      // Optimistically update capital (will be reverted if database insert fails)\n      setCapital(c => c - cost);\n    } else {\n      // type === \"sell\"\n      const pnlSummary = calculatePnL(trades); // Re-calculate P&L summary based on current trades\n      const heldStock = pnlSummary.find(s => s.symbol === sym);\n      // Check if the user holds enough quantity to sell\n      if (!heldStock || heldStock.netQty < qty) {\n        alert(`You only hold ${heldStock ? heldStock.netQty : 0} of ${sym}. Cannot sell ${qty}.`);\n        return;\n      }\n      // Optimistically update capital (will be reverted if database insert fails)\n      setCapital(c => c + qty * price);\n    }\n\n    // Insert the trade into Supabase\n    const {\n      error\n    } = await supabase.from(\"trades\").insert([trade]);\n    if (error) {\n      alert(\"Error executing trade with database: \" + error.message);\n      // Revert optimistic capital update if database insert fails\n      if (type === \"buy\") {\n        setCapital(c => c + qty * price); // Add back the cost if buy failed\n      } else {\n        // Sell\n        setCapital(c => c - qty * price); // Subtract back the proceeds if sell failed\n      }\n      return;\n    }\n    setForm({\n      ...form,\n      quantity: \"\"\n    }); // Clear quantity after successful trade\n    fetchTrades(); // Refresh trades list to show the new trade\n    setSymbolError(\"\"); // Clear any previous symbol-related errors\n  };\n  const handleBuy = () => validateAndExecuteTrade(\"buy\");\n  const handleSell = () => validateAndExecuteTrade(\"sell\");\n\n  // Handles user logout\n  const handleLogout = async () => {\n    if (!user || !user.id) return; // Should ideally not be called if user is not present\n    console.log(\"Logging out user:\", user.id);\n    const {\n      error\n    } = await supabase.auth.signOut();\n    if (error) {\n      console.error(\"Error logging out:\", error.message);\n      alert(\"Logout failed: \" + error.message);\n    } else {\n      // App.js's onAuthStateChange listener will detect the SIGNED_OUT event\n      // and handle the UI update (e.g., redirect to login page).\n      console.log(\"User successfully logged out.\");\n    }\n  };\n\n  // Calculates Profit & Loss and net quantity for each symbol\n  const calculatePnL = currentTrades => {\n    const summary = {};\n    currentTrades.forEach(({\n      symbol,\n      quantity,\n      price,\n      type\n    }) => {\n      const s = symbol.toUpperCase();\n      if (!summary[s]) {\n        summary[s] = {\n          buyQty: 0,\n          buyTotal: 0,\n          sellQty: 0,\n          sellTotal: 0,\n          netQty: 0\n        };\n      }\n      const q = Number(quantity);\n      const p = Number(price);\n      if (type === \"buy\") {\n        summary[s].buyQty += q;\n        summary[s].buyTotal += q * p;\n        summary[s].netQty += q; // Increase net quantity on buy\n      } else {\n        // type === \"sell\"\n        summary[s].sellQty += q;\n        summary[s].sellTotal += q * p;\n        summary[s].netQty -= q; // Decrease net quantity on sell\n      }\n    });\n    return Object.entries(summary).map(([symbol, data]) => {\n      const avgBuy = data.buyQty > 0 ? data.buyTotal / data.buyQty : 0;\n      // Calculate realized profit from sold shares\n      const costOfSoldShares = avgBuy * data.sellQty;\n      const profit = data.sellTotal - costOfSoldShares;\n      return {\n        symbol,\n        netQty: data.netQty,\n        // Current quantity held\n        avgBuyPrice: avgBuy.toFixed(2),\n        profit: profit.toFixed(2) // Realized profit/loss\n      };\n    });\n  };\n  const pnlData = calculatePnL(trades); // Get current P&L data\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: \"1rem 2rem\",\n      fontFamily: \"Arial\",\n      maxWidth: 900,\n      margin: \"auto\",\n      backgroundColor: '#f9f9f9',\n      borderRadius: '8px',\n      boxShadow: '0 2px 10px rgba(0,0,0,0.05)'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    style: {\n      textAlign: 'center',\n      color: '#333'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }\n  }, \"\\uD83D\\uDCC8 Paper Trading Dashboard (US Market)\"), user && user.email && /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      textAlign: 'center',\n      color: '#555',\n      marginBottom: '1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 31\n    }\n  }, \"Logged in as: \", user.email, \" (ID: \", user.id, \")\"), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      fontSize: '1.2rem',\n      fontWeight: 'bold',\n      textAlign: 'center',\n      color: '#007bff'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }\n  }, \"Capital: \", CURRENCY_SYMBOL, capital.toFixed(2)), user && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: 'center',\n      marginBottom: '1.5rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleLogout,\n    style: {\n      padding: '10px 20px',\n      backgroundColor: '#dc3545',\n      color: 'white',\n      border: 'none',\n      borderRadius: '5px',\n      cursor: 'pointer',\n      fontSize: '1rem',\n      transition: 'background-color 0.2s'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 11\n    }\n  }, \"Logout\")), isInvalidApiKey(FINNHUB_API_KEY) && /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: \"red\",\n      fontWeight: \"bold\",\n      border: \"1px solid red\",\n      padding: \"0.8rem\",\n      margin: \"1.5rem 0\",\n      backgroundColor: '#ffe6e6',\n      borderRadius: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 9\n    }\n  }, \"\\u26A0\\uFE0F WARNING: A valid Finnhub API Key is not set in `TradingDashboard.js` or your current key is a free-tier key. Symbol list loading, live prices, and full trading functionality may not work correctly or may be severely limited. Please consider upgrading your Finnhub plan for broader access.\"), /*#__PURE__*/React.createElement(\"form\", {\n    style: {\n      marginBottom: \"2rem\",\n      display: \"flex\",\n      gap: \"0.8rem\",\n      flexWrap: \"wrap\",\n      alignItems: \"center\",\n      border: '1px solid #eee',\n      padding: '1.5rem',\n      borderRadius: '8px',\n      backgroundColor: '#fff'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    name: \"symbol\",\n    placeholder: \"Symbol (e.g., AAPL, MSFT)\",\n    value: form.symbol,\n    onChange: handleChange,\n    required: true,\n    style: {\n      flex: '1 1 180px',\n      minWidth: '150px',\n      padding: \"10px\",\n      border: \"1px solid #ddd\",\n      borderRadius: \"5px\",\n      fontSize: \"1rem\",\n      textTransform: \"uppercase\"\n    },\n    list: \"symbols-list\",\n    title: \"Enter US stock symbol, e.g., AAPL, MSFT\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"datalist\", {\n    id: \"symbols-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 9\n    }\n  }, availableSymbols.map(sym => /*#__PURE__*/React.createElement(\"option\", {\n    key: sym,\n    value: sym,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"quantity\",\n    type: \"number\",\n    placeholder: \"Quantity\",\n    value: form.quantity,\n    onChange: e => setForm({\n      ...form,\n      quantity: e.target.value\n    }),\n    required: true,\n    min: \"1\",\n    style: {\n      flex: '0 0 100px',\n      minWidth: '80px',\n      padding: \"10px\",\n      border: \"1px solid #ddd\",\n      borderRadius: \"5px\",\n      fontSize: \"1rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: handleBuy,\n    style: {\n      flex: '0 0 80px',\n      padding: \"10px 15px\",\n      backgroundColor: \"#28a745\",\n      color: \"white\",\n      border: \"none\",\n      cursor: \"pointer\",\n      borderRadius: \"5px\",\n      fontSize: \"1rem\",\n      fontWeight: \"bold\",\n      transition: 'background-color 0.2s'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 9\n    }\n  }, \"Buy\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: handleSell,\n    style: {\n      flex: '0 0 80px',\n      padding: \"10px 15px\",\n      backgroundColor: \"#dc3545\",\n      color: \"white\",\n      border: \"none\",\n      cursor: \"pointer\",\n      borderRadius: \"5px\",\n      fontSize: \"1rem\",\n      fontWeight: \"bold\",\n      transition: 'background-color 0.2s'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 9\n    }\n  }, \"Sell\")), symbolError && /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: \"red\",\n      marginTop: \"0.5rem\",\n      padding: \"0.8rem\",\n      border: \"1px dashed red\",\n      backgroundColor: '#ffe6e6',\n      borderRadius: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 23\n    }\n  }, \"\\u26A0\\uFE0F \", symbolError), /*#__PURE__*/React.createElement(\"h2\", {\n    style: {\n      color: '#333',\n      marginTop: '2rem',\n      marginBottom: '1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }\n  }, \"Live Prices (US Stocks)\"), Object.keys(livePrices).filter(sym => livePrices[sym] !== null && typeof livePrices[sym] === 'number' && livePrices[sym] > 0).length > 0 ? /*#__PURE__*/React.createElement(\"ul\", {\n    style: {\n      listStyleType: \"none\",\n      paddingLeft: 0,\n      columns: 2,\n      columnGap: \"20px\",\n      border: '1px solid #eee',\n      padding: '1.5rem',\n      borderRadius: '8px',\n      backgroundColor: '#fff'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 9\n    }\n  }, Object.entries(livePrices).map(([sym, price]) => price !== null && typeof price === 'number' && price > 0 ? /*#__PURE__*/React.createElement(\"li\", {\n    key: sym,\n    style: {\n      padding: \"0.5rem 0\",\n      borderBottom: \"1px solid #eee\",\n      display: 'flex',\n      justifyContent: 'space-between'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      fontWeight: 'bold'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 17\n    }\n  }, sym), \": \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 66\n    }\n  }, CURRENCY_SYMBOL, price.toFixed(2))) : null)) : /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: '#666',\n      border: '1px dashed #ccc',\n      padding: '1rem',\n      borderRadius: '5px',\n      backgroundColor: '#fff'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 9\n    }\n  }, \"No live prices for US stocks currently displayed. Ensure your API key is valid and type a valid US ticker (e.g. AAPL).\"), /*#__PURE__*/React.createElement(\"h2\", {\n    style: {\n      color: '#333',\n      marginTop: '2rem',\n      marginBottom: '1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 7\n    }\n  }, \"Trade History\"), trades.length > 0 ? /*#__PURE__*/React.createElement(\"table\", {\n    style: {\n      width: \"100%\",\n      borderCollapse: \"collapse\",\n      marginBottom: \"2rem\",\n      border: '1px solid #ddd',\n      borderRadius: '8px',\n      overflow: 'hidden'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    style: {\n      backgroundColor: \"#eef\",\n      color: '#333'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    style: {\n      padding: '12px',\n      textAlign: 'left',\n      borderBottom: '1px solid #ddd'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 15\n    }\n  }, \"Symbol\"), /*#__PURE__*/React.createElement(\"th\", {\n    style: {\n      padding: '12px',\n      textAlign: 'left',\n      borderBottom: '1px solid #ddd'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 15\n    }\n  }, \"Qty\"), /*#__PURE__*/React.createElement(\"th\", {\n    style: {\n      padding: '12px',\n      textAlign: 'left',\n      borderBottom: '1px solid #ddd'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 15\n    }\n  }, \"Price\"), /*#__PURE__*/React.createElement(\"th\", {\n    style: {\n      padding: '12px',\n      textAlign: 'left',\n      borderBottom: '1px solid #ddd'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 15\n    }\n  }, \"Type\"), /*#__PURE__*/React.createElement(\"th\", {\n    style: {\n      padding: '12px',\n      textAlign: 'left',\n      borderBottom: '1px solid #ddd'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 15\n    }\n  }, \"Time\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 11\n    }\n  }, trades.map(t => /*#__PURE__*/React.createElement(\"tr\", {\n    key: t.id,\n    style: {\n      backgroundColor: t.type === 'buy' ? '#e6ffe6' : '#ffe6e6'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    style: {\n      padding: '12px',\n      borderBottom: '1px solid #eee'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 17\n    }\n  }, t.symbol), /*#__PURE__*/React.createElement(\"td\", {\n    style: {\n      padding: '12px',\n      borderBottom: '1px solid #eee'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 17\n    }\n  }, t.quantity), /*#__PURE__*/React.createElement(\"td\", {\n    style: {\n      padding: '12px',\n      borderBottom: '1px solid #eee'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 17\n    }\n  }, CURRENCY_SYMBOL, Number(t.price).toFixed(2)), /*#__PURE__*/React.createElement(\"td\", {\n    style: {\n      padding: '12px',\n      borderBottom: '1px solid #eee',\n      color: t.type === \"buy\" ? \"green\" : \"red\",\n      textTransform: \"capitalize\",\n      fontWeight: 'bold'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 17\n    }\n  }, t.type), /*#__PURE__*/React.createElement(\"td\", {\n    style: {\n      padding: '12px',\n      borderBottom: '1px solid #eee',\n      fontSize: '0.9em',\n      color: '#666'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 17\n    }\n  }, new Date(t.created_at).toLocaleString()))))) : /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: '#666',\n      border: '1px dashed #ccc',\n      padding: '1rem',\n      borderRadius: '5px',\n      backgroundColor: '#fff'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 12\n    }\n  }, \"No trades made yet.\"), /*#__PURE__*/React.createElement(\"h2\", {\n    style: {\n      color: '#333',\n      marginTop: '2rem',\n      marginBottom: '1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 7\n    }\n  }, \"Holdings & Profit/Loss (Realized)\"), pnlData.length > 0 ? /*#__PURE__*/React.createElement(\"table\", {\n    style: {\n      width: \"100%\",\n      borderCollapse: \"collapse\",\n      marginBottom: \"2rem\",\n      border: '1px solid #ddd',\n      borderRadius: '8px',\n      overflow: 'hidden'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    style: {\n      backgroundColor: \"#eef\",\n      color: '#333'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    style: {\n      padding: '12px',\n      textAlign: 'left',\n      borderBottom: '1px solid #ddd'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 15\n    }\n  }, \"Symbol\"), /*#__PURE__*/React.createElement(\"th\", {\n    style: {\n      padding: '12px',\n      textAlign: 'left',\n      borderBottom: '1px solid #ddd'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 15\n    }\n  }, \"Net Qty Held\"), /*#__PURE__*/React.createElement(\"th\", {\n    style: {\n      padding: '12px',\n      textAlign: 'left',\n      borderBottom: '1px solid #ddd'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 15\n    }\n  }, \"Avg. Buy Price\"), /*#__PURE__*/React.createElement(\"th\", {\n    style: {\n      padding: '12px',\n      textAlign: 'left',\n      borderBottom: '1px solid #ddd'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 15\n    }\n  }, \"Realized P&L\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 11\n    }\n  }, pnlData.map(row => /*#__PURE__*/React.createElement(\"tr\", {\n    key: row.symbol,\n    style: {\n      backgroundColor: parseFloat(row.profit) >= 0 ? '#e6ffe6' : '#ffe6e6'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    style: {\n      padding: '12px',\n      borderBottom: '1px solid #eee'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 17\n    }\n  }, row.symbol), /*#__PURE__*/React.createElement(\"td\", {\n    style: {\n      padding: '12px',\n      borderBottom: '1px solid #eee'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 17\n    }\n  }, row.netQty), /*#__PURE__*/React.createElement(\"td\", {\n    style: {\n      padding: '12px',\n      borderBottom: '1px solid #eee'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 17\n    }\n  }, CURRENCY_SYMBOL, row.avgBuyPrice), /*#__PURE__*/React.createElement(\"td\", {\n    style: {\n      padding: '12px',\n      borderBottom: '1px solid #eee',\n      color: parseFloat(row.profit) >= 0 ? \"green\" : \"red\",\n      fontWeight: 'bold'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 17\n    }\n  }, CURRENCY_SYMBOL, row.profit))))) : /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: '#666',\n      border: '1px dashed #ccc',\n      padding: '1rem',\n      borderRadius: '5px',\n      backgroundColor: '#fff'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 12\n    }\n  }, \"No current holdings or realized P&L to display.\"), /*#__PURE__*/React.createElement(\"h2\", {\n    style: {\n      color: '#333',\n      marginTop: '2rem',\n      marginBottom: '1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 7\n    }\n  }, \"P&L Chart (Realized)\"), pnlData.filter(p => parseFloat(p.profit) !== 0).length > 0 ? /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 300,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(BarChart, {\n    data: pnlData.filter(p => parseFloat(p.profit) !== 0),\n    margin: {\n      top: 5,\n      right: 30,\n      left: 20,\n      bottom: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"symbol\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    tickFormatter: value => `${CURRENCY_SYMBOL}${value}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    formatter: value => [`${CURRENCY_SYMBOL}${Number(value).toFixed(2)}`, 'Realized P&L'],\n    labelFormatter: label => `Symbol: ${label}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Bar, {\n    dataKey: \"profit\",\n    name: \"Realized P&L\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 13\n    }\n  }, pnlData.filter(p => parseFloat(p.profit) !== 0).map((entry, index) => /*#__PURE__*/React.createElement(Cell, {\n    key: `cell-${index}`,\n    fill: parseFloat(entry.profit) >= 0 ? \"#4caf50\" : \"#f44336\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 17\n    }\n  }))))) : /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: '#666',\n      border: '1px dashed #ccc',\n      padding: '1rem',\n      borderRadius: '5px',\n      backgroundColor: '#fff'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 12\n    }\n  }, \"No realized P&L to chart.\"));\n}\nexport default TradingDashboard;","map":{"version":3,"names":["React","useState","useEffect","axios","supabase","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Cell","FINNHUB_API_KEY","isInvalidApiKey","key","CURRENCY_SYMBOL","TradingDashboard","user","console","log","JSON","stringify","trades","setTrades","livePrices","setLivePrices","form","setForm","symbol","quantity","type","capital","setCapital","userId","id","saved","localStorage","getItem","Number","availableSymbols","setAvailableSymbols","symbolError","setSymbolError","fetchAvailableSymbols","error","res","get","data","Array","isArray","symbols","filter","s","displaySymbol","map","toUpperCase","length","warn","err","_err$response","message","response","includes","startsWith","fetchTrades","symbolsFromTrades","t","symbolFromForm","uniqueSymbols","Set","symbolsToFetch","fetchPrices","currentPricesBatch","sym","c","Object","keys","prevPrices","interval","setInterval","clearInterval","setItem","toString","from","select","eq","order","ascending","handleChange","e","value","target","name","replace","validateAndExecuteTrade","alert","qty","price","trade","user_id","cost","pnlSummary","calculatePnL","heldStock","find","netQty","insert","handleBuy","handleSell","handleLogout","auth","signOut","currentTrades","summary","forEach","buyQty","buyTotal","sellQty","sellTotal","q","p","entries","avgBuy","costOfSoldShares","profit","avgBuyPrice","toFixed","pnlData","createElement","style","padding","fontFamily","maxWidth","margin","backgroundColor","borderRadius","boxShadow","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","textAlign","color","email","marginBottom","fontSize","fontWeight","onClick","border","cursor","transition","display","gap","flexWrap","alignItems","placeholder","onChange","required","flex","minWidth","textTransform","list","title","min","marginTop","listStyleType","paddingLeft","columns","columnGap","borderBottom","justifyContent","width","borderCollapse","overflow","Date","created_at","toLocaleString","row","parseFloat","height","top","right","left","bottom","strokeDasharray","dataKey","tickFormatter","formatter","labelFormatter","label","entry","index","fill"],"sources":["/Users/aryansrivastava/projects/paper-trading-app/src/TradingDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { supabase } from \"./supabaseClient\"; // Ensure this path is correct\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  Cell,\n} from \"recharts\";\n\n// IMPORTANT: Replace with your actual Finnhub API Key from finnhub.io\n// This key is for demonstration. For broader real-time data, you might need a paid plan.\nconst FINNHUB_API_KEY = \"d108911r01qhkqr8ggb0d108911r01qhkqr8ggbg\"; // <--- YOUR NEW API KEY IS HERE\n\n// Helper to check for placeholder or dummy API keys\nconst isInvalidApiKey = (key) => {\n  return !key ||\n         key === \"YOUR_FINNHUB_API_KEY\" || // Generic placeholder\n         key === \"d0uaoehr01qn5fk47mdgd0uaoehr01qn5fk47me0\" || // Original placeholder\n         key === \"d0uv0tpr01qmg3uj77qgd0uv0tpr01qmg3uj77r0\" || // Common dummy key 1\n         key === \"d0uvgepr01qmg3uj9ug0d0uvgepr01qmg3uj9ugg\" || // Common dummy key 2\n         key === \"d0vlu8hr01qkepd13dpgd0vlu8hr01qkepd13dq0\" || // Previous provided key\n         key === \"d108911r01qhkqr8ggb0d108911r01qhkqr8ggbg\"; // Your newly provided key (still free-tier likely)\n};\n\nconst CURRENCY_SYMBOL = \"$\"; // Changed to USD symbol for US market stocks\n\nfunction TradingDashboard({ user }) { // user prop comes from App.js\n  // Log the received user prop for debugging when component mounts or user changes\n  useEffect(() => {\n    console.log(\"TradingDashboard mounted or user prop changed. User:\", JSON.stringify(user, null, 2));\n  }, [user]);\n\n  const [trades, setTrades] = useState([]);\n  const [livePrices, setLivePrices] = useState({});\n  const [form, setForm] = useState({ symbol: \"\", quantity: \"\", type: \"buy\" });\n  const [capital, setCapital] = useState(() => {\n    // Ensure user and user.id exist before trying to access localStorage\n    const userId = user?.id;\n    if (userId) {\n      const saved = localStorage.getItem(\"capital_\" + userId);\n      return saved ? Number(saved) : 100000; // Default capital in USD ($100,000)\n    }\n    return 100000; // Default if no user.id (should ideally not happen if App.js guards this)\n  });\n  const [availableSymbols, setAvailableSymbols] = useState([]); // Stores list of supported US stock symbols\n  const [symbolError, setSymbolError] = useState(\"\"); // For displaying errors related to symbols/API key\n\n  // Effect to fetch the list of available US stock symbols from Finnhub\n  useEffect(() => {\n    const fetchAvailableSymbols = async () => {\n      if (isInvalidApiKey(FINNHUB_API_KEY)) {\n        console.error(\"Cannot fetch symbols: Invalid Finnhub API Key detected. Please provide a valid key.\");\n        setSymbolError(\n          \"Could not fetch available symbols. Please set a valid Finnhub API Key in the code.\"\n        );\n        setAvailableSymbols([]); // Clear any previous symbols\n        return;\n      }\n      try {\n        console.log(\"Fetching available US market symbols from Finnhub...\");\n        // Fetch symbols specifically for the US exchange\n        const res = await axios.get(\n          `https://finnhub.io/api/v1/stock/symbol?exchange=US&token=${FINNHUB_API_KEY}`\n        );\n        if (res.data && Array.isArray(res.data)) {\n          // Filter for common stocks and map to their display symbol\n          const symbols = res.data\n            .filter(\n              (s) =>\n                s.type === \"Common Stock\" &&\n                s.displaySymbol &&\n                s.symbol // Ensure symbol is also present\n            )\n            .map((s) => s.displaySymbol.toUpperCase()); // Convert to uppercase for consistency\n          setAvailableSymbols(symbols);\n          console.log(`Fetched ${symbols.length} US market symbols.`);\n          if (symbols.length === 0) {\n            setSymbolError(\"No US market symbols found. Check API key permissions or Finnhub US data coverage.\");\n          } else {\n            setSymbolError(\"\"); // Clear error if symbols are fetched\n          }\n        } else {\n          console.warn(\"No symbols returned or unexpected format from Finnhub for US market:\", res.data);\n          setSymbolError(\"Could not fetch symbols: No data or unexpected format from API for US market.\");\n          setAvailableSymbols([]);\n        }\n      } catch (err) {\n        console.error(\"Error fetching available US symbols:\", err.message, err.response?.data);\n        setSymbolError(\n          `Could not fetch available US symbols: ${err.message}. Check API key, network, and API limits.`\n        );\n        setAvailableSymbols([]);\n      }\n    };\n    fetchAvailableSymbols();\n  }, []); // Runs once on component mount\n\n  // Effect to fetch user's trade history from Supabase\n  useEffect(() => {\n    // Fetch trades only if user and user.id are valid and not a placeholder\n    if (user && user.id && typeof user.id === 'string' && user.id.includes('-') && !user.id.startsWith(\"dummy-user-id\")) {\n        fetchTrades();\n    } else if (user && user.id) {\n        console.warn(\"fetchTrades skipped: user.id might be invalid or a placeholder:\", user.id);\n    }\n  }, [user]); // Re-fetch trades when the user object changes\n\n  // Effect to fetch live prices for traded/entered symbols\n  useEffect(() => {\n    if (isInvalidApiKey(FINNHUB_API_KEY)) {\n      if (!symbolError.includes(\"API Key\")) { // Only update error if it's not already about API key\n        setSymbolError(\"Live price updates paused: Please set a valid Finnhub API Key.\");\n      }\n      return; // Stop execution if API key is invalid\n    }\n\n    // Combine symbols from existing trades and the current form input\n    const symbolsFromTrades = trades.map((t) => t.symbol.toUpperCase());\n    const symbolFromForm = form.symbol ? [form.symbol.toUpperCase()] : [];\n    \n    // Get unique symbols to fetch prices for\n    const uniqueSymbols = [...new Set([...symbolsFromTrades, ...symbolFromForm])];\n    const symbolsToFetch = uniqueSymbols.filter((s) => !!s); // Filter out empty strings\n\n    if (symbolsToFetch.length === 0) {\n        return; // No symbols to fetch, exit early\n    }\n    \n    const fetchPrices = async () => {\n      // console.log(\"Fetching prices for US symbols:\", symbolsToFetch); // Can be noisy for frequent updates\n      const currentPricesBatch = {};\n\n      for (const sym of symbolsToFetch) {\n        try {\n          const res = await axios.get(\n            `https://finnhub.io/api/v1/quote?symbol=${sym}&token=${FINNHUB_API_KEY}`\n          );\n          // Check if price (c) is a valid number and not zero (Finnhub often returns 0 for non-tradable/unsupported/rate-limited symbols)\n          if (res.data && typeof res.data.c === 'number' && res.data.c > 0) { \n            currentPricesBatch[sym] = res.data.c;\n          } else {\n            // Log a warning if price data is invalid/missing for a symbol\n            console.warn(`No valid price data for US symbol ${sym}. Finnhub response:`, res.data);\n          }\n        } catch (err) {\n          console.error(\"Error fetching price for US symbol\", sym, err.message);\n        }\n      }\n\n      // Update livePrices state if any valid prices were fetched in this batch\n      if (Object.keys(currentPricesBatch).length > 0) {\n        setLivePrices((prevPrices) => ({ ...prevPrices, ...currentPricesBatch }));\n      }\n    };\n\n    fetchPrices(); // Fetch prices immediately on effect run\n    // Set up interval for subsequent price fetches (e.g., every 15 seconds)\n    const interval = setInterval(fetchPrices, 15000); \n    return () => clearInterval(interval); // Clean up interval on component unmount or dependencies change\n  }, [trades, form.symbol, FINNHUB_API_KEY, symbolError]); // Dependencies for price fetching\n\n  // Effect to save capital to localStorage whenever it changes\n  useEffect(() => {\n    // Save capital to localStorage only if user and user.id are valid\n    if (user && user.id && typeof user.id === 'string' && user.id.includes('-') && !user.id.startsWith(\"dummy-user-id\")) {\n        localStorage.setItem(\"capital_\" + user.id, capital.toString());\n    }\n  }, [capital, user]); // Capital and user are dependencies\n\n  // Function to fetch trades for the current user from Supabase\n  const fetchTrades = async () => {\n    const { data, error } = await supabase\n      .from(\"trades\")\n      .select(\"*\")\n      .eq(\"user_id\", user.id) // Filter trades by the current user's ID\n      .order(\"created_at\", { ascending: true }); // Order by creation time\n\n    if (!error) setTrades(data);\n    else console.error(\"Error fetching trades:\", error.message);\n  };\n\n  // Handles input changes for the symbol and quantity form fields\n  const handleChange = (e) => {\n    let value = e.target.value.toUpperCase();\n    // Allow only alphanumeric characters for the symbol\n    if (e.target.name === \"symbol\") {\n      value = value.replace(/[^A-Z0-9]/g, ''); \n    }\n    setForm({ ...form, [e.target.name]: value });\n  };\n\n  // Centralized function to validate and execute either a buy or sell trade\n  const validateAndExecuteTrade = async (type) => {\n    // **Explicit check for valid user and user.id at the start of trade execution**\n    if (!user || !user.id || typeof user.id !== 'string' || !user.id.includes('-') || user.id.startsWith(\"dummy-user-id\")) {\n      alert(\"User Authentication Error: Cannot execute trade without a valid user session. Please ensure you are logged in correctly.\");\n      console.error(\"Trade rejected: Invalid user object or user ID. User ID:\", user ? user.id : \"N/A\");\n      return;\n    }\n    console.log(`Attempting ${type} trade for user_id: ${user.id} with symbol: ${form.symbol}`); // Log before execution\n\n    if (isInvalidApiKey(FINNHUB_API_KEY)) {\n      alert(\"Trading disabled: Invalid Finnhub API Key. Please update it in the code.\");\n      return;\n    }\n\n    const sym = form.symbol.toUpperCase(); \n    const qty = Number(form.quantity);\n\n    if (!sym || !qty || qty <= 0) {\n      alert(\"Invalid input: Symbol and positive quantity are required.\");\n      return;\n    }\n\n    // Validate symbol against the fetched list of available symbols (if the list is populated)\n    if (availableSymbols.length > 0 && !availableSymbols.includes(sym)) {\n      alert(\n        `Symbol '${sym}' is not in the recognized list of US stocks. ` +\n        `Please select from suggestions or ensure it's a valid US ticker.`\n      );\n      setSymbolError(`Symbol '${sym}' not found in available US stock list. Is your API key providing full coverage?`);\n      return;\n    }\n    \n    const price = livePrices[sym];\n    // Check if the price is a valid positive number\n    if (typeof price !== 'number' || price <= 0) { \n      alert(\n        `Live price for '${sym}' is currently unavailable or invalid. ` +\n        `Ensure the symbol is a correct US ticker, actively traded, and your API key is working. Try again shortly.`\n      );\n      setSymbolError(`No valid live price for '${sym}'. Check US ticker, API data availability, or API key.`);\n      return;\n    }\n\n    // Prepare the trade object with the (now hopefully valid) user.id\n    const trade = { user_id: user.id, symbol: sym, quantity: qty, price, type };\n\n    if (type === \"buy\") {\n      const cost = qty * price;\n      if (cost > capital) {\n        alert(\"Not enough capital to perform this buy trade.\");\n        return;\n      }\n      // Optimistically update capital (will be reverted if database insert fails)\n      setCapital((c) => c - cost); \n    } else { // type === \"sell\"\n      const pnlSummary = calculatePnL(trades); // Re-calculate P&L summary based on current trades\n      const heldStock = pnlSummary.find(s => s.symbol === sym);\n      // Check if the user holds enough quantity to sell\n      if (!heldStock || heldStock.netQty < qty) {\n          alert(`You only hold ${heldStock ? heldStock.netQty : 0} of ${sym}. Cannot sell ${qty}.`);\n          return;\n      }\n      // Optimistically update capital (will be reverted if database insert fails)\n      setCapital((c) => c + qty * price);\n    }\n\n    // Insert the trade into Supabase\n    const { error } = await supabase.from(\"trades\").insert([trade]);\n\n    if (error) {\n      alert(\"Error executing trade with database: \" + error.message);\n      // Revert optimistic capital update if database insert fails\n      if (type === \"buy\") {\n        setCapital((c) => c + (qty * price)); // Add back the cost if buy failed\n      } else { // Sell\n        setCapital((c) => c - (qty * price)); // Subtract back the proceeds if sell failed\n      }\n      return;\n    }\n\n    setForm({ ...form, quantity: \"\" }); // Clear quantity after successful trade\n    fetchTrades(); // Refresh trades list to show the new trade\n    setSymbolError(\"\"); // Clear any previous symbol-related errors\n  };\n\n  const handleBuy = () => validateAndExecuteTrade(\"buy\");\n  const handleSell = () => validateAndExecuteTrade(\"sell\");\n\n  // Handles user logout\n  const handleLogout = async () => {\n    if (!user || !user.id) return; // Should ideally not be called if user is not present\n    console.log(\"Logging out user:\", user.id);\n    const { error } = await supabase.auth.signOut();\n    if (error) {\n        console.error(\"Error logging out:\", error.message);\n        alert(\"Logout failed: \" + error.message);\n    } else {\n        // App.js's onAuthStateChange listener will detect the SIGNED_OUT event\n        // and handle the UI update (e.g., redirect to login page).\n        console.log(\"User successfully logged out.\");\n    }\n  };\n\n  // Calculates Profit & Loss and net quantity for each symbol\n  const calculatePnL = (currentTrades) => {\n    const summary = {};\n    currentTrades.forEach(({ symbol, quantity, price, type }) => {\n      const s = symbol.toUpperCase();\n      if (!summary[s]) {\n        summary[s] = { buyQty: 0, buyTotal: 0, sellQty: 0, sellTotal: 0, netQty: 0 };\n      }\n      const q = Number(quantity);\n      const p = Number(price);\n\n      if (type === \"buy\") {\n        summary[s].buyQty += q;\n        summary[s].buyTotal += q * p;\n        summary[s].netQty += q; // Increase net quantity on buy\n      } else { // type === \"sell\"\n        summary[s].sellQty += q;\n        summary[s].sellTotal += q * p;\n        summary[s].netQty -= q; // Decrease net quantity on sell\n      }\n    });\n\n    return Object.entries(summary).map(([symbol, data]) => {\n      const avgBuy = data.buyQty > 0 ? data.buyTotal / data.buyQty : 0;\n      // Calculate realized profit from sold shares\n      const costOfSoldShares = avgBuy * data.sellQty;\n      const profit = data.sellTotal - costOfSoldShares;\n\n      return {\n        symbol,\n        netQty: data.netQty, // Current quantity held\n        avgBuyPrice: avgBuy.toFixed(2),\n        profit: profit.toFixed(2), // Realized profit/loss\n      };\n    });\n  };\n\n  const pnlData = calculatePnL(trades); // Get current P&L data\n\n  return (\n    <div style={{ padding: \"1rem 2rem\", fontFamily: \"Arial\", maxWidth: 900, margin: \"auto\", backgroundColor: '#f9f9f9', borderRadius: '8px', boxShadow: '0 2px 10px rgba(0,0,0,0.05)' }}>\n      <h1 style={{ textAlign: 'center', color: '#333' }}>📈 Paper Trading Dashboard (US Market)</h1>\n      { user && user.email && <p style={{ textAlign: 'center', color: '#555', marginBottom: '1rem' }}>Logged in as: {user.email} (ID: {user.id})</p> } \n      <p style={{ fontSize: '1.2rem', fontWeight: 'bold', textAlign: 'center', color: '#007bff' }}>Capital: {CURRENCY_SYMBOL}{capital.toFixed(2)}</p>\n      \n      {user && (\n        <div style={{ textAlign: 'center', marginBottom: '1.5rem' }}>\n          <button onClick={handleLogout} style={{ padding: '10px 20px', backgroundColor: '#dc3545', color: 'white', border: 'none', borderRadius: '5px', cursor: 'pointer', fontSize: '1rem', transition: 'background-color 0.2s' }}>\n            Logout\n          </button>\n        </div>\n      )}\n\n      {isInvalidApiKey(FINNHUB_API_KEY) && (\n        <p style={{ color: \"red\", fontWeight: \"bold\", border: \"1px solid red\", padding: \"0.8rem\", margin: \"1.5rem 0\", backgroundColor: '#ffe6e6', borderRadius: '5px' }}>\n          ⚠️ WARNING: A valid Finnhub API Key is not set in `TradingDashboard.js` or your current key is a free-tier key. \n          Symbol list loading, live prices, and full trading functionality may not work correctly or may be severely limited.\n          Please consider upgrading your Finnhub plan for broader access.\n        </p>\n      )}\n\n      <form style={{ marginBottom: \"2rem\", display: \"flex\", gap: \"0.8rem\", flexWrap: \"wrap\", alignItems: \"center\", border: '1px solid #eee', padding: '1.5rem', borderRadius: '8px', backgroundColor: '#fff' }}>\n        <input\n          name=\"symbol\"\n          placeholder=\"Symbol (e.g., AAPL, MSFT)\"\n          value={form.symbol}\n          onChange={handleChange}\n          required\n          style={{ flex: '1 1 180px', minWidth: '150px', padding: \"10px\", border: \"1px solid #ddd\", borderRadius: \"5px\", fontSize: \"1rem\", textTransform: \"uppercase\" }}\n          list=\"symbols-list\"\n          title=\"Enter US stock symbol, e.g., AAPL, MSFT\"\n        />\n        <datalist id=\"symbols-list\">\n            {availableSymbols.map((sym) => (\n                <option key={sym} value={sym} />\n            ))}\n        </datalist>\n\n        <input\n          name=\"quantity\"\n          type=\"number\"\n          placeholder=\"Quantity\"\n          value={form.quantity}\n          onChange={(e) => setForm({ ...form, quantity: e.target.value })}\n          required\n          min=\"1\"\n          style={{ flex: '0 0 100px', minWidth: '80px', padding: \"10px\", border: \"1px solid #ddd\", borderRadius: \"5px\", fontSize: \"1rem\" }}\n        />\n        <button type=\"button\" onClick={handleBuy} style={{ flex: '0 0 80px', padding: \"10px 15px\", backgroundColor: \"#28a745\", color: \"white\", border: \"none\", cursor: \"pointer\", borderRadius: \"5px\", fontSize: \"1rem\", fontWeight: \"bold\", transition: 'background-color 0.2s' }}>Buy</button>\n        <button type=\"button\" onClick={handleSell} style={{ flex: '0 0 80px', padding: \"10px 15px\", backgroundColor: \"#dc3545\", color: \"white\", border: \"none\", cursor: \"pointer\", borderRadius: \"5px\", fontSize: \"1rem\", fontWeight: \"bold\", transition: 'background-color 0.2s' }}>Sell</button>\n      </form>\n\n      {symbolError && <p style={{ color: \"red\", marginTop: \"0.5rem\", padding: \"0.8rem\", border: \"1px dashed red\", backgroundColor: '#ffe6e6', borderRadius: '5px' }}>⚠️ {symbolError}</p>}\n\n      <h2 style={{ color: '#333', marginTop: '2rem', marginBottom: '1rem' }}>Live Prices (US Stocks)</h2>\n      {Object.keys(livePrices).filter(sym => livePrices[sym] !== null && typeof livePrices[sym] === 'number' && livePrices[sym] > 0).length > 0 ? (\n        <ul style={{ listStyleType: \"none\", paddingLeft: 0, columns: 2, columnGap: \"20px\", border: '1px solid #eee', padding: '1.5rem', borderRadius: '8px', backgroundColor: '#fff' }}>\n          {Object.entries(livePrices).map(([sym, price]) =>\n             (price !== null && typeof price === 'number' && price > 0) ? ( \n              <li key={sym} style={{ padding: \"0.5rem 0\", borderBottom: \"1px solid #eee\", display: 'flex', justifyContent: 'space-between' }}>\n                <span style={{fontWeight: 'bold'}}>{sym}</span>: <span>{CURRENCY_SYMBOL}{price.toFixed(2)}</span>\n              </li>\n            ) : null\n          )}\n        </ul>\n      ) : (\n        <p style={{ color: '#666', border: '1px dashed #ccc', padding: '1rem', borderRadius: '5px', backgroundColor: '#fff' }}>No live prices for US stocks currently displayed. Ensure your API key is valid and type a valid US ticker (e.g. AAPL).</p>\n      )}\n\n      <h2 style={{ color: '#333', marginTop: '2rem', marginBottom: '1rem' }}>Trade History</h2>\n      {trades.length > 0 ? (\n        <table style={{ width: \"100%\", borderCollapse: \"collapse\", marginBottom: \"2rem\", border: '1px solid #ddd', borderRadius: '8px', overflow: 'hidden' }}>\n          <thead style={{backgroundColor: \"#eef\", color: '#333'}}>\n            <tr>\n              <th style={{ padding: '12px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>Symbol</th>\n              <th style={{ padding: '12px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>Qty</th>\n              <th style={{ padding: '12px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>Price</th>\n              <th style={{ padding: '12px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>Type</th>\n              <th style={{ padding: '12px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>Time</th>\n            </tr>\n          </thead>\n          <tbody>\n            {trades.map((t) => (\n              <tr key={t.id} style={{ backgroundColor: t.type === 'buy' ? '#e6ffe6' : '#ffe6e6' }}>\n                <td style={{ padding: '12px', borderBottom: '1px solid #eee' }}>{t.symbol}</td>\n                <td style={{ padding: '12px', borderBottom: '1px solid #eee' }}>{t.quantity}</td>\n                <td style={{ padding: '12px', borderBottom: '1px solid #eee' }}>{CURRENCY_SYMBOL}{Number(t.price).toFixed(2)}</td>\n                <td style={{ padding: '12px', borderBottom: '1px solid #eee', color: t.type === \"buy\" ? \"green\" : \"red\", textTransform: \"capitalize\", fontWeight: 'bold'}}>{t.type}</td>\n                <td style={{ padding: '12px', borderBottom: '1px solid #eee', fontSize: '0.9em', color: '#666'}}>{new Date(t.created_at).toLocaleString()}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (<p style={{ color: '#666', border: '1px dashed #ccc', padding: '1rem', borderRadius: '5px', backgroundColor: '#fff' }}>No trades made yet.</p>)}\n\n      <h2 style={{ color: '#333', marginTop: '2rem', marginBottom: '1rem' }}>Holdings & Profit/Loss (Realized)</h2>\n      {pnlData.length > 0 ? ( \n        <table style={{ width: \"100%\", borderCollapse: \"collapse\", marginBottom: \"2rem\", border: '1px solid #ddd', borderRadius: '8px', overflow: 'hidden' }}>\n          <thead style={{backgroundColor: \"#eef\", color: '#333'}}>\n            <tr>\n              <th style={{ padding: '12px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>Symbol</th>\n              <th style={{ padding: '12px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>Net Qty Held</th>\n              <th style={{ padding: '12px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>Avg. Buy Price</th>\n              <th style={{ padding: '12px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>Realized P&L</th>\n            </tr>\n          </thead>\n          <tbody>\n            {pnlData.map((row) => (\n              <tr key={row.symbol} style={{ backgroundColor: parseFloat(row.profit) >= 0 ? '#e6ffe6' : '#ffe6e6' }}>\n                <td style={{ padding: '12px', borderBottom: '1px solid #eee' }}>{row.symbol}</td>\n                <td style={{ padding: '12px', borderBottom: '1px solid #eee' }}>{row.netQty}</td>\n                <td style={{ padding: '12px', borderBottom: '1px solid #eee' }}>{CURRENCY_SYMBOL}{row.avgBuyPrice}</td>\n                <td style={{ padding: '12px', borderBottom: '1px solid #eee', color: parseFloat(row.profit) >= 0 ? \"green\" : \"red\", fontWeight: 'bold' }}>{CURRENCY_SYMBOL}{row.profit}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (<p style={{ color: '#666', border: '1px dashed #ccc', padding: '1rem', borderRadius: '5px', backgroundColor: '#fff' }}>No current holdings or realized P&L to display.</p>)}\n\n      <h2 style={{ color: '#333', marginTop: '2rem', marginBottom: '1rem' }}>P&L Chart (Realized)</h2>\n      {pnlData.filter(p => parseFloat(p.profit) !== 0).length > 0 ? (\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <BarChart data={pnlData.filter(p => parseFloat(p.profit) !== 0)} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}> \n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"symbol\" />\n            <YAxis tickFormatter={(value) => `${CURRENCY_SYMBOL}${value}`}/>\n            <Tooltip \n              formatter={(value) => [`${CURRENCY_SYMBOL}${Number(value).toFixed(2)}`, 'Realized P&L']}\n              labelFormatter={(label) => `Symbol: ${label}`}\n            />\n            <Legend />\n            <Bar dataKey=\"profit\" name=\"Realized P&L\">\n              {pnlData.filter(p => parseFloat(p.profit) !== 0).map((entry, index) => (\n                <Cell key={`cell-${index}`} fill={parseFloat(entry.profit) >= 0 ? \"#4caf50\" : \"#f44336\"} />\n              ))}\n            </Bar>\n          </BarChart>\n        </ResponsiveContainer>\n      ) : (<p style={{ color: '#666', border: '1px dashed #ccc', padding: '1rem', borderRadius: '5px', backgroundColor: '#fff' }}>No realized P&L to chart.</p>)}\n    </div>\n  );\n}\n\nexport default TradingDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}