{"ast":null,"code":"var _jsxFileName = \"/Users/aryansrivastava/projects/Paper-Trading-Portal/src/TradingDataContext.js\",\n  _s = $RefreshSig$();\n// src/components/StockChart.js\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport Chart from 'react-apexcharts';\nimport { ALPHA_VANTAGE_API_KEY, isInvalidApiKey, CURRENCY_SYMBOL } from '../TradingDataContext';\n\n// Define options for the chart (MODIFIED FOR NO DARK BACKGROUND)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultChartOptions = {\n  chart: {\n    type: 'candlestick',\n    height: 350,\n    // background: '#1a1a1a', // REMOVED: Dark background\n    foreColor: '#333333',\n    // CHANGED: Dark text color for labels, titles etc. to be visible on light background\n    toolbar: {\n      show: true,\n      tools: {\n        download: true,\n        selection: true,\n        zoom: true,\n        zoomin: true,\n        zoomout: true,\n        pan: true,\n        reset: true\n      },\n      autoSelected: 'zoom' // Default selected tool\n    }\n  },\n  title: {\n    text: 'Candlestick Chart',\n    align: 'left',\n    style: {\n      color: '#333333' // CHANGED: Ensure title is dark\n    }\n  },\n  xaxis: {\n    type: 'datetime',\n    labels: {\n      formatter: function (val) {\n        return new Date(val).toLocaleDateString('en-US', {\n          month: 'short',\n          day: 'numeric',\n          year: 'numeric'\n        });\n      },\n      style: {\n        colors: '#555555' // CHANGED: Darker gray for x-axis labels to be visible on light background\n      }\n    },\n    axisBorder: {\n      show: false\n    },\n    axisTicks: {\n      show: false\n    }\n  },\n  yaxis: {\n    tooltip: {\n      enabled: true\n    },\n    labels: {\n      formatter: value => `${CURRENCY_SYMBOL}${value ? value.toFixed(2) : ''}`,\n      style: {\n        colors: '#555555' // CHANGED: Darker gray for y-axis labels to be visible on light background\n      }\n    },\n    axisBorder: {\n      show: false\n    },\n    axisTicks: {\n      show: false\n    }\n  },\n  grid: {\n    show: true,\n    borderColor: '#e0e0e0',\n    // CHANGED: Lighter color for subtle grid lines on a light background\n    strokeDashArray: 2,\n    position: 'back',\n    xaxis: {\n      lines: {\n        show: false\n      }\n    },\n    yaxis: {\n      lines: {\n        show: true\n      }\n    },\n    padding: {\n      right: 20,\n      left: 5\n    }\n  },\n  plotOptions: {\n    candlestick: {\n      colors: {\n        up: '#00B746',\n        // Green for up candles\n        down: '#EF403C' // Red for down candles\n      }\n    }\n  },\n  tooltip: {\n    theme: 'light',\n    // CHANGED: Light tooltip for better contrast on a lighter background\n    x: {\n      format: 'dd MMM不堪'\n    },\n    y: {\n      formatter: function (val) {\n        return `${CURRENCY_SYMBOL}${val ? val.toFixed(2) : ''}`;\n      }\n    }\n  }\n};\nfunction StockChart({\n  symbol\n}) {\n  _s();\n  var _series$;\n  const [series, setSeries] = useState([{\n    data: []\n  }]);\n  const [loading, setLoading] = useState(true);\n  const [chartError, setChartError] = useState(null);\n  const [chartOptions, setChartOptions] = useState(defaultChartOptions);\n  const [timeframe, setTimeframe] = useState('6m');\n  const fetchHistoricalData = useCallback(async (stockSymbol, selectedTimeframe) => {\n    if (!stockSymbol || isInvalidApiKey(ALPHA_VANTAGE_API_KEY)) {\n      setChartError(\"Invalid symbol or Alpha Vantage API Key. Please ensure it's correct and active.\");\n      setLoading(false);\n      setSeries([{\n        data: []\n      }]);\n      return;\n    }\n    setLoading(true);\n    setChartError(null);\n    setSeries([{\n      data: []\n    }]);\n    let outputSize = 'compact';\n    let daysToFilter = 0;\n    let chartTitlePeriod = \"\";\n    switch (selectedTimeframe) {\n      case '5d':\n        daysToFilter = 5;\n        chartTitlePeriod = \"Last 5 Days\";\n        break;\n      case '1m':\n        daysToFilter = 30;\n        chartTitlePeriod = \"Last 1 Month\";\n        break;\n      case '6m':\n        daysToFilter = 180;\n        chartTitlePeriod = \"Last 6 Months\";\n        break;\n      case 'ytd':\n        outputSize = 'full';\n        chartTitlePeriod = \"Year-to-Date\";\n        break;\n      case '3y':\n        outputSize = 'full';\n        daysToFilter = 3 * 365;\n        chartTitlePeriod = \"Last 3 Years\";\n        break;\n      case 'max':\n        outputSize = 'full';\n        chartTitlePeriod = \"Max Available\";\n        break;\n      default:\n        daysToFilter = 100;\n        chartTitlePeriod = \"Recent Data\";\n    }\n    try {\n      const response = await axios.get(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${stockSymbol}&outputsize=${outputSize}&apikey=${ALPHA_VANTAGE_API_KEY}`);\n      if (response.data[\"Error Message\"]) {\n        setChartError(`Alpha Vantage API Error: ${response.data[\"Error Message\"]}. Check your symbol and API key. You might have hit the free tier rate limit (5 calls/minute, 500 calls/day).`);\n        setSeries([{\n          data: []\n        }]);\n        return;\n      }\n      if (response.data[\"Note\"]) {\n        setChartError(`Alpha Vantage API Note: ${response.data[\"Note\"]}. You've likely hit the free tier rate limit (5 calls/minute, 500 calls/day) or requested 'full' data which is often restricted on free tier.`);\n        setSeries([{\n          data: []\n        }]);\n        return;\n      }\n      const timeSeries = response.data['Time Series (Daily)'];\n      if (!timeSeries || Object.keys(timeSeries).length === 0) {\n        setChartError(`No historical (daily) data found for ${stockSymbol} from Alpha Vantage for the ${chartTitlePeriod} period. This could be due to an invalid symbol or data not being available.`);\n        setSeries([{\n          data: []\n        }]);\n        return;\n      }\n      let formattedData = Object.keys(timeSeries).sort((a, b) => new Date(a) - new Date(b)).map(date => ({\n        x: new Date(date),\n        y: [parseFloat(timeSeries[date]['1. open']), parseFloat(timeSeries[date]['2. high']), parseFloat(timeSeries[date]['3. low']), parseFloat(timeSeries[date]['4. close'])]\n      }));\n      const now = new Date();\n      let startDateFilter = null;\n      if (selectedTimeframe === 'ytd') {\n        startDateFilter = new Date(now.getFullYear(), 0, 1);\n      } else if (daysToFilter > 0) {\n        if (formattedData.length > daysToFilter) {\n          formattedData = formattedData.slice(-daysToFilter);\n        }\n      }\n      if (startDateFilter) {\n        formattedData = formattedData.filter(item => item.x >= startDateFilter);\n      }\n      setSeries([{\n        data: formattedData\n      }]);\n      setChartOptions(prevOptions => ({\n        ...prevOptions,\n        title: {\n          text: `${stockSymbol} Candlestick Chart (${chartTitlePeriod} - Data from Alpha Vantage)`\n        }\n      }));\n    } catch (err) {\n      console.error(\"Error fetching historical data from Alpha Vantage:\", err);\n      setChartError(`Failed to load chart for ${stockSymbol} from Alpha Vantage. Please verify your API key and check your internet connection.`);\n      setSeries([{\n        data: []\n      }]);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  useEffect(() => {\n    fetchHistoricalData(symbol, timeframe);\n  }, [symbol, timeframe, fetchHistoricalData]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading chart data from Alpha Vantage...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }, this);\n  }\n  if (chartError) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"message error-message\",\n      children: chartError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 16\n    }, this);\n  }\n  if (((_series$ = series[0]) === null || _series$ === void 0 ? void 0 : _series$.data.length) === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"message info-message\",\n      children: [\"No chart data available for \", symbol, \" from Alpha Vantage for the requested period. This is likely due to API limitations or the symbol not having data.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stock-chart-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timeframe-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setTimeframe('5d'),\n        className: timeframe === '5d' ? 'active' : '',\n        children: \"5D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setTimeframe('1m'),\n        className: timeframe === '1m' ? 'active' : '',\n        children: \"1M\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setTimeframe('6m'),\n        className: timeframe === '6m' ? 'active' : '',\n        children: \"6M\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setTimeframe('ytd'),\n        className: timeframe === 'ytd' ? 'active' : '',\n        children: \"YTD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setTimeframe('3y'),\n        className: timeframe === '3y' ? 'active' : '',\n        children: \"3Y\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setTimeframe('max'),\n        className: timeframe === 'max' ? 'active' : '',\n        children: \"Max\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      options: chartOptions,\n      series: series,\n      type: \"candlestick\",\n      height: 350\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 252,\n    columnNumber: 9\n  }, this);\n}\n_s(StockChart, \"sXmOR584hT6fsEj9AE4gnakHsJI=\");\n_c = StockChart;\nexport default StockChart;\nvar _c;\n$RefreshReg$(_c, \"StockChart\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","axios","Chart","ALPHA_VANTAGE_API_KEY","isInvalidApiKey","CURRENCY_SYMBOL","jsxDEV","_jsxDEV","defaultChartOptions","chart","type","height","foreColor","toolbar","show","tools","download","selection","zoom","zoomin","zoomout","pan","reset","autoSelected","title","text","align","style","color","xaxis","labels","formatter","val","Date","toLocaleDateString","month","day","year","colors","axisBorder","axisTicks","yaxis","tooltip","enabled","value","toFixed","grid","borderColor","strokeDashArray","position","lines","padding","right","left","plotOptions","candlestick","up","down","theme","x","format","y","StockChart","symbol","_s","_series$","series","setSeries","data","loading","setLoading","chartError","setChartError","chartOptions","setChartOptions","timeframe","setTimeframe","fetchHistoricalData","stockSymbol","selectedTimeframe","outputSize","daysToFilter","chartTitlePeriod","response","get","timeSeries","Object","keys","length","formattedData","sort","a","b","map","date","parseFloat","now","startDateFilter","getFullYear","slice","filter","item","prevOptions","err","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","options","_c","$RefreshReg$"],"sources":["/Users/aryansrivastava/projects/Paper-Trading-Portal/src/TradingDataContext.js"],"sourcesContent":["// src/components/StockChart.js\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport Chart from 'react-apexcharts';\nimport { ALPHA_VANTAGE_API_KEY, isInvalidApiKey, CURRENCY_SYMBOL } from '../TradingDataContext'; \n\n// Define options for the chart (MODIFIED FOR NO DARK BACKGROUND)\nconst defaultChartOptions = {\n    chart: {\n        type: 'candlestick',\n        height: 350,\n        // background: '#1a1a1a', // REMOVED: Dark background\n        foreColor: '#333333',  // CHANGED: Dark text color for labels, titles etc. to be visible on light background\n        toolbar: {\n            show: true,\n            tools: {\n                download: true,\n                selection: true,\n                zoom: true,\n                zoomin: true,\n                zoomout: true,\n                pan: true,\n                reset: true,\n            },\n            autoSelected: 'zoom' // Default selected tool\n        },\n    },\n    title: {\n        text: 'Candlestick Chart',\n        align: 'left',\n        style: {\n            color: '#333333' // CHANGED: Ensure title is dark\n        }\n    },\n    xaxis: {\n        type: 'datetime',\n        labels: {\n            formatter: function(val) {\n                return new Date(val).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });\n            },\n            style: {\n                colors: '#555555', // CHANGED: Darker gray for x-axis labels to be visible on light background\n            }\n        },\n        axisBorder: {\n            show: false \n        },\n        axisTicks: {\n            show: false \n        }\n    },\n    yaxis: {\n        tooltip: {\n            enabled: true\n        },\n        labels: {\n            formatter: (value) => `${CURRENCY_SYMBOL}${value ? value.toFixed(2) : ''}`,\n            style: {\n                colors: '#555555', // CHANGED: Darker gray for y-axis labels to be visible on light background\n            }\n        },\n        axisBorder: {\n            show: false \n        },\n        axisTicks: {\n            show: false \n        }\n    },\n    grid: {\n        show: true, \n        borderColor: '#e0e0e0', // CHANGED: Lighter color for subtle grid lines on a light background\n        strokeDashArray: 2, \n        position: 'back',\n        xaxis: {\n            lines: {\n                show: false \n            }\n        },\n        yaxis: {\n            lines: {\n                show: true \n            }\n        },\n        padding: {\n            right: 20, \n            left: 5 \n        }\n    },\n    plotOptions: {\n        candlestick: {\n            colors: {\n                up: '#00B746', // Green for up candles\n                down: '#EF403C' // Red for down candles\n            }\n        }\n    },\n    tooltip: {\n        theme: 'light', // CHANGED: Light tooltip for better contrast on a lighter background\n        x: {\n            format: 'dd MMM不堪' \n        },\n        y: {\n            formatter: function(val) {\n                return `${CURRENCY_SYMBOL}${val ? val.toFixed(2) : ''}`;\n            }\n        }\n    }\n};\n\nfunction StockChart({ symbol }) {\n    const [series, setSeries] = useState([{ data: [] }]);\n    const [loading, setLoading] = useState(true);\n    const [chartError, setChartError] = useState(null);\n    const [chartOptions, setChartOptions] = useState(defaultChartOptions);\n    const [timeframe, setTimeframe] = useState('6m'); \n\n    const fetchHistoricalData = useCallback(async (stockSymbol, selectedTimeframe) => {\n        if (!stockSymbol || isInvalidApiKey(ALPHA_VANTAGE_API_KEY)) {\n            setChartError(\"Invalid symbol or Alpha Vantage API Key. Please ensure it's correct and active.\");\n            setLoading(false);\n            setSeries([{ data: [] }]);\n            return;\n        }\n\n        setLoading(true);\n        setChartError(null);\n        setSeries([{ data: [] }]); \n\n        let outputSize = 'compact'; \n        let daysToFilter = 0;\n        let chartTitlePeriod = \"\";\n\n        switch (selectedTimeframe) {\n            case '5d':\n                daysToFilter = 5;\n                chartTitlePeriod = \"Last 5 Days\";\n                break;\n            case '1m': \n                daysToFilter = 30; \n                chartTitlePeriod = \"Last 1 Month\";\n                break;\n            case '6m':\n                daysToFilter = 180; \n                chartTitlePeriod = \"Last 6 Months\";\n                break;\n            case 'ytd': \n                outputSize = 'full'; \n                chartTitlePeriod = \"Year-to-Date\";\n                break;\n            case '3y': \n                outputSize = 'full'; \n                daysToFilter = 3 * 365; \n                chartTitlePeriod = \"Last 3 Years\";\n                break;\n            case 'max': \n                outputSize = 'full';\n                chartTitlePeriod = \"Max Available\";\n                break;\n            default:\n                daysToFilter = 100; \n                chartTitlePeriod = \"Recent Data\";\n        }\n\n        try {\n            const response = await axios.get(\n                `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${stockSymbol}&outputsize=${outputSize}&apikey=${ALPHA_VANTAGE_API_KEY}`\n            );\n\n            if (response.data[\"Error Message\"]) {\n                setChartError(`Alpha Vantage API Error: ${response.data[\"Error Message\"]}. Check your symbol and API key. You might have hit the free tier rate limit (5 calls/minute, 500 calls/day).`);\n                setSeries([{ data: [] }]);\n                return;\n            }\n            if (response.data[\"Note\"]) {\n                 setChartError(`Alpha Vantage API Note: ${response.data[\"Note\"]}. You've likely hit the free tier rate limit (5 calls/minute, 500 calls/day) or requested 'full' data which is often restricted on free tier.`);\n                 setSeries([{ data: [] }]);\n                 return;\n            }\n\n            const timeSeries = response.data['Time Series (Daily)'];\n\n            if (!timeSeries || Object.keys(timeSeries).length === 0) {\n                setChartError(`No historical (daily) data found for ${stockSymbol} from Alpha Vantage for the ${chartTitlePeriod} period. This could be due to an invalid symbol or data not being available.`);\n                setSeries([{ data: [] }]);\n                return;\n            }\n\n            let formattedData = Object.keys(timeSeries)\n                .sort((a, b) => new Date(a) - new Date(b)) \n                .map(date => ({\n                    x: new Date(date), \n                    y: [\n                        parseFloat(timeSeries[date]['1. open']),\n                        parseFloat(timeSeries[date]['2. high']),\n                        parseFloat(timeSeries[date]['3. low']),\n                        parseFloat(timeSeries[date]['4. close'])\n                    ]\n                }));\n            \n            const now = new Date();\n            let startDateFilter = null;\n\n            if (selectedTimeframe === 'ytd') {\n                startDateFilter = new Date(now.getFullYear(), 0, 1); \n            } else if (daysToFilter > 0) {\n                if (formattedData.length > daysToFilter) {\n                    formattedData = formattedData.slice(-daysToFilter);\n                }\n            }\n            \n            if (startDateFilter) {\n                formattedData = formattedData.filter(item => item.x >= startDateFilter);\n            }\n\n            setSeries([{ data: formattedData }]);\n            setChartOptions(prevOptions => ({\n                ...prevOptions,\n                title: { text: `${stockSymbol} Candlestick Chart (${chartTitlePeriod} - Data from Alpha Vantage)` }\n            }));\n\n        } catch (err) {\n            console.error(\"Error fetching historical data from Alpha Vantage:\", err);\n            setChartError(`Failed to load chart for ${stockSymbol} from Alpha Vantage. Please verify your API key and check your internet connection.`);\n            setSeries([{ data: [] }]);\n        } finally {\n            setLoading(false);\n        }\n    }, []);\n\n    useEffect(() => {\n        fetchHistoricalData(symbol, timeframe);\n    }, [symbol, timeframe, fetchHistoricalData]); \n\n    if (loading) {\n        return (\n            <div className=\"chart-loading\">\n                <div className=\"spinner\"></div>\n                <p>Loading chart data from Alpha Vantage...</p>\n            </div>\n        );\n    }\n\n    if (chartError) {\n        return <p className=\"message error-message\">{chartError}</p>;\n    }\n\n    if (series[0]?.data.length === 0) {\n        return <p className=\"message info-message\">No chart data available for {symbol} from Alpha Vantage for the requested period. This is likely due to API limitations or the symbol not having data.</p>;\n    }\n\n    return (\n        <div className=\"stock-chart-wrapper\">\n            <div className=\"timeframe-buttons\">\n                <button \n                    onClick={() => setTimeframe('5d')} \n                    className={timeframe === '5d' ? 'active' : ''}\n                >\n                    5D\n                </button>\n                <button \n                    onClick={() => setTimeframe('1m')} \n                    className={timeframe === '1m' ? 'active' : ''}\n                >\n                    1M\n                </button>\n                <button \n                    onClick={() => setTimeframe('6m')} \n                    className={timeframe === '6m' ? 'active' : ''}\n                >\n                    6M\n                </button>\n                <button \n                    onClick={() => setTimeframe('ytd')} \n                    className={timeframe === 'ytd' ? 'active' : ''}\n                >\n                    YTD\n                </button>\n                <button \n                    onClick={() => setTimeframe('3y')} \n                    className={timeframe === '3y' ? 'active' : ''}\n                >\n                    3Y\n                </button>\n                <button \n                    onClick={() => setTimeframe('max')} \n                    className={timeframe === 'max' ? 'active' : ''}\n                >\n                    Max\n                </button>\n            </div>\n            <Chart\n                options={chartOptions}\n                series={series}\n                type=\"candlestick\"\n                height={350}\n            />\n        </div>\n    );\n}\n\nexport default StockChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}