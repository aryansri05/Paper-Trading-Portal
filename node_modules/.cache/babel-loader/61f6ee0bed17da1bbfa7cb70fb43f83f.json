{"ast":null,"code":"var _jsxFileName = \"/Users/aryansrivastava/projects/paper-trading-app/src/TradingDashboard.js\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { supabase } from \"./supabaseClient\"; // Ensure this path is correct\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from \"recharts\";\n\n// IMPORTANT: Replace with your actual Finnhub API Key from finnhub.io\nconst FINNHUB_API_KEY = \"d0uv0tpr01qmg3uj77qgd0uv0tpr01qmg3uj77r0\"; // <--- REPLACE THIS!!!\n\n// Helper to check for placeholder or dummy API keys\nconst isInvalidApiKey = key => {\n  return !key || key === \"YOUR_FINNHUB_API_KEY\" || key === \"d0uv0tpr01qmg3uj77qgd0uv0tpr01qmg3uj77r0\";\n};\nconst CURRENCY_SYMBOL = \"$\";\nfunction TradingDashboard({\n  user\n}) {\n  const [trades, setTrades] = useState([]);\n  const [livePrices, setLivePrices] = useState({});\n  const [form, setForm] = useState({\n    symbol: \"\",\n    quantity: \"\",\n    type: \"buy\"\n  });\n  const [capital, setCapital] = useState(() => {\n    const saved = localStorage.getItem(\"capital_\" + user.id);\n    return saved ? Number(saved) : 100000; // Default capital in USD\n  });\n  const [availableSymbols, setAvailableSymbols] = useState([]);\n  const [symbolError, setSymbolError] = useState(\"\");\n  useEffect(() => {\n    const fetchAvailableSymbols = async () => {\n      if (isInvalidApiKey(FINNHUB_API_KEY)) {\n        console.error(\"Cannot fetch symbols: Invalid Finnhub API Key detected.\");\n        setSymbolError(\"Could not fetch available symbols. Please set a valid Finnhub API Key in the code.\");\n        setAvailableSymbols([]);\n        return;\n      }\n      try {\n        console.log(\"Fetching available US market symbols from Finnhub...\");\n        // Using 'US' as the exchange code for major US exchanges\n        const res = await axios.get(`https://finnhub.io/api/v1/stock/symbol?exchange=US&token=${FINNHUB_API_KEY}`);\n        if (res.data && Array.isArray(res.data)) {\n          const symbols = res.data.filter(s => s.type === \"Common Stock\" &&\n          // Or other types like \"ETF\" if desired\n          s.displaySymbol &&\n          // Finnhub's displaySymbol is typically the ticker for US\n          s.symbol // Ensure symbol field exists\n          ).map(s => s.displaySymbol.toUpperCase()); // Use displaySymbol (ticker)\n          setAvailableSymbols(symbols);\n          console.log(`Fetched ${symbols.length} US market symbols.`);\n          if (symbols.length === 0) {\n            setSymbolError(\"No US market symbols found. Check API key permissions or Finnhub US data coverage.\");\n          } else {\n            setSymbolError(\"\");\n          }\n        } else {\n          console.warn(\"No symbols returned or unexpected format from Finnhub:\", res.data);\n          setSymbolError(\"Could not fetch symbols: No data or unexpected format from API for US market.\");\n          setAvailableSymbols([]);\n        }\n      } catch (err) {\n        var _err$response;\n        console.error(\"Error fetching available US symbols:\", err.message, (_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data);\n        setSymbolError(`Could not fetch available US symbols: ${err.message}. Check API key, network, and API limits.`);\n        setAvailableSymbols([]);\n      }\n    };\n    fetchAvailableSymbols();\n  }, []);\n  useEffect(() => {\n    if (user && user.id) {\n      fetchTrades();\n    }\n  }, [user]);\n  useEffect(() => {\n    if (isInvalidApiKey(FINNHUB_API_KEY)) {\n      if (!symbolError.includes(\"API Key\")) {\n        setSymbolError(\"Live price updates paused: Please set a valid Finnhub API Key.\");\n      }\n      return;\n    }\n    const symbolsFromTrades = trades.map(t => t.symbol.toUpperCase());\n    const symbolFromForm = form.symbol ? [form.symbol.toUpperCase()] : [];\n    const uniqueSymbols = [...new Set([...symbolsFromTrades, ...symbolFromForm])];\n    // For US market, symbols are plain tickers, no suffix filtering needed like '.NS'\n    const symbolsToFetch = uniqueSymbols.filter(s => !!s); // Ensure symbol string is not empty\n\n    if (symbolsToFetch.length === 0) {\n      return;\n    }\n    const fetchPrices = async () => {\n      console.log(\"Fetching prices for US symbols:\", symbolsToFetch);\n      const currentPricesBatch = {};\n      let anErrorOccurred = false;\n      for (const sym of symbolsToFetch) {\n        try {\n          const res = await axios.get(`https://finnhub.io/api/v1/quote?symbol=${sym}&token=${FINNHUB_API_KEY}`);\n          if (res.data && typeof res.data.c === 'number' && res.data.c !== 0) {\n            currentPricesBatch[sym] = res.data.c;\n          } else {\n            console.warn(`No valid price data for US symbol ${sym}. Finnhub response:`, res.data);\n          }\n        } catch (err) {\n          console.error(\"Error fetching price for US symbol\", sym, err.message);\n          if (!anErrorOccurred) {\n            anErrorOccurred = true;\n          }\n        }\n      }\n      if (Object.keys(currentPricesBatch).length > 0) {\n        setLivePrices(prevPrices => ({\n          ...prevPrices,\n          ...currentPricesBatch\n        }));\n      }\n    };\n    fetchPrices();\n    const interval = setInterval(fetchPrices, 15000);\n    return () => clearInterval(interval);\n  }, [trades, form.symbol]);\n  useEffect(() => {\n    if (user && user.id) {\n      localStorage.setItem(\"capital_\" + user.id, capital.toString());\n    }\n  }, [capital, user]);\n  const fetchTrades = async () => {\n    if (!user || !user.id) return;\n    const {\n      data,\n      error\n    } = await supabase.from(\"trades\").select(\"*\").eq(\"user_id\", user.id).order(\"created_at\", {\n      ascending: true\n    });\n    if (!error) setTrades(data);else console.error(\"Error fetching trades:\", error.message);\n  };\n  const handleChange = e => {\n    let value = e.target.value.toUpperCase();\n    // Allow A-Z, 0-9. US symbols typically don't have '-' or '.' but some might (e.g. preferred shares, warrants)\n    // For simplicity, keeping it general for common tickers.\n    value = value.replace(/[^A-Z0-9]/g, '');\n    setForm({\n      ...form,\n      [e.target.name]: value\n    });\n  };\n  const validateAndExecuteTrade = async type => {\n    if (isInvalidApiKey(FINNHUB_API_KEY)) {\n      alert(\"Trading disabled: Invalid Finnhub API Key. Please update it in the code.\");\n      return;\n    }\n    const sym = form.symbol.toUpperCase();\n    const qty = Number(form.quantity);\n    if (!sym || !qty || qty <= 0) {\n      alert(\"Invalid input: Symbol and positive quantity are required.\");\n      return;\n    }\n\n    // No .NS check for US market\n    if (availableSymbols.length > 0 && !availableSymbols.includes(sym)) {\n      alert(`Symbol ${sym} is not in the recognized list of US stocks. ` + `Please select from suggestions or ensure it's a valid US ticker.`);\n      setSymbolError(`Symbol ${sym} not found in available US stock list. Is your API key working?`);\n      return;\n    }\n    if (availableSymbols.length === 0 && !symbolError.includes(\"API Key\")) {\n      console.warn(`Available US symbols list is empty. Attempting trade for ${sym} without list verification.`);\n    }\n    const price = livePrices[sym];\n    if (typeof price !== 'number' || price <= 0) {\n      alert(`Live price for ${sym} is currently unavailable or invalid. ` + `Ensure the symbol is a correct US ticker, actively traded, and your API key is working. Try again shortly.`);\n      setSymbolError(`No valid live price for ${sym}. Check US ticker, API data availability, or API key.`);\n      return;\n    }\n    if (type === \"buy\") {\n      const cost = qty * price;\n      if (cost > capital) {\n        alert(\"Not enough capital to perform this buy trade.\");\n        return;\n      }\n      setCapital(c => c - cost);\n    } else {\n      const pnlSummary = calculatePnL(trades);\n      const heldStock = pnlSummary.find(s => s.symbol === sym);\n      if (!heldStock || heldStock.netQty < qty) {\n        alert(`You only hold ${heldStock ? heldStock.netQty : 0} of ${sym}. Cannot sell ${qty}.`);\n        return;\n      }\n      setCapital(c => c + qty * price);\n    }\n    const trade = {\n      user_id: user.id,\n      symbol: sym,\n      quantity: qty,\n      price,\n      type\n    };\n    const {\n      error\n    } = await supabase.from(\"trades\").insert([trade]);\n    if (error) {\n      alert(\"Error executing trade with database: \" + error.message);\n      if (type === \"buy\") setCapital(c => c + qty * price);else setCapital(c => c - qty * price);\n      return;\n    }\n    setForm({\n      ...form,\n      quantity: \"\"\n    });\n    fetchTrades();\n    setSymbolError(\"\");\n  };\n  const handleBuy = () => validateAndExecuteTrade(\"buy\");\n  const handleSell = () => validateAndExecuteTrade(\"sell\");\n  const handleLogout = async () => {\n    if (!user || !user.id) return;\n    const {\n      error\n    } = await supabase.auth.signOut();\n    if (error) {\n      console.error(\"Error logging out:\", error.message);\n    } else {\n      localStorage.removeItem(\"capital_\" + user.id);\n      window.location.reload();\n    }\n  };\n  const calculatePnL = currentTrades => {\n    const summary = {};\n    currentTrades.forEach(({\n      symbol,\n      quantity,\n      price,\n      type\n    }) => {\n      const s = symbol.toUpperCase();\n      if (!summary[s]) {\n        summary[s] = {\n          buyQty: 0,\n          buyTotal: 0,\n          sellQty: 0,\n          sellTotal: 0,\n          netQty: 0\n        };\n      }\n      const q = Number(quantity);\n      const p = Number(price);\n      if (type === \"buy\") {\n        summary[s].buyQty += q;\n        summary[s].buyTotal += q * p;\n        summary[s].netQty += q;\n      } else {\n        summary[s].sellQty += q;\n        summary[s].sellTotal += q * p;\n        summary[s].netQty -= q;\n      }\n    });\n    return Object.entries(summary).map(([symbol, data]) => {\n      const avgBuy = data.buyQty > 0 ? data.buyTotal / data.buyQty : 0;\n      const costOfSoldShares = avgBuy * data.sellQty;\n      const profit = data.sellTotal - costOfSoldShares;\n      return {\n        symbol,\n        netQty: data.netQty,\n        avgBuyPrice: avgBuy.toFixed(2),\n        profit: profit.toFixed(2)\n      };\n    });\n  };\n  const pnlData = calculatePnL(trades);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: \"1rem 2rem\",\n      fontFamily: \"Arial\",\n      maxWidth: 900,\n      margin: \"auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }\n  }, \"\\uD83D\\uDCC8 Paper Trading Dashboard (US Market)\"), user && user.email && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 31\n    }\n  }, \"Logged in as: \", user.email), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }\n  }, \"Capital: \", CURRENCY_SYMBOL, capital.toFixed(2)), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleLogout,\n    style: {\n      marginBottom: \"1rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }\n  }, \"Logout\"), isInvalidApiKey(FINNHUB_API_KEY) && /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: \"red\",\n      fontWeight: \"bold\",\n      border: \"1px solid red\",\n      padding: \"0.5rem\",\n      margin: \"1rem 0\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 9\n    }\n  }, \"WARNING: A valid Finnhub API Key is not set in `TradingDashboard.js`. Symbol loading, live prices, and trading will not work correctly.\"), /*#__PURE__*/React.createElement(\"form\", {\n    style: {\n      marginBottom: \"1.5rem\",\n      display: \"flex\",\n      gap: \"0.5rem\",\n      flexWrap: \"wrap\",\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    name: \"symbol\",\n    placeholder: \"Symbol (e.g., AAPL)\",\n    value: form.symbol,\n    onChange: handleChange,\n    required: true,\n    style: {\n      width: \"180px\",\n      textTransform: \"uppercase\",\n      padding: \"8px\",\n      border: \"1px solid #ccc\"\n    },\n    list: \"symbols-list\",\n    title: \"Enter US stock symbol, e.g., AAPL, MSFT\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"datalist\", {\n    id: \"symbols-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 9\n    }\n  }, availableSymbols.map(sym => /*#__PURE__*/React.createElement(\"option\", {\n    key: sym,\n    value: sym,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"quantity\",\n    type: \"number\",\n    placeholder: \"Quantity\",\n    value: form.quantity,\n    onChange: e => setForm({\n      ...form,\n      quantity: e.target.value\n    }),\n    required: true,\n    min: \"1\",\n    style: {\n      width: \"100px\",\n      padding: \"8px\",\n      border: \"1px solid #ccc\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: handleBuy,\n    style: {\n      padding: \"8px 15px\",\n      backgroundColor: \"#4CAF50\",\n      color: \"white\",\n      border: \"none\",\n      cursor: \"pointer\",\n      borderRadius: \"4px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 9\n    }\n  }, \"Buy\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: handleSell,\n    style: {\n      padding: \"8px 15px\",\n      backgroundColor: \"#f44336\",\n      color: \"white\",\n      border: \"none\",\n      cursor: \"pointer\",\n      borderRadius: \"4px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 9\n    }\n  }, \"Sell\")), symbolError && /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: \"red\",\n      marginTop: \"0.5rem\",\n      padding: \"0.5rem\",\n      border: \"1px dashed red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 23\n    }\n  }, \"\\u26A0\\uFE0F \", symbolError), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }\n  }, \"Live Prices (US Stocks)\"), Object.keys(livePrices).filter(sym => livePrices[sym] !== null && typeof livePrices[sym] === 'number').length > 0 ? /*#__PURE__*/React.createElement(\"ul\", {\n    style: {\n      listStyleType: \"none\",\n      paddingLeft: 0,\n      columns: 2,\n      columnGap: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 9\n    }\n  }, Object.entries(livePrices).map(([sym, price]) => price !== null && typeof price === 'number' ? /*#__PURE__*/React.createElement(\"li\", {\n    key: sym,\n    style: {\n      padding: \"0.2rem 0\",\n      borderBottom: \"1px solid #eee\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 15\n    }\n  }, sym, \": \", CURRENCY_SYMBOL, price.toFixed(2)) : null)) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 9\n    }\n  }, \"No live prices for US stocks currently displayed. Ensure your API key is valid and type a valid US ticker (e.g. AAPL).\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 7\n    }\n  }, \"Trade History\"), trades.length > 0 ? /*#__PURE__*/React.createElement(\"table\", {\n    border: \"1\",\n    cellPadding: \"8\",\n    style: {\n      width: \"100%\",\n      borderCollapse: \"collapse\",\n      marginBottom: \"1.5rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    style: {\n      backgroundColor: \"#f0f0f0\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 15\n    }\n  }, \"Symbol\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 15\n    }\n  }, \"Qty\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 15\n    }\n  }, \"Price\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 15\n    }\n  }, \"Type\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 15\n    }\n  }, \"Time\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 11\n    }\n  }, trades.map(t => /*#__PURE__*/React.createElement(\"tr\", {\n    key: t.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 17\n    }\n  }, t.symbol), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 17\n    }\n  }, t.quantity), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 17\n    }\n  }, CURRENCY_SYMBOL, Number(t.price).toFixed(2)), /*#__PURE__*/React.createElement(\"td\", {\n    style: {\n      color: t.type === \"buy\" ? \"green\" : \"red\",\n      textTransform: \"capitalize\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 17\n    }\n  }, t.type), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 17\n    }\n  }, new Date(t.created_at).toLocaleString()))))) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 12\n    }\n  }, \"No trades made yet.\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 7\n    }\n  }, \"Holdings & Profit/Loss\"), pnlData.length > 0 ? /*#__PURE__*/React.createElement(\"table\", {\n    border: \"1\",\n    cellPadding: \"8\",\n    style: {\n      width: \"100%\",\n      borderCollapse: \"collapse\",\n      marginBottom: \"1.5rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    style: {\n      backgroundColor: \"#f0f0f0\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 15\n    }\n  }, \"Symbol\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 15\n    }\n  }, \"Net Qty Held\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 15\n    }\n  }, \"Avg. Buy Price\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 15\n    }\n  }, \"Realized P&L\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 11\n    }\n  }, pnlData.map(row => /*#__PURE__*/React.createElement(\"tr\", {\n    key: row.symbol,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 17\n    }\n  }, row.symbol), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 17\n    }\n  }, row.netQty), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 17\n    }\n  }, CURRENCY_SYMBOL, row.avgBuyPrice), /*#__PURE__*/React.createElement(\"td\", {\n    style: {\n      color: parseFloat(row.profit) >= 0 ? \"green\" : \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 17\n    }\n  }, CURRENCY_SYMBOL, row.profit))))) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 12\n    }\n  }, \"No current holdings or realized P&L to display.\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 7\n    }\n  }, \"P&L Chart (Realized)\"), pnlData.filter(p => parseFloat(p.profit) !== 0).length > 0 ? /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 300,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(BarChart, {\n    data: pnlData.filter(p => parseFloat(p.profit) !== 0),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"symbol\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    tickFormatter: value => `${CURRENCY_SYMBOL}${value}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    formatter: value => `${CURRENCY_SYMBOL}${Number(value).toFixed(2)}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Bar, {\n    dataKey: \"profit\",\n    name: \"Realized P&L\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 13\n    }\n  }, pnlData.filter(p => parseFloat(p.profit) !== 0).map((entry, index) => /*#__PURE__*/React.createElement(Cell, {\n    key: `cell-${index}`,\n    fill: parseFloat(entry.profit) >= 0 ? \"#4caf50\" : \"#f44336\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 17\n    }\n  }))))) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 12\n    }\n  }, \"No realized P&L to chart.\"));\n}\nexport default TradingDashboard;","map":{"version":3,"names":["React","useState","useEffect","axios","supabase","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Cell","FINNHUB_API_KEY","isInvalidApiKey","key","CURRENCY_SYMBOL","TradingDashboard","user","trades","setTrades","livePrices","setLivePrices","form","setForm","symbol","quantity","type","capital","setCapital","saved","localStorage","getItem","id","Number","availableSymbols","setAvailableSymbols","symbolError","setSymbolError","fetchAvailableSymbols","console","error","log","res","get","data","Array","isArray","symbols","filter","s","displaySymbol","map","toUpperCase","length","warn","err","_err$response","message","response","fetchTrades","includes","symbolsFromTrades","t","symbolFromForm","uniqueSymbols","Set","symbolsToFetch","fetchPrices","currentPricesBatch","anErrorOccurred","sym","c","Object","keys","prevPrices","interval","setInterval","clearInterval","setItem","toString","from","select","eq","order","ascending","handleChange","e","value","target","replace","name","validateAndExecuteTrade","alert","qty","price","cost","pnlSummary","calculatePnL","heldStock","find","netQty","trade","user_id","insert","handleBuy","handleSell","handleLogout","auth","signOut","removeItem","window","location","reload","currentTrades","summary","forEach","buyQty","buyTotal","sellQty","sellTotal","q","p","entries","avgBuy","costOfSoldShares","profit","avgBuyPrice","toFixed","pnlData","createElement","style","padding","fontFamily","maxWidth","margin","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","email","onClick","marginBottom","color","fontWeight","border","display","gap","flexWrap","alignItems","placeholder","onChange","required","width","textTransform","list","title","min","backgroundColor","cursor","borderRadius","marginTop","listStyleType","paddingLeft","columns","columnGap","borderBottom","cellPadding","borderCollapse","Date","created_at","toLocaleString","row","parseFloat","height","strokeDasharray","dataKey","tickFormatter","formatter","entry","index","fill"],"sources":["/Users/aryansrivastava/projects/paper-trading-app/src/TradingDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { supabase } from \"./supabaseClient\"; // Ensure this path is correct\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  Cell,\n} from \"recharts\";\n\n// IMPORTANT: Replace with your actual Finnhub API Key from finnhub.io\nconst FINNHUB_API_KEY = \"d0uv0tpr01qmg3uj77qgd0uv0tpr01qmg3uj77r0\"; // <--- REPLACE THIS!!!\n\n// Helper to check for placeholder or dummy API keys\nconst isInvalidApiKey = (key) => {\n  return !key || key === \"YOUR_FINNHUB_API_KEY\" || key === \"d0uv0tpr01qmg3uj77qgd0uv0tpr01qmg3uj77r0\";\n};\n\nconst CURRENCY_SYMBOL = \"$\";\n\nfunction TradingDashboard({ user }) {\n  const [trades, setTrades] = useState([]);\n  const [livePrices, setLivePrices] = useState({});\n  const [form, setForm] = useState({ symbol: \"\", quantity: \"\", type: \"buy\" });\n  const [capital, setCapital] = useState(() => {\n    const saved = localStorage.getItem(\"capital_\" + user.id);\n    return saved ? Number(saved) : 100000; // Default capital in USD\n  });\n  const [availableSymbols, setAvailableSymbols] = useState([]);\n  const [symbolError, setSymbolError] = useState(\"\");\n\n  useEffect(() => {\n    const fetchAvailableSymbols = async () => {\n      if (isInvalidApiKey(FINNHUB_API_KEY)) {\n        console.error(\"Cannot fetch symbols: Invalid Finnhub API Key detected.\");\n        setSymbolError(\n          \"Could not fetch available symbols. Please set a valid Finnhub API Key in the code.\"\n        );\n        setAvailableSymbols([]);\n        return;\n      }\n      try {\n        console.log(\"Fetching available US market symbols from Finnhub...\");\n        // Using 'US' as the exchange code for major US exchanges\n        const res = await axios.get(\n          `https://finnhub.io/api/v1/stock/symbol?exchange=US&token=${FINNHUB_API_KEY}`\n        );\n        if (res.data && Array.isArray(res.data)) {\n          const symbols = res.data\n            .filter(\n              (s) =>\n                s.type === \"Common Stock\" && // Or other types like \"ETF\" if desired\n                s.displaySymbol && // Finnhub's displaySymbol is typically the ticker for US\n                s.symbol // Ensure symbol field exists\n            )\n            .map((s) => s.displaySymbol.toUpperCase()); // Use displaySymbol (ticker)\n          setAvailableSymbols(symbols);\n          console.log(`Fetched ${symbols.length} US market symbols.`);\n          if (symbols.length === 0) {\n            setSymbolError(\"No US market symbols found. Check API key permissions or Finnhub US data coverage.\");\n          } else {\n            setSymbolError(\"\"); \n          }\n        } else {\n          console.warn(\"No symbols returned or unexpected format from Finnhub:\", res.data);\n          setSymbolError(\"Could not fetch symbols: No data or unexpected format from API for US market.\");\n          setAvailableSymbols([]);\n        }\n      } catch (err) {\n        console.error(\"Error fetching available US symbols:\", err.message, err.response?.data);\n        setSymbolError(\n          `Could not fetch available US symbols: ${err.message}. Check API key, network, and API limits.`\n        );\n        setAvailableSymbols([]);\n      }\n    };\n    fetchAvailableSymbols();\n  }, []);\n\n  useEffect(() => {\n    if (user && user.id) {\n        fetchTrades();\n    }\n  }, [user]); \n\n  useEffect(() => {\n    if (isInvalidApiKey(FINNHUB_API_KEY)) {\n      if (!symbolError.includes(\"API Key\")) {\n        setSymbolError(\"Live price updates paused: Please set a valid Finnhub API Key.\");\n      }\n      return;\n    }\n\n    const symbolsFromTrades = trades.map((t) => t.symbol.toUpperCase());\n    const symbolFromForm = form.symbol ? [form.symbol.toUpperCase()] : [];\n    \n    const uniqueSymbols = [...new Set([...symbolsFromTrades, ...symbolFromForm])];\n    // For US market, symbols are plain tickers, no suffix filtering needed like '.NS'\n    const symbolsToFetch = uniqueSymbols.filter((s) => !!s); // Ensure symbol string is not empty\n\n    if (symbolsToFetch.length === 0) {\n        return;\n    }\n    \n    const fetchPrices = async () => {\n      console.log(\"Fetching prices for US symbols:\", symbolsToFetch);\n      const currentPricesBatch = {};\n      let anErrorOccurred = false;\n\n      for (const sym of symbolsToFetch) {\n        try {\n          const res = await axios.get(\n            `https://finnhub.io/api/v1/quote?symbol=${sym}&token=${FINNHUB_API_KEY}`\n          );\n          if (res.data && typeof res.data.c === 'number' && res.data.c !== 0) { \n            currentPricesBatch[sym] = res.data.c;\n          } else {\n            console.warn(`No valid price data for US symbol ${sym}. Finnhub response:`, res.data);\n          }\n        } catch (err) {\n          console.error(\"Error fetching price for US symbol\", sym, err.message);\n          if(!anErrorOccurred) { \n            anErrorOccurred = true;\n          }\n        }\n      }\n\n      if (Object.keys(currentPricesBatch).length > 0) {\n        setLivePrices((prevPrices) => ({ ...prevPrices, ...currentPricesBatch }));\n      }\n    };\n\n    fetchPrices();\n    const interval = setInterval(fetchPrices, 15000);\n    return () => clearInterval(interval);\n  }, [trades, form.symbol]);\n\n  useEffect(() => {\n    if (user && user.id) {\n        localStorage.setItem(\"capital_\" + user.id, capital.toString());\n    }\n  }, [capital, user]);\n\n  const fetchTrades = async () => {\n    if (!user || !user.id) return;\n    const { data, error } = await supabase\n      .from(\"trades\")\n      .select(\"*\")\n      .eq(\"user_id\", user.id)\n      .order(\"created_at\", { ascending: true });\n\n    if (!error) setTrades(data);\n    else console.error(\"Error fetching trades:\", error.message);\n  };\n\n  const handleChange = (e) => {\n    let value = e.target.value.toUpperCase();\n    // Allow A-Z, 0-9. US symbols typically don't have '-' or '.' but some might (e.g. preferred shares, warrants)\n    // For simplicity, keeping it general for common tickers.\n    value = value.replace(/[^A-Z0-9]/g, ''); \n    setForm({ ...form, [e.target.name]: value });\n  }\n\n  const validateAndExecuteTrade = async (type) => {\n    if (isInvalidApiKey(FINNHUB_API_KEY)) {\n      alert(\"Trading disabled: Invalid Finnhub API Key. Please update it in the code.\");\n      return;\n    }\n\n    const sym = form.symbol.toUpperCase(); \n    const qty = Number(form.quantity);\n\n    if (!sym || !qty || qty <= 0) {\n      alert(\"Invalid input: Symbol and positive quantity are required.\");\n      return;\n    }\n\n    // No .NS check for US market\n    if (availableSymbols.length > 0 && !availableSymbols.includes(sym)) {\n      alert(\n        `Symbol ${sym} is not in the recognized list of US stocks. ` +\n        `Please select from suggestions or ensure it's a valid US ticker.`\n      );\n      setSymbolError(`Symbol ${sym} not found in available US stock list. Is your API key working?`);\n      return;\n    }\n    if (availableSymbols.length === 0 && !symbolError.includes(\"API Key\")){\n        console.warn(`Available US symbols list is empty. Attempting trade for ${sym} without list verification.`);\n    }\n\n    const price = livePrices[sym];\n    if (typeof price !== 'number' || price <= 0) { \n      alert(\n        `Live price for ${sym} is currently unavailable or invalid. ` +\n        `Ensure the symbol is a correct US ticker, actively traded, and your API key is working. Try again shortly.`\n      );\n      setSymbolError(`No valid live price for ${sym}. Check US ticker, API data availability, or API key.`);\n      return;\n    }\n\n    if (type === \"buy\") {\n      const cost = qty * price;\n      if (cost > capital) {\n        alert(\"Not enough capital to perform this buy trade.\");\n        return;\n      }\n      setCapital((c) => c - cost);\n    } else { \n      const pnlSummary = calculatePnL(trades); \n      const heldStock = pnlSummary.find(s => s.symbol === sym);\n      if (!heldStock || heldStock.netQty < qty) {\n          alert(`You only hold ${heldStock ? heldStock.netQty : 0} of ${sym}. Cannot sell ${qty}.`);\n          return;\n      }\n      setCapital((c) => c + qty * price);\n    }\n\n    const trade = { user_id: user.id, symbol: sym, quantity: qty, price, type };\n    const { error } = await supabase.from(\"trades\").insert([trade]);\n\n    if (error) {\n      alert(\"Error executing trade with database: \" + error.message);\n      if (type === \"buy\") setCapital((c) => c + qty * price);\n      else setCapital((c) => c - qty * price);\n      return;\n    }\n\n    setForm({ ...form, quantity: \"\" }); \n    fetchTrades(); \n    setSymbolError(\"\"); \n  };\n\n  const handleBuy = () => validateAndExecuteTrade(\"buy\");\n  const handleSell = () => validateAndExecuteTrade(\"sell\");\n\n  const handleLogout = async () => {\n    if (!user || !user.id) return;\n    const { error } = await supabase.auth.signOut();\n    if (error) {\n        console.error(\"Error logging out:\", error.message);\n    } else {\n        localStorage.removeItem(\"capital_\" + user.id);\n        window.location.reload(); \n    }\n  };\n\n  const calculatePnL = (currentTrades) => {\n    const summary = {};\n    currentTrades.forEach(({ symbol, quantity, price, type }) => {\n      const s = symbol.toUpperCase();\n      if (!summary[s]) {\n        summary[s] = { buyQty: 0, buyTotal: 0, sellQty: 0, sellTotal: 0, netQty: 0 };\n      }\n      const q = Number(quantity);\n      const p = Number(price);\n\n      if (type === \"buy\") {\n        summary[s].buyQty += q;\n        summary[s].buyTotal += q * p;\n        summary[s].netQty += q;\n      } else { \n        summary[s].sellQty += q;\n        summary[s].sellTotal += q * p;\n        summary[s].netQty -= q;\n      }\n    });\n\n    return Object.entries(summary).map(([symbol, data]) => {\n      const avgBuy = data.buyQty > 0 ? data.buyTotal / data.buyQty : 0;\n      const costOfSoldShares = avgBuy * data.sellQty;\n      const profit = data.sellTotal - costOfSoldShares;\n\n      return {\n        symbol,\n        netQty: data.netQty,\n        avgBuyPrice: avgBuy.toFixed(2),\n        profit: profit.toFixed(2), \n      };\n    });\n  };\n\n  const pnlData = calculatePnL(trades);\n\n  return (\n    <div style={{ padding: \"1rem 2rem\", fontFamily: \"Arial\", maxWidth: 900, margin: \"auto\" }}>\n      <h1>📈 Paper Trading Dashboard (US Market)</h1>\n      { user && user.email && <p>Logged in as: {user.email}</p> }\n      <p>Capital: {CURRENCY_SYMBOL}{capital.toFixed(2)}</p>\n      <button onClick={handleLogout} style={{marginBottom: \"1rem\"}}>Logout</button>\n\n      {isInvalidApiKey(FINNHUB_API_KEY) && (\n        <p style={{ color: \"red\", fontWeight: \"bold\", border: \"1px solid red\", padding: \"0.5rem\", margin: \"1rem 0\" }}>\n          WARNING: A valid Finnhub API Key is not set in `TradingDashboard.js`. \n          Symbol loading, live prices, and trading will not work correctly.\n        </p>\n      )}\n\n      <form style={{ marginBottom: \"1.5rem\", display: \"flex\", gap: \"0.5rem\", flexWrap: \"wrap\", alignItems: \"center\" }}>\n        <input\n          name=\"symbol\"\n          placeholder=\"Symbol (e.g., AAPL)\"\n          value={form.symbol}\n          onChange={handleChange}\n          required\n          style={{ width: \"180px\", textTransform: \"uppercase\", padding: \"8px\", border: \"1px solid #ccc\" }}\n          list=\"symbols-list\"\n          title=\"Enter US stock symbol, e.g., AAPL, MSFT\"\n        />\n        <datalist id=\"symbols-list\">\n            {availableSymbols.map((sym) => (\n                <option key={sym} value={sym} />\n            ))}\n        </datalist>\n\n        <input\n          name=\"quantity\"\n          type=\"number\"\n          placeholder=\"Quantity\"\n          value={form.quantity}\n          onChange={(e) => setForm({ ...form, quantity: e.target.value })}\n          required\n          min=\"1\"\n          style={{ width: \"100px\", padding: \"8px\", border: \"1px solid #ccc\" }}\n        />\n        <button type=\"button\" onClick={handleBuy} style={{padding: \"8px 15px\", backgroundColor: \"#4CAF50\", color: \"white\", border: \"none\", cursor: \"pointer\", borderRadius: \"4px\" }}>Buy</button>\n        <button type=\"button\" onClick={handleSell} style={{padding: \"8px 15px\", backgroundColor: \"#f44336\", color: \"white\", border: \"none\", cursor: \"pointer\", borderRadius: \"4px\" }}>Sell</button>\n      </form>\n\n      {symbolError && <p style={{ color: \"red\", marginTop: \"0.5rem\", padding: \"0.5rem\", border: \"1px dashed red\" }}>⚠️ {symbolError}</p>}\n\n      <h2>Live Prices (US Stocks)</h2>\n      {Object.keys(livePrices).filter(sym => livePrices[sym] !== null && typeof livePrices[sym] === 'number').length > 0 ? (\n        <ul style={{ listStyleType: \"none\", paddingLeft: 0, columns: 2, columnGap: \"20px\" }}>\n          {Object.entries(livePrices).map(([sym, price]) =>\n             (price !== null && typeof price === 'number') ? ( \n              <li key={sym} style={{ padding: \"0.2rem 0\", borderBottom: \"1px solid #eee\" }}>{sym}: {CURRENCY_SYMBOL}{price.toFixed(2)}</li>\n            ) : null\n          )}\n        </ul>\n      ) : (\n        <p>No live prices for US stocks currently displayed. Ensure your API key is valid and type a valid US ticker (e.g. AAPL).</p>\n      )}\n\n      <h2>Trade History</h2>\n      {trades.length > 0 ? (\n        <table border=\"1\" cellPadding=\"8\" style={{ width: \"100%\", borderCollapse: \"collapse\", marginBottom: \"1.5rem\" }}>\n          <thead style={{backgroundColor: \"#f0f0f0\"}}>\n            <tr>\n              <th>Symbol</th>\n              <th>Qty</th>\n              <th>Price</th>\n              <th>Type</th>\n              <th>Time</th>\n            </tr>\n          </thead>\n          <tbody>\n            {trades.map((t) => (\n              <tr key={t.id}>\n                <td>{t.symbol}</td>\n                <td>{t.quantity}</td>\n                <td>{CURRENCY_SYMBOL}{Number(t.price).toFixed(2)}</td>\n                <td style={{ color: t.type === \"buy\" ? \"green\" : \"red\", textTransform: \"capitalize\"}}>{t.type}</td>\n                <td>{new Date(t.created_at).toLocaleString()}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (<p>No trades made yet.</p>)}\n\n      <h2>Holdings & Profit/Loss</h2>\n      {pnlData.length > 0 ? ( \n        <table border=\"1\" cellPadding=\"8\" style={{ width: \"100%\", borderCollapse: \"collapse\", marginBottom: \"1.5rem\" }}>\n          <thead style={{backgroundColor: \"#f0f0f0\"}}>\n            <tr>\n              <th>Symbol</th>\n              <th>Net Qty Held</th>\n              <th>Avg. Buy Price</th>\n              <th>Realized P&L</th>\n            </tr>\n          </thead>\n          <tbody>\n            {pnlData.map((row) => (\n              <tr key={row.symbol}>\n                <td>{row.symbol}</td>\n                <td>{row.netQty}</td>\n                <td>{CURRENCY_SYMBOL}{row.avgBuyPrice}</td>\n                <td style={{ color: parseFloat(row.profit) >= 0 ? \"green\" : \"red\" }}>{CURRENCY_SYMBOL}{row.profit}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (<p>No current holdings or realized P&L to display.</p>)}\n\n      <h2>P&L Chart (Realized)</h2>\n      {pnlData.filter(p => parseFloat(p.profit) !== 0).length > 0 ? (\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <BarChart data={pnlData.filter(p => parseFloat(p.profit) !== 0)}> \n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"symbol\" />\n            <YAxis tickFormatter={(value) => `${CURRENCY_SYMBOL}${value}`}/>\n            <Tooltip formatter={(value) => `${CURRENCY_SYMBOL}${Number(value).toFixed(2)}`} />\n            <Legend />\n            <Bar dataKey=\"profit\" name=\"Realized P&L\">\n              {pnlData.filter(p => parseFloat(p.profit) !== 0).map((entry, index) => (\n                <Cell key={`cell-${index}`} fill={parseFloat(entry.profit) >= 0 ? \"#4caf50\" : \"#f44336\"} />\n              ))}\n            </Bar>\n          </BarChart>\n        </ResponsiveContainer>\n      ) : (<p>No realized P&L to chart.</p>)}\n    </div>\n  );\n}\n\nexport default TradingDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}