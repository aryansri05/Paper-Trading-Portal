{"ast":null,"code":"var _jsxFileName = \"/Users/aryansrivastava/projects/Paper-Trading-Portal/src/TradingDataContext.js\";\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { supabase } from './supabaseClient'; // Make sure this path is correct\nimport axios from 'axios';\nconst TradingDataContext = createContext();\nconst FINNHUB_API_KEY = 'd108911r01qhkqr8ggb0d108911r01qhkqr8ggbg';\nconst CURRENCY_SYMBOL = '$';\nconst isInvalidApiKey = key => {\n  return !key || key === \"YOUR_FINNHUB_API_KEY\" || key.length < 5 || key.includes(\" \");\n};\nexport const TradingDataProvider = ({\n  children,\n  user\n}) => {\n  const [trades, setTrades] = useState([]);\n  const [_capital, _setCapitalState] = useState(100000);\n  const [livePrices, setLivePrices] = useState({});\n  const [availableSymbols, setAvailableSymbols] = useState([]);\n  const [symbolError, setSymbolError] = useState(\"\");\n  const [loadingData, setLoadingData] = useState(true);\n  const fetchUserCapital = useCallback(async userId => {\n    if (!userId) {\n      console.warn(\"No userId provided to fetchUserCapital. Setting capital to default.\");\n      _setCapitalState(100000);\n      return;\n    }\n    try {\n      console.log(\"Fetching user capital for userId:\", userId);\n      const {\n        data: profile,\n        error\n      } = await supabase.from('profiles').select('paper_trading_capital').eq('id', userId).single();\n      if (error && error.code === 'PGRST116') {\n        console.log('No profile found for user, creating one with default capital (100000).');\n        const {\n          data: newProfile,\n          error: insertError\n        } = await supabase.from('profiles').insert({\n          id: userId,\n          paper_trading_capital: 100000\n        }).select('paper_trading_capital').single();\n        if (insertError) throw insertError;\n        _setCapitalState(newProfile.paper_trading_capital);\n      } else if (error) {\n        throw error;\n      } else if (profile) {\n        _setCapitalState(profile.paper_trading_capital);\n        console.log(\"Fetched user capital:\", profile.paper_trading_capital);\n      }\n    } catch (error) {\n      console.error(\"Error fetching or creating user capital:\", error.message);\n      _setCapitalState(100000);\n    }\n  }, []);\n  const setCapital = useCallback(async newCapitalValue => {\n    _setCapitalState(newCapitalValue);\n    if (user === null || user === void 0 ? void 0 : user.id) {\n      try {\n        console.log(`Updating capital in DB for user ${user.id} to ${newCapitalValue}`);\n        const {\n          error\n        } = await supabase.from('profiles').update({\n          paper_trading_capital: newCapitalValue\n        }).eq('id', user.id);\n        if (error) {\n          console.error(\"Error updating capital in database:\", error.message);\n        }\n      } catch (err) {\n        console.error(\"Error updating capital in database (catch block):\", err);\n      }\n    }\n  }, [user]);\n  const fetchTrades = useCallback(async () => {\n    if (!user || !user.id) {\n      console.log(\"No user ID available to fetch trades.\");\n      return [];\n    }\n    console.log(\"Fetching trades for user:\", user.id);\n    const {\n      data,\n      error\n    } = await supabase.from(\"trades\").select(\"*\").eq(\"user_id\", user.id).order(\"created_at\", {\n      ascending: true\n    });\n    if (error) {\n      console.error(\"Error fetching trades:\", error);\n      return [];\n    } else {\n      console.log(\"Trades fetched:\", data);\n      return data || [];\n    }\n  }, [user]);\n  const fetchAvailableSymbols = useCallback(async () => {\n    if (isInvalidApiKey(FINNHUB_API_KEY)) {\n      setSymbolError(\"Finnhub API key is invalid or not set. Cannot fetch available symbols.\");\n      console.warn(\"Finnhub API key is invalid or not set. Skipping symbol fetch.\");\n      return [];\n    }\n    try {\n      console.log(\"Fetching available US market symbols from Finnhub...\");\n      const response = await axios.get(`https://finnhub.io/api/v1/stock/symbol?exchange=US&token=${FINNHUB_API_KEY}`);\n      if (response.data && Array.isArray(response.data)) {\n        const usSymbols = response.data.filter(s => s.type === \"Common Stock\" && s.symbol && !s.symbol.includes(\".\") && !s.symbol.includes(\"-\")).map(s => s.symbol);\n        setSymbolError(\"\");\n        console.log(`Fetched ${usSymbols.length} US symbols.`);\n        return usSymbols;\n      } else {\n        setSymbolError(\"No valid symbol data received from Finnhub.\");\n        return [];\n      }\n    } catch (error) {\n      console.error(\"Error fetching available symbols:\", error);\n      setSymbolError(`Failed to fetch available symbols from Finnhub. Check API key and network. Error: ${error.message}`);\n      return [];\n    }\n  }, [FINNHUB_API_KEY]);\n  const fetchLivePrices = useCallback(async symbols => {\n    if (isInvalidApiKey(FINNHUB_API_KEY)) {\n      console.warn(\"Finnhub API key is invalid. Skipping live price fetch.\");\n      return;\n    }\n    if (!symbols || symbols.length === 0) return;\n    try {\n      const newPrices = {};\n      await Promise.all(symbols.map(async symbol => {\n        console.log(`Fetching price for ${symbol}...`);\n        const response = await axios.get(`https://finnhub.io/api/v1/quote?symbol=${symbol}&token=${FINNHUB_API_KEY}`);\n        if (response.data && response.data.c > 0) {\n          newPrices[symbol] = response.data.c;\n        } else {\n          console.warn(`No valid live price found for ${symbol}. Response:`, response.data);\n          newPrices[symbol] = null;\n        }\n      }));\n      setLivePrices(prevPrices => ({\n        ...prevPrices,\n        ...newPrices\n      }));\n    } catch (error) {\n      console.error(\"Error fetching live prices:\", error);\n    }\n  }, [FINNHUB_API_KEY]);\n\n  // Initial data fetches on component mount or user change\n  useEffect(() => {\n    console.log(\"TradingDataProvider useEffect triggered. User:\", user);\n    if (user && user.id) {\n      // Ensure user.id is available before fetching user-specific data\n      setLoadingData(true);\n      console.log(\"Starting initial data load for user:\", user.id);\n      const initializeData = async () => {\n        try {\n          const [fetchedTrades, fetchedSymbols] = await Promise.all([fetchTrades(), fetchAvailableSymbols(), fetchUserCapital(user.id)]);\n          setTrades(fetchedTrades);\n          setAvailableSymbols(fetchedSymbols);\n\n          // --- FIX: Ensure fetchLivePrices is called here after symbols are fetched ---\n          if (fetchedSymbols && fetchedSymbols.length > 0) {\n            console.log(\"Fetching live prices for available symbols...\");\n            fetchLivePrices(fetchedSymbols); // <--- THIS IS THE ADDITION\n          } else {\n            console.log(\"No symbols to fetch live prices for.\");\n          }\n          console.log(\"All initial data fetches complete.\");\n        } catch (error) {\n          console.error(\"Error during initial data fetch:\", error);\n        } finally {\n          setLoadingData(false);\n          console.log(\"TradingDataProvider: setLoadingData(false) called.\");\n        }\n      };\n      initializeData();\n    } else {\n      setTrades([]);\n      _setCapitalState(100000);\n      setLivePrices({});\n      setAvailableSymbols([]);\n      setSymbolError(\"\");\n      setLoadingData(false);\n      console.log(\"No user or user ID, resetting data and setting loadingData to false.\");\n    }\n  }, [user, fetchTrades, fetchAvailableSymbols, fetchUserCapital, fetchLivePrices]);\n  const calculatePnL = useCallback(currentTrades => {\n    const pnlSummary = {};\n    let totalRealizedPnl = 0;\n    currentTrades.forEach(trade => {\n      if (!pnlSummary[trade.symbol]) {\n        pnlSummary[trade.symbol] = {\n          netQty: 0,\n          realizedProfit: 0,\n          buyQueue: []\n        };\n      }\n      if (trade.type === \"buy\") {\n        pnlSummary[trade.symbol].netQty += trade.quantity;\n        pnlSummary[trade.symbol].buyQueue.push({\n          quantity: trade.quantity,\n          price: trade.price\n        });\n      } else if (trade.type === \"sell\") {\n        let remainingQtyToSell = trade.quantity;\n        let costBasisForThisSale = 0;\n        while (remainingQtyToSell > 0 && pnlSummary[trade.symbol].buyQueue.length > 0) {\n          const oldestBuy = pnlSummary[trade.symbol].buyQueue[0];\n          const qtyFromThisBuy = Math.min(oldestBuy.quantity, remainingQtyToSell);\n          costBasisForThisSale += qtyFromThisBuy * oldestBuy.price;\n          oldestBuy.quantity -= qtyFromThisBuy;\n          remainingQtyToSell -= qtyFromThisBuy;\n          if (oldestBuy.quantity === 0) {\n            pnlSummary[trade.symbol].buyQueue.shift();\n          }\n        }\n        pnlSummary[trade.symbol].netQty -= trade.quantity;\n        const realizedProfitForThisSell = trade.quantity * trade.price - costBasisForThisSale;\n        pnlSummary[trade.symbol].realizedProfit += realizedProfitForThisSell;\n        totalRealizedPnl += realizedProfitForThisSell;\n      }\n    });\n    const holdings = Object.entries(pnlSummary).map(([symbol, data]) => {\n      let avgBuyPrice = 0;\n      let remainingBuyCost = 0;\n      let remainingBuyQty = 0;\n      data.buyQueue.forEach(lot => {\n        remainingBuyCost += lot.quantity * lot.price;\n        remainingBuyQty += lot.quantity;\n      });\n      if (remainingBuyQty > 0) {\n        avgBuyPrice = remainingBuyCost / remainingBuyQty;\n      } else {\n        avgBuyPrice = 0;\n      }\n      const currentPrice = livePrices[symbol];\n      const currentMarketValue = data.netQty > 0 && currentPrice ? data.netQty * currentPrice : 0;\n      let unrealizedPnl = 0;\n      if (data.netQty > 0 && currentPrice && avgBuyPrice !== 0) {\n        unrealizedPnl = currentMarketValue - avgBuyPrice * data.netQty;\n      }\n      return {\n        symbol,\n        netQty: data.netQty,\n        avgBuyPrice: avgBuyPrice.toFixed(2),\n        realizedPnl: data.realizedProfit.toFixed(2),\n        unrealizedPnl: unrealizedPnl.toFixed(2),\n        currentMarketValue: currentMarketValue.toFixed(2)\n      };\n    }).sort((a, b) => a.symbol.localeCompare(b.symbol));\n    let totalUnrealizedPnl = holdings.reduce((sum, h) => sum + parseFloat(h.unrealizedPnl || 0), 0);\n    return {\n      holdings: holdings,\n      totalRealizedPnl: totalRealizedPnl.toFixed(2),\n      totalUnrealizedPnl: totalUnrealizedPnl.toFixed(2)\n    };\n  }, [livePrices]);\n  const calculateTotalPortfolioValue = useCallback(() => {\n    let holdingsValue = 0;\n    const {\n      holdings\n    } = calculatePnL(trades);\n    holdings.forEach(holding => {\n      if (holding.netQty > 0 && livePrices[holding.symbol]) {\n        holdingsValue += holding.netQty * livePrices[holding.symbol];\n      }\n    });\n    return (_capital + holdingsValue).toFixed(2);\n  }, [_capital, trades, livePrices, calculatePnL]);\n  const value = {\n    trades,\n    setTrades,\n    capital: _capital,\n    setCapital,\n    livePrices,\n    setLivePrices,\n    availableSymbols,\n    symbolError,\n    setSymbolError,\n    fetchTrades,\n    fetchAvailableSymbols,\n    fetchLivePrices,\n    calculatePnL,\n    isInvalidApiKey,\n    FINNHUB_API_KEY,\n    CURRENCY_SYMBOL,\n    loadingData,\n    calculateTotalPortfolioValue\n  };\n  return /*#__PURE__*/React.createElement(TradingDataContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport const useTradingData = () => {\n  const context = useContext(TradingDataContext);\n  if (!context) {\n    throw new Error('useTradingData must be used within a TradingDataProvider');\n  }\n  return context;\n};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","supabase","axios","TradingDataContext","FINNHUB_API_KEY","CURRENCY_SYMBOL","isInvalidApiKey","key","length","includes","TradingDataProvider","children","user","trades","setTrades","_capital","_setCapitalState","livePrices","setLivePrices","availableSymbols","setAvailableSymbols","symbolError","setSymbolError","loadingData","setLoadingData","fetchUserCapital","userId","console","warn","log","data","profile","error","from","select","eq","single","code","newProfile","insertError","insert","id","paper_trading_capital","message","setCapital","newCapitalValue","update","err","fetchTrades","order","ascending","fetchAvailableSymbols","response","get","Array","isArray","usSymbols","filter","s","type","symbol","map","fetchLivePrices","symbols","newPrices","Promise","all","c","prevPrices","initializeData","fetchedTrades","fetchedSymbols","calculatePnL","currentTrades","pnlSummary","totalRealizedPnl","forEach","trade","netQty","realizedProfit","buyQueue","quantity","push","price","remainingQtyToSell","costBasisForThisSale","oldestBuy","qtyFromThisBuy","Math","min","shift","realizedProfitForThisSell","holdings","Object","entries","avgBuyPrice","remainingBuyCost","remainingBuyQty","lot","currentPrice","currentMarketValue","unrealizedPnl","toFixed","realizedPnl","sort","a","b","localeCompare","totalUnrealizedPnl","reduce","sum","h","parseFloat","calculateTotalPortfolioValue","holdingsValue","holding","value","capital","createElement","Provider","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","useTradingData","context","Error"],"sources":["/Users/aryansrivastava/projects/Paper-Trading-Portal/src/TradingDataContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { supabase } from './supabaseClient'; // Make sure this path is correct\nimport axios from 'axios';\n\nconst TradingDataContext = createContext();\n\nconst FINNHUB_API_KEY = 'd108911r01qhkqr8ggb0d108911r01qhkqr8ggbg';\nconst CURRENCY_SYMBOL = '$';\n\nconst isInvalidApiKey = (key) => {\n  return !key ||\n         key === \"YOUR_FINNHUB_API_KEY\" ||\n         key.length < 5 ||\n         key.includes(\" \");\n};\n\nexport const TradingDataProvider = ({ children, user }) => {\n  const [trades, setTrades] = useState([]);\n  const [_capital, _setCapitalState] = useState(100000); \n  const [livePrices, setLivePrices] = useState({});\n  const [availableSymbols, setAvailableSymbols] = useState([]);\n  const [symbolError, setSymbolError] = useState(\"\");\n  const [loadingData, setLoadingData] = useState(true);\n\n  const fetchUserCapital = useCallback(async (userId) => {\n    if (!userId) {\n      console.warn(\"No userId provided to fetchUserCapital. Setting capital to default.\");\n      _setCapitalState(100000); \n      return;\n    }\n    try {\n      console.log(\"Fetching user capital for userId:\", userId);\n      const { data: profile, error } = await supabase\n        .from('profiles')\n        .select('paper_trading_capital')\n        .eq('id', userId)\n        .single();\n\n      if (error && error.code === 'PGRST116') {\n        console.log('No profile found for user, creating one with default capital (100000).');\n        const { data: newProfile, error: insertError } = await supabase\n          .from('profiles')\n          .insert({ id: userId, paper_trading_capital: 100000 })\n          .select('paper_trading_capital')\n          .single();\n        \n        if (insertError) throw insertError;\n        _setCapitalState(newProfile.paper_trading_capital); \n      } else if (error) {\n        throw error;\n      } else if (profile) {\n        _setCapitalState(profile.paper_trading_capital);\n        console.log(\"Fetched user capital:\", profile.paper_trading_capital);\n      }\n    } catch (error) {\n      console.error(\"Error fetching or creating user capital:\", error.message);\n      _setCapitalState(100000); \n    }\n  }, []);\n\n  const setCapital = useCallback(async (newCapitalValue) => {\n    _setCapitalState(newCapitalValue);\n\n    if (user?.id) {\n      try {\n        console.log(`Updating capital in DB for user ${user.id} to ${newCapitalValue}`);\n        const { error } = await supabase\n          .from('profiles')\n          .update({ paper_trading_capital: newCapitalValue })\n          .eq('id', user.id);\n\n        if (error) {\n          console.error(\"Error updating capital in database:\", error.message);\n        }\n      } catch (err) {\n        console.error(\"Error updating capital in database (catch block):\", err);\n      }\n    }\n  }, [user]);\n\n  const fetchTrades = useCallback(async () => {\n    if (!user || !user.id) {\n      console.log(\"No user ID available to fetch trades.\");\n      return [];\n    }\n    console.log(\"Fetching trades for user:\", user.id);\n    const { data, error } = await supabase\n      .from(\"trades\")\n      .select(\"*\")\n      .eq(\"user_id\", user.id)\n      .order(\"created_at\", { ascending: true });\n\n    if (error) {\n      console.error(\"Error fetching trades:\", error);\n      return [];\n    } else {\n      console.log(\"Trades fetched:\", data);\n      return data || [];\n    }\n  }, [user]);\n\n  const fetchAvailableSymbols = useCallback(async () => {\n    if (isInvalidApiKey(FINNHUB_API_KEY)) {\n      setSymbolError(\"Finnhub API key is invalid or not set. Cannot fetch available symbols.\");\n      console.warn(\"Finnhub API key is invalid or not set. Skipping symbol fetch.\");\n      return [];\n    }\n    \n    try {\n      console.log(\"Fetching available US market symbols from Finnhub...\");\n      const response = await axios.get(\n        `https://finnhub.io/api/v1/stock/symbol?exchange=US&token=${FINNHUB_API_KEY}`\n      );\n      if (response.data && Array.isArray(response.data)) {\n        const usSymbols = response.data\n          .filter(\n            (s) =>\n              s.type === \"Common Stock\" &&\n              s.symbol &&\n              !s.symbol.includes(\".\") &&\n              !s.symbol.includes(\"-\")\n          )\n          .map((s) => s.symbol);\n        setSymbolError(\"\");\n        console.log(`Fetched ${usSymbols.length} US symbols.`);\n        return usSymbols;\n      } else {\n        setSymbolError(\"No valid symbol data received from Finnhub.\");\n        return [];\n      }\n    } catch (error) {\n      console.error(\"Error fetching available symbols:\", error);\n      setSymbolError(\n        `Failed to fetch available symbols from Finnhub. Check API key and network. Error: ${error.message}`\n      );\n      return [];\n    }\n  }, [FINNHUB_API_KEY]);\n\n  const fetchLivePrices = useCallback(async (symbols) => {\n    if (isInvalidApiKey(FINNHUB_API_KEY)) {\n      console.warn(\"Finnhub API key is invalid. Skipping live price fetch.\");\n      return;\n    }\n    if (!symbols || symbols.length === 0) return;\n\n    try {\n      const newPrices = {};\n      await Promise.all(\n        symbols.map(async (symbol) => {\n          console.log(`Fetching price for ${symbol}...`);\n          const response = await axios.get(\n            `https://finnhub.io/api/v1/quote?symbol=${symbol}&token=${FINNHUB_API_KEY}`\n          );\n          if (response.data && response.data.c > 0) {\n            newPrices[symbol] = response.data.c;\n          } else {\n            console.warn(`No valid live price found for ${symbol}. Response:`, response.data);\n            newPrices[symbol] = null;\n          }\n        })\n      );\n      setLivePrices((prevPrices) => ({ ...prevPrices, ...newPrices }));\n    } catch (error) {\n      console.error(\"Error fetching live prices:\", error);\n    }\n  }, [FINNHUB_API_KEY]);\n\n  // Initial data fetches on component mount or user change\n  useEffect(() => {\n    console.log(\"TradingDataProvider useEffect triggered. User:\", user);\n    if (user && user.id) { // Ensure user.id is available before fetching user-specific data\n      setLoadingData(true);\n      console.log(\"Starting initial data load for user:\", user.id);\n      \n      const initializeData = async () => {\n        try {\n          const [fetchedTrades, fetchedSymbols] = await Promise.all([\n            fetchTrades(),\n            fetchAvailableSymbols(),\n            fetchUserCapital(user.id)\n          ]);\n          \n          setTrades(fetchedTrades);\n          setAvailableSymbols(fetchedSymbols);\n          \n          // --- FIX: Ensure fetchLivePrices is called here after symbols are fetched ---\n          if (fetchedSymbols && fetchedSymbols.length > 0) {\n            console.log(\"Fetching live prices for available symbols...\");\n            fetchLivePrices(fetchedSymbols); // <--- THIS IS THE ADDITION\n          } else {\n            console.log(\"No symbols to fetch live prices for.\");\n          }\n\n          console.log(\"All initial data fetches complete.\");\n\n        } catch (error) {\n          console.error(\"Error during initial data fetch:\", error);\n        } finally {\n          setLoadingData(false);\n          console.log(\"TradingDataProvider: setLoadingData(false) called.\");\n        }\n      };\n      initializeData();\n    } else {\n        setTrades([]);\n        _setCapitalState(100000);\n        setLivePrices({});\n        setAvailableSymbols([]);\n        setSymbolError(\"\");\n        setLoadingData(false);\n        console.log(\"No user or user ID, resetting data and setting loadingData to false.\");\n    }\n  }, [user, fetchTrades, fetchAvailableSymbols, fetchUserCapital, fetchLivePrices]);\n\n\n  const calculatePnL = useCallback((currentTrades) => {\n    const pnlSummary = {};\n    let totalRealizedPnl = 0;\n\n    currentTrades.forEach((trade) => {\n      if (!pnlSummary[trade.symbol]) {\n        pnlSummary[trade.symbol] = {\n          netQty: 0,\n          realizedProfit: 0,\n          buyQueue: [],\n        };\n      }\n\n      if (trade.type === \"buy\") {\n        pnlSummary[trade.symbol].netQty += trade.quantity;\n        pnlSummary[trade.symbol].buyQueue.push({\n            quantity: trade.quantity,\n            price: trade.price,\n        });\n      } else if (trade.type === \"sell\") {\n        let remainingQtyToSell = trade.quantity;\n        let costBasisForThisSale = 0;\n\n        while (remainingQtyToSell > 0 && pnlSummary[trade.symbol].buyQueue.length > 0) {\n            const oldestBuy = pnlSummary[trade.symbol].buyQueue[0];\n            const qtyFromThisBuy = Math.min(oldestBuy.quantity, remainingQtyToSell);\n\n            costBasisForThisSale += qtyFromThisBuy * oldestBuy.price;\n            oldestBuy.quantity -= qtyFromThisBuy;\n            remainingQtyToSell -= qtyFromThisBuy;\n\n            if (oldestBuy.quantity === 0) {\n                pnlSummary[trade.symbol].buyQueue.shift();\n            }\n        }\n        \n        pnlSummary[trade.symbol].netQty -= trade.quantity;\n        \n        const realizedProfitForThisSell = (trade.quantity * trade.price) - costBasisForThisSale;\n        pnlSummary[trade.symbol].realizedProfit += realizedProfitForThisSell;\n        totalRealizedPnl += realizedProfitForThisSell;\n      }\n    });\n\n    const holdings = Object.entries(pnlSummary)\n      .map(([symbol, data]) => {\n        let avgBuyPrice = 0;\n        let remainingBuyCost = 0;\n        let remainingBuyQty = 0;\n        data.buyQueue.forEach(lot => {\n            remainingBuyCost += lot.quantity * lot.price;\n            remainingBuyQty += lot.quantity;\n        });\n        if (remainingBuyQty > 0) {\n            avgBuyPrice = remainingBuyCost / remainingBuyQty;\n        } else {\n            avgBuyPrice = 0;\n        }\n\n        const currentPrice = livePrices[symbol];\n        const currentMarketValue = data.netQty > 0 && currentPrice ? (data.netQty * currentPrice) : 0;\n        \n        let unrealizedPnl = 0;\n        if (data.netQty > 0 && currentPrice && avgBuyPrice !== 0) {\n            unrealizedPnl = currentMarketValue - (avgBuyPrice * data.netQty);\n        }\n\n        return {\n          symbol,\n          netQty: data.netQty,\n          avgBuyPrice: avgBuyPrice.toFixed(2),\n          realizedPnl: data.realizedProfit.toFixed(2),\n          unrealizedPnl: unrealizedPnl.toFixed(2),\n          currentMarketValue: currentMarketValue.toFixed(2),\n        };\n      })\n      .sort((a, b) => a.symbol.localeCompare(b.symbol));\n\n    let totalUnrealizedPnl = holdings.reduce((sum, h) => sum + parseFloat(h.unrealizedPnl || 0), 0);\n    \n    return {\n      holdings: holdings,\n      totalRealizedPnl: totalRealizedPnl.toFixed(2),\n      totalUnrealizedPnl: totalUnrealizedPnl.toFixed(2),\n    };\n  }, [livePrices]);\n\n  const calculateTotalPortfolioValue = useCallback(() => {\n    let holdingsValue = 0;\n    const { holdings } = calculatePnL(trades);\n    holdings.forEach(holding => {\n      if (holding.netQty > 0 && livePrices[holding.symbol]) {\n        holdingsValue += holding.netQty * livePrices[holding.symbol];\n      }\n    });\n    return (_capital + holdingsValue).toFixed(2);\n  }, [_capital, trades, livePrices, calculatePnL]);\n\n\n  const value = {\n    trades,\n    setTrades,\n    capital: _capital,\n    setCapital,\n    livePrices,\n    setLivePrices,\n    availableSymbols,\n    symbolError,\n    setSymbolError,\n    fetchTrades,\n    fetchAvailableSymbols,\n    fetchLivePrices,\n    calculatePnL,\n    isInvalidApiKey,\n    FINNHUB_API_KEY,\n    CURRENCY_SYMBOL,\n    loadingData,\n    calculateTotalPortfolioValue,\n  };\n\n  return (\n    <TradingDataContext.Provider value={value}>\n      {children}\n    </TradingDataContext.Provider>\n  );\n};\n\nexport const useTradingData = () => {\n  const context = useContext(TradingDataContext);\n  if (!context) {\n    throw new Error('useTradingData must be used within a TradingDataProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}