{"ast":null,"code":"var _jsxFileName = \"/Users/aryansrivastava/projects/Paper-Trading-Portal/src/App.js\";\n// src/App.js\n\nimport React, { useState, useEffect } from \"react\";\n// Import Switch and Redirect for react-router-dom v5\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport { supabase } from \"./supabaseClient\";\nimport AuthForm from \"./AuthForm\";\nimport TradingDashboard from \"./TradingDashboard\";\nimport PortfolioPage from \"./PortfolioPage\";\nimport { TradingDataProvider } from \"./TradingDataContext\";\nimport './App.css';\nfunction App() {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    console.log(\"App.js: useEffect started, setting up auth listener.\");\n    setLoading(true);\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange((event, session) => {\n      var _session$user;\n      console.log(`App.js: onAuthStateChange event fired: ${event}`);\n      const currentUser = (_session$user = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user !== void 0 ? _session$user : null;\n      setUser(currentUser);\n      setLoading(false);\n      if (currentUser) {\n        console.log(\"App.js: User state set to:\", currentUser.email);\n      } else {\n        console.log(\"App.js: User state cleared (logged out).\");\n      }\n    });\n    return () => {\n      if (subscription) {\n        console.log(\"App.js: Unsubscribing from auth listener.\");\n        subscription.unsubscribe();\n      }\n    };\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: 'center',\n        marginTop: '50px',\n        fontSize: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    }, \"Loading Session...\");\n  }\n  return /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, user ?\n  /*#__PURE__*/\n  // --- Authenticated Routes ---\n  // If a user object exists, render the TradingDataProvider and its routes\n  // Use 'render' prop to pass user to TradingDashboard and wrap with context\n  React.createElement(Route, {\n    path: [\"/dashboard\", \"/portfolio\", \"/\"],\n    render: () => /*#__PURE__*/React.createElement(TradingDataProvider, {\n      user: user,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/dashboard\",\n      render: props => /*#__PURE__*/React.createElement(TradingDashboard, Object.assign({}, props, {\n        user: user,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 63\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/portfolio\",\n      component: PortfolioPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/dashboard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 19\n      }\n    }))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }) :\n  /*#__PURE__*/\n  // --- Unauthenticated Route ---\n  // If no user, all paths lead to the login form\n  // Ensure AuthForm is the only unauthenticated route and has a specific path like \"/login\"\n  // Then redirect to it.\n  React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Route, {\n    path: \"/login\",\n    component: AuthForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 15\n    }\n  })))));\n}\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Switch","Route","Redirect","supabase","AuthForm","TradingDashboard","PortfolioPage","TradingDataProvider","App","user","setUser","loading","setLoading","console","log","data","subscription","auth","onAuthStateChange","event","session","_session$user","currentUser","email","unsubscribe","createElement","style","textAlign","marginTop","fontSize","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","path","render","props","Object","assign","component","to","Fragment"],"sources":["/Users/aryansrivastava/projects/Paper-Trading-Portal/src/App.js"],"sourcesContent":["// src/App.js\n\nimport React, { useState, useEffect } from \"react\";\n// Import Switch and Redirect for react-router-dom v5\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport { supabase } from \"./supabaseClient\";\n\nimport AuthForm from \"./AuthForm\";\nimport TradingDashboard from \"./TradingDashboard\";\nimport PortfolioPage from \"./PortfolioPage\";\nimport { TradingDataProvider } from \"./TradingDataContext\";\nimport './App.css';\n\nfunction App() {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    console.log(\"App.js: useEffect started, setting up auth listener.\");\n    setLoading(true);\n\n    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {\n      console.log(`App.js: onAuthStateChange event fired: ${event}`);\n      \n      const currentUser = session?.user ?? null;\n      setUser(currentUser);\n      setLoading(false);\n\n      if (currentUser) {\n        console.log(\"App.js: User state set to:\", currentUser.email);\n      } else {\n        console.log(\"App.js: User state cleared (logged out).\");\n      }\n    });\n\n    return () => {\n      if (subscription) {\n        console.log(\"App.js: Unsubscribing from auth listener.\");\n        subscription.unsubscribe();\n      }\n    };\n  }, []);\n\n  if (loading) {\n    return (\n      <div style={{ textAlign: 'center', marginTop: '50px', fontSize: '20px' }}>\n        Loading Session...\n      </div>\n    );\n  }\n\n  return (\n    <Router>\n      <div className=\"App\">\n        {/* Use Switch instead of Routes for v5 */}\n        <Switch>\n          {user ? (\n            // --- Authenticated Routes ---\n            // If a user object exists, render the TradingDataProvider and its routes\n            // Use 'render' prop to pass user to TradingDashboard and wrap with context\n            <Route path={[\"/dashboard\", \"/portfolio\", \"/\"]} render={() => (\n              <TradingDataProvider user={user}>\n                {/* Nested Switch for authenticated routes */}\n                <Switch>\n                  <Route path=\"/dashboard\" render={(props) => <TradingDashboard {...props} user={user} />} />\n                  <Route path=\"/portfolio\" component={PortfolioPage} />\n                  {/* Default redirect for authenticated users if they hit \"/\" or any other unhandled path */}\n                  <Redirect to=\"/dashboard\" />\n                </Switch>\n              </TradingDataProvider>\n            )} />\n          ) : (\n            // --- Unauthenticated Route ---\n            // If no user, all paths lead to the login form\n            // Ensure AuthForm is the only unauthenticated route and has a specific path like \"/login\"\n            // Then redirect to it.\n            <>\n              <Route path=\"/login\" component={AuthForm} />\n              {/* Redirect any other path to login if not authenticated */}\n              <Redirect to=\"/login\" />\n            </>\n          )}\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}