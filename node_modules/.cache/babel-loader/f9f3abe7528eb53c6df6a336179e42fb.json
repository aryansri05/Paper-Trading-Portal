{"ast":null,"code":"var _jsxFileName = \"/Users/aryansrivastava/projects/Paper-Trading-Portal/src/TradingDataContext.js\";\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { supabase } from './supabaseClient';\nimport axios from 'axios';\nconst TradingDataContext = createContext();\n\n// Make sure your FINNHUB_API_KEY is correct.\n// IMPORTANT: For production, store this in a .env file and access it via process.env.REACT_APP_FINNHUB_API_KEY\n// For local development, it's fine to hardcode for now, but be aware of the security implications on live sites.\nconst FINNHUB_API_KEY = 'cn3c4q9r1ja9e20j4t0gcn3c4q9r1ja9e20j4t10';\nconst CURRENCY_SYMBOL = '$';\n\n// Helper function to check if the API key is likely a placeholder or genuinely malformed\nconst isInvalidApiKey = key => {\n  return !key || key === \"YOUR_FINNHUB_API_KEY\" ||\n  // Keep this if you have a placeholder\n  // key === \"cn3c4q9r1ja9e20j4t0gcn3c4q9r1ja9e20j4t10\" || // <--- REMOVE OR COMMENT OUT THIS LINE\n  key.length < 5 || key.includes(\" \");\n};\nexport const TradingDataProvider = ({\n  children,\n  user\n}) => {\n  const [trades, setTrades] = useState([]);\n  const [capital, setCapital] = useState(100000); // Starting capital\n  const [livePrices, setLivePrices] = useState({});\n  const [availableSymbols, setAvailableSymbols] = useState([]);\n  const [symbolError, setSymbolError] = useState(\"\");\n  const [loadingData, setLoadingData] = useState(true); // Manages overall loading of core data\n\n  // Memoize fetchTrades\n  const fetchTrades = useCallback(async () => {\n    if (!user || !user.id) {\n      console.log(\"No user ID available to fetch trades.\");\n      return []; // Return an empty array or null to indicate no trades fetched\n    }\n    console.log(\"Fetching trades for user:\", user.id);\n    const {\n      data,\n      error\n    } = await supabase.from(\"trades\").select(\"*\").eq(\"user_id\", user.id).order(\"created_at\", {\n      ascending: true\n    });\n    if (error) {\n      console.error(\"Error fetching trades:\", error);\n      return []; // Return empty array on error\n    } else {\n      console.log(\"Trades fetched:\", data);\n      return data || []; // Return fetched data\n    }\n  }, [user]);\n\n  // Memoize fetchAvailableSymbols\n  const fetchAvailableSymbols = useCallback(async () => {\n    if (isInvalidApiKey(FINNHUB_API_KEY)) {\n      setSymbolError(\"Finnhub API key is invalid or not set. Cannot fetch available symbols.\");\n      console.warn(\"Finnhub API key is invalid or not set. Skipping symbol fetch.\");\n      return []; // Return empty array on invalid key\n    }\n    try {\n      console.log(\"Fetching available US market symbols from Finnhub...\");\n      const response = await axios.get(`https://finnhub.io/api/v1/stock/symbol?exchange=US&token=${FINNHUB_API_KEY}`);\n      if (response.data && Array.isArray(response.data)) {\n        const usSymbols = response.data.filter(s => s.type === \"Common Stock\" && s.symbol && !s.symbol.includes(\".\") && !s.symbol.includes(\"-\")).map(s => s.symbol);\n        setSymbolError(\"\");\n        console.log(`Fetched ${usSymbols.length} US symbols.`);\n        return usSymbols; // Return fetched symbols\n      } else {\n        setSymbolError(\"No valid symbol data received from Finnhub.\");\n        return []; // Return empty array on invalid data\n      }\n    } catch (error) {\n      console.error(\"Error fetching available symbols:\", error);\n      setSymbolError(`Failed to fetch available symbols from Finnhub. Check API key and network. Error: ${error.message}`);\n      return []; // Return empty array on fetch error\n    }\n  }, [FINNHUB_API_KEY]);\n\n  // Memoize fetchLivePrices (no change here, as it's not part of the initial setLoadingData flow)\n  const fetchLivePrices = useCallback(async symbols => {\n    if (isInvalidApiKey(FINNHUB_API_KEY)) {\n      console.warn(\"Finnhub API key is invalid. Skipping live price fetch.\");\n      return;\n    }\n    if (!symbols || symbols.length === 0) return;\n    try {\n      const newPrices = {};\n      await Promise.all(symbols.map(async symbol => {\n        console.log(`Fetching price for ${symbol}...`);\n        const response = await axios.get(`https://finnhub.io/api/v1/quote?symbol=${symbol}&token=${FINNHUB_API_KEY}`);\n        if (response.data && response.data.c > 0) {\n          newPrices[symbol] = response.data.c;\n        } else {\n          console.warn(`No valid live price found for ${symbol}. Response:`, response.data);\n          newPrices[symbol] = null;\n        }\n      }));\n      setLivePrices(prevPrices => ({\n        ...prevPrices,\n        ...newPrices\n      }));\n    } catch (error) {\n      console.error(\"Error fetching live prices:\", error);\n    }\n  }, [FINNHUB_API_KEY]);\n\n  // Initial data fetches on component mount or user change\n  useEffect(() => {\n    console.log(\"TradingDataProvider useEffect triggered. User:\", user);\n    if (user) {\n      setLoadingData(true); // Set true at the very beginning of the overall load\n      console.log(\"Starting initial data load for user:\", user.id);\n      const initializeData = async () => {\n        try {\n          // Await both fetches\n          const [fetchedTrades, fetchedSymbols] = await Promise.all([fetchTrades(), fetchAvailableSymbols()]);\n          setTrades(fetchedTrades); // Update trades state\n          setAvailableSymbols(fetchedSymbols); // Update available symbols state\n\n          console.log(\"All initial data fetches complete.\");\n        } catch (error) {\n          console.error(\"Error during initial data fetch:\", error);\n          // You might want to set a global error state here if needed\n        } finally {\n          // This ensures loadingData is set to false whether success or error\n          setLoadingData(false);\n          console.log(\"TradingDataProvider: setLoadingData(false) called.\");\n        }\n      };\n      initializeData();\n    } else {\n      // If user logs out, reset relevant states and set loading to false\n      setTrades([]);\n      setCapital(100000); // Reset capital on logout\n      setLivePrices({});\n      setAvailableSymbols([]);\n      setSymbolError(\"\");\n      setLoadingData(false); // Make sure it's false when no user is logged in\n      console.log(\"No user, resetting data and setting loadingData to false.\");\n    }\n  }, [user, fetchTrades, fetchAvailableSymbols]);\n\n  // Calculate P&L for portfolio holdings\n  const calculatePnL = useCallback(currentTrades => {\n    const pnlSummary = {};\n    currentTrades.forEach(trade => {\n      if (!pnlSummary[trade.symbol]) {\n        pnlSummary[trade.symbol] = {\n          netQty: 0,\n          totalBuyCost: 0,\n          totalSellRevenue: 0,\n          realizedProfit: 0,\n          avgBuyPrice: 0\n        };\n      }\n      if (trade.type === \"buy\") {\n        pnlSummary[trade.symbol].netQty += trade.quantity;\n        pnlSummary[trade.symbol].totalBuyCost += trade.quantity * trade.price;\n      } else if (trade.type === \"sell\") {\n        const qtyToSell = trade.quantity;\n        let remainingQtyToSell = qtyToSell;\n        const buyTradesForSymbol = currentTrades.filter(t => t.symbol === trade.symbol && t.type === 'buy' && t.id < trade.id).sort((a, b) => new Date(a.created_at) - new Date(b.created_at));\n        let costBasisForSale = 0;\n        for (const buyTrade of buyTradesForSymbol) {\n          const qtyFromThisBuy = Math.min(buyTrade.quantity, remainingQtyToSell);\n          costBasisForSale += qtyFromThisBuy * buyTrade.price;\n          remainingQtyToSell -= qtyFromThisBuy;\n          if (remainingQtyToSell <= 0) break;\n        }\n        pnlSummary[trade.symbol].netQty -= trade.quantity;\n        pnlSummary[trade.symbol].totalSellRevenue += trade.quantity * trade.price;\n        const realizedProfitForThisSell = trade.quantity * trade.price - costBasisForSale;\n        pnlSummary[trade.symbol].realizedProfit += realizedProfitForThisSell;\n      }\n    });\n    return Object.entries(pnlSummary).map(([symbol, data]) => ({\n      symbol,\n      netQty: data.netQty,\n      avgBuyPrice: data.netQty > 0 ? (data.totalBuyCost / data.netQty).toFixed(2) : \"N/A\",\n      profit: data.realizedProfit.toFixed(2),\n      currentValue: data.netQty > 0 && livePrices[symbol] ? (data.netQty * livePrices[symbol]).toFixed(2) : \"0.00\"\n    })).sort((a, b) => a.symbol.localeCompare(b.symbol));\n  }, [livePrices]);\n  const calculateTotalPortfolioValue = useCallback(() => {\n    let holdingsValue = 0;\n    const summary = calculatePnL(trades);\n    summary.forEach(holding => {\n      if (holding.netQty > 0 && livePrices[holding.symbol]) {\n        holdingsValue += holding.netQty * livePrices[holding.symbol];\n      }\n    });\n    return (capital + holdingsValue).toFixed(2);\n  }, [capital, trades, livePrices, calculatePnL]);\n  const value = {\n    trades,\n    setTrades,\n    capital,\n    setCapital,\n    livePrices,\n    setLivePrices,\n    availableSymbols,\n    symbolError,\n    setSymbolError,\n    fetchTrades,\n    fetchAvailableSymbols,\n    fetchLivePrices,\n    calculatePnL,\n    isInvalidApiKey,\n    FINNHUB_API_KEY,\n    CURRENCY_SYMBOL,\n    loadingData,\n    calculateTotalPortfolioValue\n  };\n  return /*#__PURE__*/React.createElement(TradingDataContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport const useTradingData = () => {\n  const context = useContext(TradingDataContext);\n  if (!context) {\n    throw new Error('useTradingData must be used within a TradingDataProvider');\n  }\n  return context;\n};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","supabase","axios","TradingDataContext","FINNHUB_API_KEY","CURRENCY_SYMBOL","isInvalidApiKey","key","length","includes","TradingDataProvider","children","user","trades","setTrades","capital","setCapital","livePrices","setLivePrices","availableSymbols","setAvailableSymbols","symbolError","setSymbolError","loadingData","setLoadingData","fetchTrades","id","console","log","data","error","from","select","eq","order","ascending","fetchAvailableSymbols","warn","response","get","Array","isArray","usSymbols","filter","s","type","symbol","map","message","fetchLivePrices","symbols","newPrices","Promise","all","c","prevPrices","initializeData","fetchedTrades","fetchedSymbols","calculatePnL","currentTrades","pnlSummary","forEach","trade","netQty","totalBuyCost","totalSellRevenue","realizedProfit","avgBuyPrice","quantity","price","qtyToSell","remainingQtyToSell","buyTradesForSymbol","t","sort","a","b","Date","created_at","costBasisForSale","buyTrade","qtyFromThisBuy","Math","min","realizedProfitForThisSell","Object","entries","toFixed","profit","currentValue","localeCompare","calculateTotalPortfolioValue","holdingsValue","summary","holding","value","createElement","Provider","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","useTradingData","context","Error"],"sources":["/Users/aryansrivastava/projects/Paper-Trading-Portal/src/TradingDataContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { supabase } from './supabaseClient';\nimport axios from 'axios';\n\nconst TradingDataContext = createContext();\n\n// Make sure your FINNHUB_API_KEY is correct.\n// IMPORTANT: For production, store this in a .env file and access it via process.env.REACT_APP_FINNHUB_API_KEY\n// For local development, it's fine to hardcode for now, but be aware of the security implications on live sites.\nconst FINNHUB_API_KEY = 'cn3c4q9r1ja9e20j4t0gcn3c4q9r1ja9e20j4t10';\nconst CURRENCY_SYMBOL = '$';\n\n// Helper function to check if the API key is likely a placeholder or genuinely malformed\nconst isInvalidApiKey = (key) => {\n  return !key ||\n         key === \"YOUR_FINNHUB_API_KEY\" || // Keep this if you have a placeholder\n         // key === \"cn3c4q9r1ja9e20j4t0gcn3c4q9r1ja9e20j4t10\" || // <--- REMOVE OR COMMENT OUT THIS LINE\n         key.length < 5 ||\n         key.includes(\" \");\n};\n\nexport const TradingDataProvider = ({ children, user }) => {\n  const [trades, setTrades] = useState([]);\n  const [capital, setCapital] = useState(100000); // Starting capital\n  const [livePrices, setLivePrices] = useState({});\n  const [availableSymbols, setAvailableSymbols] = useState([]);\n  const [symbolError, setSymbolError] = useState(\"\");\n  const [loadingData, setLoadingData] = useState(true); // Manages overall loading of core data\n\n  // Memoize fetchTrades\n  const fetchTrades = useCallback(async () => {\n    if (!user || !user.id) {\n      console.log(\"No user ID available to fetch trades.\");\n      return []; // Return an empty array or null to indicate no trades fetched\n    }\n    console.log(\"Fetching trades for user:\", user.id);\n    const { data, error } = await supabase\n      .from(\"trades\")\n      .select(\"*\")\n      .eq(\"user_id\", user.id)\n      .order(\"created_at\", { ascending: true });\n\n    if (error) {\n      console.error(\"Error fetching trades:\", error);\n      return []; // Return empty array on error\n    } else {\n      console.log(\"Trades fetched:\", data);\n      return data || []; // Return fetched data\n    }\n  }, [user]);\n\n  // Memoize fetchAvailableSymbols\n  const fetchAvailableSymbols = useCallback(async () => {\n    if (isInvalidApiKey(FINNHUB_API_KEY)) {\n      setSymbolError(\"Finnhub API key is invalid or not set. Cannot fetch available symbols.\");\n      console.warn(\"Finnhub API key is invalid or not set. Skipping symbol fetch.\");\n      return []; // Return empty array on invalid key\n    }\n    \n    try {\n      console.log(\"Fetching available US market symbols from Finnhub...\");\n      const response = await axios.get(\n        `https://finnhub.io/api/v1/stock/symbol?exchange=US&token=${FINNHUB_API_KEY}`\n      );\n      if (response.data && Array.isArray(response.data)) {\n        const usSymbols = response.data\n          .filter(\n            (s) =>\n              s.type === \"Common Stock\" &&\n              s.symbol &&\n              !s.symbol.includes(\".\") &&\n              !s.symbol.includes(\"-\")\n          )\n          .map((s) => s.symbol);\n        setSymbolError(\"\");\n        console.log(`Fetched ${usSymbols.length} US symbols.`);\n        return usSymbols; // Return fetched symbols\n      } else {\n        setSymbolError(\"No valid symbol data received from Finnhub.\");\n        return []; // Return empty array on invalid data\n      }\n    } catch (error) {\n      console.error(\"Error fetching available symbols:\", error);\n      setSymbolError(\n        `Failed to fetch available symbols from Finnhub. Check API key and network. Error: ${error.message}`\n      );\n      return []; // Return empty array on fetch error\n    }\n  }, [FINNHUB_API_KEY]);\n\n  // Memoize fetchLivePrices (no change here, as it's not part of the initial setLoadingData flow)\n  const fetchLivePrices = useCallback(async (symbols) => {\n    if (isInvalidApiKey(FINNHUB_API_KEY)) {\n      console.warn(\"Finnhub API key is invalid. Skipping live price fetch.\");\n      return;\n    }\n    if (!symbols || symbols.length === 0) return;\n\n    try {\n      const newPrices = {};\n      await Promise.all(\n        symbols.map(async (symbol) => {\n          console.log(`Fetching price for ${symbol}...`);\n          const response = await axios.get(\n            `https://finnhub.io/api/v1/quote?symbol=${symbol}&token=${FINNHUB_API_KEY}`\n          );\n          if (response.data && response.data.c > 0) {\n            newPrices[symbol] = response.data.c;\n          } else {\n            console.warn(`No valid live price found for ${symbol}. Response:`, response.data);\n            newPrices[symbol] = null;\n          }\n        })\n      );\n      setLivePrices((prevPrices) => ({ ...prevPrices, ...newPrices }));\n    } catch (error) {\n      console.error(\"Error fetching live prices:\", error);\n    }\n  }, [FINNHUB_API_KEY]);\n\n  // Initial data fetches on component mount or user change\n  useEffect(() => {\n    console.log(\"TradingDataProvider useEffect triggered. User:\", user);\n    if (user) {\n      setLoadingData(true); // Set true at the very beginning of the overall load\n      console.log(\"Starting initial data load for user:\", user.id);\n      \n      const initializeData = async () => {\n        try {\n          // Await both fetches\n          const [fetchedTrades, fetchedSymbols] = await Promise.all([\n            fetchTrades(),\n            fetchAvailableSymbols()\n          ]);\n          \n          setTrades(fetchedTrades); // Update trades state\n          setAvailableSymbols(fetchedSymbols); // Update available symbols state\n\n          console.log(\"All initial data fetches complete.\");\n\n        } catch (error) {\n          console.error(\"Error during initial data fetch:\", error);\n          // You might want to set a global error state here if needed\n        } finally {\n          // This ensures loadingData is set to false whether success or error\n          setLoadingData(false);\n          console.log(\"TradingDataProvider: setLoadingData(false) called.\");\n        }\n      };\n      initializeData();\n    } else {\n        // If user logs out, reset relevant states and set loading to false\n        setTrades([]);\n        setCapital(100000); // Reset capital on logout\n        setLivePrices({});\n        setAvailableSymbols([]);\n        setSymbolError(\"\");\n        setLoadingData(false); // Make sure it's false when no user is logged in\n        console.log(\"No user, resetting data and setting loadingData to false.\");\n    }\n  }, [user, fetchTrades, fetchAvailableSymbols]);\n\n\n  // Calculate P&L for portfolio holdings\n  const calculatePnL = useCallback((currentTrades) => {\n    const pnlSummary = {};\n\n    currentTrades.forEach((trade) => {\n      if (!pnlSummary[trade.symbol]) {\n        pnlSummary[trade.symbol] = {\n          netQty: 0,\n          totalBuyCost: 0,\n          totalSellRevenue: 0,\n          realizedProfit: 0,\n          avgBuyPrice: 0,\n        };\n      }\n\n      if (trade.type === \"buy\") {\n        pnlSummary[trade.symbol].netQty += trade.quantity;\n        pnlSummary[trade.symbol].totalBuyCost += trade.quantity * trade.price;\n      } else if (trade.type === \"sell\") {\n        const qtyToSell = trade.quantity;\n        let remainingQtyToSell = qtyToSell;\n\n        const buyTradesForSymbol = currentTrades\n            .filter(t => t.symbol === trade.symbol && t.type === 'buy' && t.id < trade.id)\n            .sort((a, b) => new Date(a.created_at) - new Date(b.created_at));\n\n        let costBasisForSale = 0;\n\n        for (const buyTrade of buyTradesForSymbol) {\n            const qtyFromThisBuy = Math.min(buyTrade.quantity, remainingQtyToSell);\n            costBasisForSale += qtyFromThisBuy * buyTrade.price;\n            remainingQtyToSell -= qtyFromThisBuy;\n\n            if (remainingQtyToSell <= 0) break;\n        }\n\n        pnlSummary[trade.symbol].netQty -= trade.quantity;\n        pnlSummary[trade.symbol].totalSellRevenue += trade.quantity * trade.price;\n        \n        const realizedProfitForThisSell = (trade.quantity * trade.price) - costBasisForSale;\n        pnlSummary[trade.symbol].realizedProfit += realizedProfitForThisSell;\n      }\n    });\n\n    return Object.entries(pnlSummary)\n      .map(([symbol, data]) => ({\n        symbol,\n        netQty: data.netQty,\n        avgBuyPrice: data.netQty > 0 ? (data.totalBuyCost / data.netQty).toFixed(2) : \"N/A\",\n        profit: data.realizedProfit.toFixed(2),\n        currentValue: data.netQty > 0 && livePrices[symbol] ? (data.netQty * livePrices[symbol]).toFixed(2) : \"0.00\"\n      }))\n      .sort((a, b) => a.symbol.localeCompare(b.symbol));\n  }, [livePrices]);\n\n  const calculateTotalPortfolioValue = useCallback(() => {\n    let holdingsValue = 0;\n    const summary = calculatePnL(trades);\n    summary.forEach(holding => {\n      if (holding.netQty > 0 && livePrices[holding.symbol]) {\n        holdingsValue += holding.netQty * livePrices[holding.symbol];\n      }\n    });\n    return (capital + holdingsValue).toFixed(2);\n  }, [capital, trades, livePrices, calculatePnL]);\n\n\n  const value = {\n    trades,\n    setTrades,\n    capital,\n    setCapital,\n    livePrices,\n    setLivePrices,\n    availableSymbols,\n    symbolError,\n    setSymbolError,\n    fetchTrades,\n    fetchAvailableSymbols,\n    fetchLivePrices,\n    calculatePnL,\n    isInvalidApiKey,\n    FINNHUB_API_KEY,\n    CURRENCY_SYMBOL,\n    loadingData,\n    calculateTotalPortfolioValue,\n  };\n\n  return (\n    <TradingDataContext.Provider value={value}>\n      {children}\n    </TradingDataContext.Provider>\n  );\n};\n\nexport const useTradingData = () => {\n  const context = useContext(TradingDataContext);\n  if (!context) {\n    throw new Error('useTradingData must be used within a TradingDataProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}