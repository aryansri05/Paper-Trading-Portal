{"ast":null,"code":"var _jsxFileName = \"/Users/aryansrivastava/projects/Paper-Trading-Portal/src/TradingDashboard.js\";\n// src/TradingDashboard.js\nimport React, { useState, useEffect, useCallback, useContext } from \"react\";\nimport { supabase } from \"./supabaseClient\";\nimport { TradingContext } from \"./TradingDataContext\"; // Assuming this is your context file\nimport { useHistory } from 'react-router-dom'; // For navigation\n\n// Import your new dashboard CSS file\nimport './TradingDashboard.css';\nfunction TradingDashboard() {\n  const {\n    user,\n    // Passed from App.js\n    userCapital,\n    fetchUserCapital,\n    trades,\n    fetchTrades,\n    availableSymbols,\n    fetchAvailableSymbols,\n    livePrices,\n    fetchLivePrices,\n    symbolError,\n    setSymbolError,\n    isApiLimitExceeded,\n    setIsApiLimitExceeded,\n    // New state from context\n    refreshData // New function from context\n  } = useContext(TradingContext);\n  const [symbol, setSymbol] = useState(\"\");\n  const [quantity, setQuantity] = useState(\"\");\n  const [tradeType, setTradeType] = useState(\"buy\"); // 'buy' or 'sell'\n  const [tradeMessage, setTradeMessage] = useState(null); // For trade success/failure messages\n  const [tradeError, setTradeError] = useState(null); // For specific trade errors\n  const history = useHistory();\n\n  // --- Utility functions (moving from App.js if they were there, or keeping here) ---\n  const calculateHoldingsAndPnL = useCallback(() => {\n    // This function will calculate the total holdings, avg buy price, and P&L\n    // This logic is crucial and might be best in TradingDataContext or a separate utility\n    const holdings = {};\n    let totalRealizedPnL = 0;\n    trades.forEach(trade => {\n      const s = trade.symbol;\n      if (!holdings[s]) {\n        holdings[s] = {\n          quantity: 0,\n          totalCost: 0,\n          realizedPnL: 0,\n          closedPositions: [] // To track individual closed positions for FIFO\n        };\n      }\n      if (trade.type === \"buy\") {\n        holdings[s].quantity += trade.quantity;\n        holdings[s].totalCost += trade.price * trade.quantity;\n      } else if (trade.type === \"sell\") {\n        let remainingSellQty = trade.quantity;\n        let saleProceeds = trade.price * trade.quantity;\n\n        // FIFO calculation for realized P&L\n        while (remainingSellQty > 0 && holdings[s].closedPositions.length > 0) {\n          const oldestBuy = holdings[s].closedPositions[0];\n          if (oldestBuy.quantity <= remainingSellQty) {\n            // Sell all of this oldest buy\n            holdings[s].realizedPnL += (trade.price - oldestBuy.price) * oldestBuy.quantity;\n            remainingSellQty -= oldestBuy.quantity;\n            holdings[s].closedPositions.shift(); // Remove it\n          } else {\n            // Sell part of this oldest buy\n            holdings[s].realizedPnL += (trade.price - oldestBuy.price) * remainingSellQty;\n            oldestBuy.quantity -= remainingSellQty;\n            remainingSellQty = 0;\n          }\n        }\n        // Update current holdings if there's still quantity from the original FIFO logic\n        // This part needs careful alignment with how you track open/closed positions.\n        // For simplicity for now, assuming holdings[s].quantity tracks current open positions.\n        holdings[s].quantity -= trade.quantity;\n        holdings[s].totalCost -= saleProceeds; // This needs to be carefully adjusted based on FIFO cost basis\n        // A more robust FIFO would track individual buy lots.\n        // For now, simplify totalCost reduction or recalculate from buy history.\n      }\n      // If we are tracking actual open positions, only sum positive quantities\n      // If a stock quantity goes to 0 or less, it means all were sold.\n      if (holdings[s].quantity <= 0) {\n        // This stock is fully sold out, its realized P&L is complete.\n        totalRealizedPnL += holdings[s].realizedPnL;\n        delete holdings[s]; // Remove from current holdings if fully sold\n      }\n    });\n\n    // Calculate current market value and unrealized P&L for remaining holdings\n    let totalCurrentValue = 0;\n    let totalUnrealizedPnL = 0;\n    Object.keys(holdings).forEach(s => {\n      const holding = holdings[s];\n      const currentPrice = livePrices[s];\n      if (currentPrice) {\n        holding.currentValue = currentPrice * holding.quantity;\n        holding.unrealizedPnL = (currentPrice - holding.totalCost / holding.quantity) * holding.quantity;\n        totalCurrentValue += holding.currentValue;\n        totalUnrealizedPnL += holding.unrealizedPnL;\n      } else {\n        holding.currentValue = 0; // No live price\n        holding.unrealizedPnL = 0; // No live price\n      }\n    });\n    return {\n      holdings,\n      totalRealizedPnL,\n      totalUnrealizedPnL,\n      totalCurrentValue\n    };\n  }, [trades, livePrices]);\n\n  // Effect to load initial data and set up live price fetching\n  useEffect(() => {\n    if (user) {\n      refreshData(); // Call the unified refresh data function\n    }\n  }, [user, refreshData]); // Depend on user and refreshData from context\n\n  const handleTrade = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setTradeMessage(null);\n    setTradeError(null);\n    const qty = parseFloat(quantity);\n    if (isNaN(qty) || qty <= 0) {\n      setTradeError(\"Quantity must be a positive number.\");\n      setLoading(false);\n      return;\n    }\n    const currentPrice = livePrices[symbol.toUpperCase()];\n    if (!currentPrice) {\n      setTradeError(\"Cannot place trade: Live price not available for this symbol.\");\n      setLoading(false);\n      return;\n    }\n\n    // Basic validation for available symbols\n    if (!availableSymbols.includes(symbol.toUpperCase())) {\n      setTradeError(\"Invalid symbol. Please enter a valid US stock ticker.\");\n      setLoading(false);\n      return;\n    }\n    let tradePrice = currentPrice;\n    let newCapital = userCapital;\n    try {\n      if (tradeType === \"buy\") {\n        const cost = tradePrice * qty;\n        if (cost > userCapital) {\n          setTradeError(\"Insufficient capital to complete this purchase.\");\n          setLoading(false);\n          return;\n        }\n        newCapital -= cost;\n      } else {\n        // sell\n        const holdings = calculateHoldingsAndPnL().holdings;\n        const currentHolding = holdings[symbol.toUpperCase()];\n        if (!currentHolding || currentHolding.quantity < qty) {\n          setTradeError(\"Insufficient shares to sell.\");\n          setLoading(false);\n          return;\n        }\n        newCapital += tradePrice * qty;\n      }\n\n      // Record trade in Supabase\n      const {\n        error: tradeInsertError\n      } = await supabase.from(\"trades\").insert([{\n        user_id: user.id,\n        symbol: symbol.toUpperCase(),\n        quantity: qty,\n        price: tradePrice,\n        type: tradeType\n      }]);\n      if (tradeInsertError) {\n        throw tradeInsertError;\n      }\n\n      // Update user capital in Supabase\n      const {\n        error: capitalUpdateError\n      } = await supabase.from(\"profiles\").update({\n        paper_trading_capital: newCapital\n      }).eq(\"id\", user.id);\n      if (capitalUpdateError) {\n        throw capitalUpdateError;\n      }\n      setTradeMessage(`${symbol.toUpperCase()} ${tradeType === 'buy' ? 'bought' : 'sold'} successfully!`);\n      setSymbol(\"\"); // Clear symbol\n      setQuantity(\"\"); // Clear quantity\n      refreshData(); // Refresh all data after successful trade\n    } catch (error) {\n      console.error(\"Trade error:\", error);\n      setTradeError(`Trade failed: ${error.message || \"An unexpected error occurred.\"}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const {\n    holdings,\n    totalRealizedPnL,\n    totalUnrealizedPnL,\n    totalCurrentValue\n  } = calculateHoldingsAndPnL();\n  const totalPortfolioValue = userCapital + totalUnrealizedPnL; // Calculate total value based on cash + unrealized P&L\n\n  // Convert trade history for display\n  const tradeHistory = trades.map(trade => ({\n    ...trade,\n    displayPrice: `$${trade.price.toFixed(2)}`,\n    displayQuantity: trade.quantity,\n    displayType: trade.type.charAt(0).toUpperCase() + trade.type.slice(1),\n    displayTime: new Date(trade.created_at).toLocaleString() // Format date/time\n  }));\n  const handleViewPortfolio = () => {\n    history.push(\"/portfolio\");\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashboard-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"dashboard-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }\n  }, \"Paper Trading Dashboard (US Market)\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"debug-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }\n  }, user && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 15\n    }\n  }, \"Logged in as: \", user.email, \" (ID: \", user.id, \")\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"user-actions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleViewPortfolio,\n    className: \"btn btn-secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 11\n    }\n  }, \"View Portfolio\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: async () => {\n      await supabase.auth.signOut();\n      // Supabase auth listener in App.js will handle redirect\n    },\n    className: \"btn btn-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 11\n    }\n  }, \"Logout\"))), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"key-metrics-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"metric-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 11\n    }\n  }, \"Cash Available\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"metric-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 11\n    }\n  }, \"$\", userCapital.toFixed(2))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"metric-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 11\n    }\n  }, \"Total Unrealized P&L\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: `metric-value ${totalUnrealizedPnL >= 0 ? 'text-green' : 'text-red'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 11\n    }\n  }, \"$\", totalUnrealizedPnL.toFixed(2))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"metric-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 11\n    }\n  }, \"Total Realized P&L\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: `metric-value ${totalRealizedPnL >= 0 ? 'text-green' : 'text-red'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 11\n    }\n  }, \"$\", totalRealizedPnL.toFixed(2))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"metric-card primary-metric\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 11\n    }\n  }, \"Total Portfolio Value\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"metric-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 11\n    }\n  }, \"$\", totalPortfolioValue.toFixed(2)))), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"trade-execution-section card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 9\n    }\n  }, \"Place a Trade\"), tradeError && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"trade-message error-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 24\n    }\n  }, tradeError), tradeMessage && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"trade-message success-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 26\n    }\n  }, tradeMessage), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleTrade,\n    className: \"trade-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"SYMBOL (e.g., AAPL, MSFT)\",\n    value: symbol,\n    onChange: e => setSymbol(e.target.value.toUpperCase()),\n    required: true,\n    className: \"trade-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    placeholder: \"Quantity\",\n    value: quantity,\n    onChange: e => setQuantity(e.target.value),\n    required: true,\n    min: \"1\",\n    step: \"1\",\n    className: \"trade-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"trade-type-buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => setTradeType(\"buy\"),\n    className: `btn ${tradeType === \"buy\" ? \"btn-primary\" : \"btn-secondary\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 13\n    }\n  }, \"Buy\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => setTradeType(\"sell\"),\n    className: `btn ${tradeType === \"sell\" ? \"btn-primary\" : \"btn-secondary\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 13\n    }\n  }, \"Sell\")), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: loading,\n    className: \"btn btn-success trade-submit-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 11\n    }\n  }, loading ? \"Processing...\" : \"Execute Trade\"))), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"live-data-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"live-prices-card card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 11\n    }\n  }, \"Live Prices (US Stocks)\"), isApiLimitExceeded ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"api-limit-message error-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 13\n    }\n  }, \"Finnhub API limit exceeded or network error. Please try again later.\") : symbolError ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"api-limit-message error-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 13\n    }\n  }, symbolError) : Object.keys(livePrices).length === 0 ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"api-limit-message info-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 13\n    }\n  }, \"Fetching live prices... (Ensure your API key is valid and you hold US stocks).\") : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"live-prices-grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 13\n    }\n  }, Object.entries(livePrices).map(([sym, price]) => /*#__PURE__*/React.createElement(\"div\", {\n    key: sym,\n    className: \"price-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"price-symbol\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 19\n    }\n  }, sym, \":\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"price-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 19\n    }\n  }, \"$\", price ? price.toFixed(2) : 'N/A'))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"holdings-card card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 11\n    }\n  }, \"Holdings & Profit/Loss (Live)\"), Object.keys(holdings).length === 0 ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"info-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 13\n    }\n  }, \"You have no current holdings. Place a buy order to see them here.\") : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"holdings-table-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"data-table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 21\n    }\n  }, \"Symbol\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 21\n    }\n  }, \"Net Qty Held\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 21\n    }\n  }, \"Avg. Buy Price\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 21\n    }\n  }, \"Current Price\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 21\n    }\n  }, \"Live P&L\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 17\n    }\n  }, Object.entries(holdings).map(([sym, holding]) => /*#__PURE__*/React.createElement(\"tr\", {\n    key: sym,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 23\n    }\n  }, sym), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 23\n    }\n  }, holding.quantity), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 23\n    }\n  }, \"$\", (holding.totalCost / holding.quantity).toFixed(2)), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 23\n    }\n  }, livePrices[sym] ? `$${livePrices[sym].toFixed(2)}` : \"N/A\"), /*#__PURE__*/React.createElement(\"td\", {\n    className: holding.unrealizedPnL >= 0 ? 'text-green' : 'text-red',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 23\n    }\n  }, \"$\", holding.unrealizedPnL ? holding.unrealizedPnL.toFixed(2) : \"0.00\")))))))), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"trade-history-section card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 9\n    }\n  }, \"Trade History\"), tradeHistory.length === 0 ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"info-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 11\n    }\n  }, \"No trades recorded yet. Place a trade to see your history.\") : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"trade-history-table-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"data-table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 19\n    }\n  }, \"Time\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 19\n    }\n  }, \"Symbol\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 19\n    }\n  }, \"Qty\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 19\n    }\n  }, \"Price\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 19\n    }\n  }, \"Type\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 15\n    }\n  }, tradeHistory.map(trade => /*#__PURE__*/React.createElement(\"tr\", {\n    key: trade.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 21\n    }\n  }, trade.displayTime), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 21\n    }\n  }, trade.symbol), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 21\n    }\n  }, trade.quantity), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 21\n    }\n  }, trade.displayPrice), /*#__PURE__*/React.createElement(\"td\", {\n    className: trade.type === 'buy' ? 'text-green' : 'text-red',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 21\n    }\n  }, trade.displayType))))))));\n}\nexport default TradingDashboard;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useContext","supabase","TradingContext","useHistory","TradingDashboard","user","userCapital","fetchUserCapital","trades","fetchTrades","availableSymbols","fetchAvailableSymbols","livePrices","fetchLivePrices","symbolError","setSymbolError","isApiLimitExceeded","setIsApiLimitExceeded","refreshData","symbol","setSymbol","quantity","setQuantity","tradeType","setTradeType","tradeMessage","setTradeMessage","tradeError","setTradeError","history","calculateHoldingsAndPnL","holdings","totalRealizedPnL","forEach","trade","s","totalCost","realizedPnL","closedPositions","type","price","remainingSellQty","saleProceeds","length","oldestBuy","shift","totalCurrentValue","totalUnrealizedPnL","Object","keys","holding","currentPrice","currentValue","unrealizedPnL","handleTrade","e","preventDefault","setLoading","qty","parseFloat","isNaN","toUpperCase","includes","tradePrice","newCapital","cost","currentHolding","error","tradeInsertError","from","insert","user_id","id","capitalUpdateError","update","paper_trading_capital","eq","console","message","totalPortfolioValue","tradeHistory","map","displayPrice","toFixed","displayQuantity","displayType","charAt","slice","displayTime","Date","created_at","toLocaleString","handleViewPortfolio","push","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","email","onClick","auth","signOut","onSubmit","placeholder","value","onChange","target","required","min","step","disabled","loading","entries","sym","key"],"sources":["/Users/aryansrivastava/projects/Paper-Trading-Portal/src/TradingDashboard.js"],"sourcesContent":["// src/TradingDashboard.js\nimport React, { useState, useEffect, useCallback, useContext } from \"react\";\nimport { supabase } from \"./supabaseClient\";\nimport { TradingContext } from \"./TradingDataContext\"; // Assuming this is your context file\nimport { useHistory } from 'react-router-dom'; // For navigation\n\n// Import your new dashboard CSS file\nimport './TradingDashboard.css';\n\nfunction TradingDashboard() {\n  const {\n    user, // Passed from App.js\n    userCapital,\n    fetchUserCapital,\n    trades,\n    fetchTrades,\n    availableSymbols,\n    fetchAvailableSymbols,\n    livePrices,\n    fetchLivePrices,\n    symbolError,\n    setSymbolError,\n    isApiLimitExceeded,\n    setIsApiLimitExceeded, // New state from context\n    refreshData, // New function from context\n  } = useContext(TradingContext);\n\n  const [symbol, setSymbol] = useState(\"\");\n  const [quantity, setQuantity] = useState(\"\");\n  const [tradeType, setTradeType] = useState(\"buy\"); // 'buy' or 'sell'\n  const [tradeMessage, setTradeMessage] = useState(null); // For trade success/failure messages\n  const [tradeError, setTradeError] = useState(null); // For specific trade errors\n  const history = useHistory();\n\n  // --- Utility functions (moving from App.js if they were there, or keeping here) ---\n  const calculateHoldingsAndPnL = useCallback(() => {\n    // This function will calculate the total holdings, avg buy price, and P&L\n    // This logic is crucial and might be best in TradingDataContext or a separate utility\n    const holdings = {};\n    let totalRealizedPnL = 0;\n\n    trades.forEach((trade) => {\n      const s = trade.symbol;\n      if (!holdings[s]) {\n        holdings[s] = {\n          quantity: 0,\n          totalCost: 0,\n          realizedPnL: 0,\n          closedPositions: [], // To track individual closed positions for FIFO\n        };\n      }\n\n      if (trade.type === \"buy\") {\n        holdings[s].quantity += trade.quantity;\n        holdings[s].totalCost += trade.price * trade.quantity;\n      } else if (trade.type === \"sell\") {\n        let remainingSellQty = trade.quantity;\n        let saleProceeds = trade.price * trade.quantity;\n\n        // FIFO calculation for realized P&L\n        while (remainingSellQty > 0 && holdings[s].closedPositions.length > 0) {\n          const oldestBuy = holdings[s].closedPositions[0];\n\n          if (oldestBuy.quantity <= remainingSellQty) {\n            // Sell all of this oldest buy\n            holdings[s].realizedPnL += (trade.price - oldestBuy.price) * oldestBuy.quantity;\n            remainingSellQty -= oldestBuy.quantity;\n            holdings[s].closedPositions.shift(); // Remove it\n          } else {\n            // Sell part of this oldest buy\n            holdings[s].realizedPnL += (trade.price - oldestBuy.price) * remainingSellQty;\n            oldestBuy.quantity -= remainingSellQty;\n            remainingSellQty = 0;\n          }\n        }\n        // Update current holdings if there's still quantity from the original FIFO logic\n        // This part needs careful alignment with how you track open/closed positions.\n        // For simplicity for now, assuming holdings[s].quantity tracks current open positions.\n        holdings[s].quantity -= trade.quantity;\n        holdings[s].totalCost -= saleProceeds; // This needs to be carefully adjusted based on FIFO cost basis\n        // A more robust FIFO would track individual buy lots.\n        // For now, simplify totalCost reduction or recalculate from buy history.\n      }\n      // If we are tracking actual open positions, only sum positive quantities\n      // If a stock quantity goes to 0 or less, it means all were sold.\n      if (holdings[s].quantity <= 0) {\n        // This stock is fully sold out, its realized P&L is complete.\n        totalRealizedPnL += holdings[s].realizedPnL;\n        delete holdings[s]; // Remove from current holdings if fully sold\n      }\n    });\n\n    // Calculate current market value and unrealized P&L for remaining holdings\n    let totalCurrentValue = 0;\n    let totalUnrealizedPnL = 0;\n\n    Object.keys(holdings).forEach((s) => {\n      const holding = holdings[s];\n      const currentPrice = livePrices[s];\n      if (currentPrice) {\n        holding.currentValue = currentPrice * holding.quantity;\n        holding.unrealizedPnL = (currentPrice - (holding.totalCost / holding.quantity)) * holding.quantity;\n        totalCurrentValue += holding.currentValue;\n        totalUnrealizedPnL += holding.unrealizedPnL;\n      } else {\n        holding.currentValue = 0; // No live price\n        holding.unrealizedPnL = 0; // No live price\n      }\n    });\n    return { holdings, totalRealizedPnL, totalUnrealizedPnL, totalCurrentValue };\n  }, [trades, livePrices]);\n\n\n  // Effect to load initial data and set up live price fetching\n  useEffect(() => {\n    if (user) {\n      refreshData(); // Call the unified refresh data function\n    }\n  }, [user, refreshData]); // Depend on user and refreshData from context\n\n  const handleTrade = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setTradeMessage(null);\n    setTradeError(null);\n\n    const qty = parseFloat(quantity);\n    if (isNaN(qty) || qty <= 0) {\n      setTradeError(\"Quantity must be a positive number.\");\n      setLoading(false);\n      return;\n    }\n\n    const currentPrice = livePrices[symbol.toUpperCase()];\n    if (!currentPrice) {\n      setTradeError(\"Cannot place trade: Live price not available for this symbol.\");\n      setLoading(false);\n      return;\n    }\n\n    // Basic validation for available symbols\n    if (!availableSymbols.includes(symbol.toUpperCase())) {\n      setTradeError(\"Invalid symbol. Please enter a valid US stock ticker.\");\n      setLoading(false);\n      return;\n    }\n\n    let tradePrice = currentPrice;\n    let newCapital = userCapital;\n\n    try {\n      if (tradeType === \"buy\") {\n        const cost = tradePrice * qty;\n        if (cost > userCapital) {\n          setTradeError(\"Insufficient capital to complete this purchase.\");\n          setLoading(false);\n          return;\n        }\n        newCapital -= cost;\n      } else { // sell\n        const holdings = calculateHoldingsAndPnL().holdings;\n        const currentHolding = holdings[symbol.toUpperCase()];\n        if (!currentHolding || currentHolding.quantity < qty) {\n          setTradeError(\"Insufficient shares to sell.\");\n          setLoading(false);\n          return;\n        }\n        newCapital += tradePrice * qty;\n      }\n\n      // Record trade in Supabase\n      const { error: tradeInsertError } = await supabase.from(\"trades\").insert([\n        {\n          user_id: user.id,\n          symbol: symbol.toUpperCase(),\n          quantity: qty,\n          price: tradePrice,\n          type: tradeType,\n        },\n      ]);\n\n      if (tradeInsertError) {\n        throw tradeInsertError;\n      }\n\n      // Update user capital in Supabase\n      const { error: capitalUpdateError } = await supabase\n        .from(\"profiles\")\n        .update({ paper_trading_capital: newCapital })\n        .eq(\"id\", user.id);\n\n      if (capitalUpdateError) {\n        throw capitalUpdateError;\n      }\n\n      setTradeMessage(`${symbol.toUpperCase()} ${tradeType === 'buy' ? 'bought' : 'sold'} successfully!`);\n      setSymbol(\"\"); // Clear symbol\n      setQuantity(\"\"); // Clear quantity\n      refreshData(); // Refresh all data after successful trade\n\n    } catch (error) {\n      console.error(\"Trade error:\", error);\n      setTradeError(`Trade failed: ${error.message || \"An unexpected error occurred.\"}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const { holdings, totalRealizedPnL, totalUnrealizedPnL, totalCurrentValue } = calculateHoldingsAndPnL();\n  const totalPortfolioValue = userCapital + totalUnrealizedPnL; // Calculate total value based on cash + unrealized P&L\n\n  // Convert trade history for display\n  const tradeHistory = trades.map(trade => ({\n    ...trade,\n    displayPrice: `$${trade.price.toFixed(2)}`,\n    displayQuantity: trade.quantity,\n    displayType: trade.type.charAt(0).toUpperCase() + trade.type.slice(1),\n    displayTime: new Date(trade.created_at).toLocaleString(), // Format date/time\n  }));\n\n\n  const handleViewPortfolio = () => {\n    history.push(\"/portfolio\");\n  };\n\n\n  return (\n    <div className=\"dashboard-container\">\n      <header className=\"dashboard-header\">\n        <h1>Paper Trading Dashboard (US Market)</h1>\n        <div className=\"debug-info\">\n          {user && (\n            <>\n              <p>Logged in as: {user.email} (ID: {user.id})</p>\n            </>\n          )}\n        </div>\n        <div className=\"user-actions\">\n          <button onClick={handleViewPortfolio} className=\"btn btn-secondary\">View Portfolio</button>\n          <button onClick={async () => {\n            await supabase.auth.signOut();\n            // Supabase auth listener in App.js will handle redirect\n          }} className=\"btn btn-danger\">Logout</button>\n        </div>\n      </header>\n\n      {/* --- Key Metrics Section --- */}\n      <section className=\"key-metrics-section\">\n        <div className=\"metric-card\">\n          <h3>Cash Available</h3>\n          <p className=\"metric-value\">${userCapital.toFixed(2)}</p>\n        </div>\n        <div className=\"metric-card\">\n          <h3>Total Unrealized P&L</h3>\n          <p className={`metric-value ${totalUnrealizedPnL >= 0 ? 'text-green' : 'text-red'}`}>\n            ${totalUnrealizedPnL.toFixed(2)}\n          </p>\n        </div>\n        <div className=\"metric-card\">\n          <h3>Total Realized P&L</h3>\n          <p className={`metric-value ${totalRealizedPnL >= 0 ? 'text-green' : 'text-red'}`}>\n            ${totalRealizedPnL.toFixed(2)}\n          </p>\n        </div>\n        <div className=\"metric-card primary-metric\">\n          <h3>Total Portfolio Value</h3>\n          <p className=\"metric-value\">${totalPortfolioValue.toFixed(2)}</p>\n        </div>\n      </section>\n\n      {/* --- Trade Execution Section --- */}\n      <section className=\"trade-execution-section card\">\n        <h2>Place a Trade</h2>\n        {tradeError && <p className=\"trade-message error-message\">{tradeError}</p>}\n        {tradeMessage && <p className=\"trade-message success-message\">{tradeMessage}</p>}\n        <form onSubmit={handleTrade} className=\"trade-form\">\n          <input\n            type=\"text\"\n            placeholder=\"SYMBOL (e.g., AAPL, MSFT)\"\n            value={symbol}\n            onChange={(e) => setSymbol(e.target.value.toUpperCase())}\n            required\n            className=\"trade-input\"\n          />\n          <input\n            type=\"number\"\n            placeholder=\"Quantity\"\n            value={quantity}\n            onChange={(e) => setQuantity(e.target.value)}\n            required\n            min=\"1\"\n            step=\"1\"\n            className=\"trade-input\"\n          />\n          <div className=\"trade-type-buttons\">\n            <button\n              type=\"button\"\n              onClick={() => setTradeType(\"buy\")}\n              className={`btn ${tradeType === \"buy\" ? \"btn-primary\" : \"btn-secondary\"}`}\n            >\n              Buy\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => setTradeType(\"sell\")}\n              className={`btn ${tradeType === \"sell\" ? \"btn-primary\" : \"btn-secondary\"}`}\n            >\n              Sell\n            </button>\n          </div>\n          <button type=\"submit\" disabled={loading} className=\"btn btn-success trade-submit-btn\">\n            {loading ? \"Processing...\" : \"Execute Trade\"}\n          </button>\n        </form>\n      </section>\n\n      {/* --- Live Prices & Holdings Section --- */}\n      <section className=\"live-data-section\">\n        <div className=\"live-prices-card card\">\n          <h2>Live Prices (US Stocks)</h2>\n          {isApiLimitExceeded ? (\n            <p className=\"api-limit-message error-message\">\n              Finnhub API limit exceeded or network error. Please try again later.\n            </p>\n          ) : symbolError ? (\n            <p className=\"api-limit-message error-message\">{symbolError}</p>\n          ) : Object.keys(livePrices).length === 0 ? (\n            <p className=\"api-limit-message info-message\">\n              Fetching live prices... (Ensure your API key is valid and you hold US stocks).\n            </p>\n          ) : (\n            <div className=\"live-prices-grid\">\n              {Object.entries(livePrices).map(([sym, price]) => (\n                <div key={sym} className=\"price-item\">\n                  <span className=\"price-symbol\">{sym}:</span>\n                  <span className=\"price-value\">${price ? price.toFixed(2) : 'N/A'}</span>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        <div className=\"holdings-card card\">\n          <h2>Holdings & Profit/Loss (Live)</h2>\n          {Object.keys(holdings).length === 0 ? (\n            <p className=\"info-message\">You have no current holdings. Place a buy order to see them here.</p>\n          ) : (\n            <div className=\"holdings-table-container\">\n              <table className=\"data-table\">\n                <thead>\n                  <tr>\n                    <th>Symbol</th>\n                    <th>Net Qty Held</th>\n                    <th>Avg. Buy Price</th>\n                    <th>Current Price</th>\n                    <th>Live P&L</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {Object.entries(holdings).map(([sym, holding]) => (\n                    <tr key={sym}>\n                      <td>{sym}</td>\n                      <td>{holding.quantity}</td>\n                      <td>${(holding.totalCost / holding.quantity).toFixed(2)}</td>\n                      <td>\n                        {livePrices[sym] ? `$${livePrices[sym].toFixed(2)}` : \"N/A\"}\n                      </td>\n                      <td className={holding.unrealizedPnL >= 0 ? 'text-green' : 'text-red'}>\n                        ${holding.unrealizedPnL ? holding.unrealizedPnL.toFixed(2) : \"0.00\"}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* --- Trade History Section --- */}\n      <section className=\"trade-history-section card\">\n        <h2>Trade History</h2>\n        {tradeHistory.length === 0 ? (\n          <p className=\"info-message\">No trades recorded yet. Place a trade to see your history.</p>\n        ) : (\n          <div className=\"trade-history-table-container\">\n            <table className=\"data-table\">\n              <thead>\n                <tr>\n                  <th>Time</th>\n                  <th>Symbol</th>\n                  <th>Qty</th>\n                  <th>Price</th>\n                  <th>Type</th>\n                </tr>\n              </thead>\n              <tbody>\n                {tradeHistory.map((trade) => (\n                  <tr key={trade.id}>\n                    <td>{trade.displayTime}</td>\n                    <td>{trade.symbol}</td>\n                    <td>{trade.quantity}</td>\n                    <td>{trade.displayPrice}</td>\n                    <td className={trade.type === 'buy' ? 'text-green' : 'text-red'}>\n                      {trade.displayType}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </section>\n    </div>\n  );\n}\n\nexport default TradingDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}