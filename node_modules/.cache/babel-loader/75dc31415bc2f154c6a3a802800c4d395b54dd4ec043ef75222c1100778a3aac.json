{"ast":null,"code":"import _objectSpread from\"/Users/aryansrivastava/projects/Paper-Trading-Portal/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// src/TradingDataContext.js\nimport React,{createContext,useContext,useState,useEffect,useCallback,useMemo}from\"react\";import{supabase}from\"./supabaseClient\";import axios from\"axios\";// Constants for API Key and Currency Symbol\n// WARNING: Hardcoding API keys directly in source code is not recommended for security.\n// Consider using environment variables (.env file) for production deployment.\nimport{jsx as _jsx}from\"react/jsx-runtime\";export const FINNHUB_API_KEY=\"d108911r01qhkqr8ggb0d108911r01qhkqr8ggbg\";// YOUR FINNHUB API KEY\nexport const ALPHA_VANTAGE_API_KEY=\"DR0O9MY1P0QU6ZEL\";// YOUR ALPHA VANTAGE API KEY HERE\nexport const CURRENCY_SYMBOL=process.env.REACT_APP_CURRENCY_SYMBOL||\"$\";// Helper to check if API key is valid (simple check)\nexport const isInvalidApiKey=key=>{const trimmedKey=key?key.trim():'';// Check for empty string, Finnhub placeholder, or Alpha Vantage placeholder\nreturn!trimmedKey||trimmedKey===\"YOUR_FINNHUB_API_KEY_HERE\"||trimmedKey===\"YOUR_ALPHA_VANTAGE_API_KEY\"||trimmedKey.length<10;};const TradingDataContext=/*#__PURE__*/createContext();export const TradingDataProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[trades,setTrades]=useState([]);const[capital,setCapital]=useState(10000);// Initial capital\nconst[livePrices,setLivePrices]=useState({});const[availableSymbols,setAvailableSymbols]=useState([]);const[symbolError,setSymbolError]=useState(\"\");const[loadingData,setLoadingData]=useState(true);const[session,setSession]=useState(null);// Supabase session\nconst[watchListSymbols,setWatchListSymbols]=useState([]);const[holdings,setHoldings]=useState({});// New state for holdings\n// --- Fetch live prices for a given list of symbols (uses Finnhub) ---\nconst fetchLivePrices=useCallback(async symbolsToFetch=>{const uniqueSymbols=[...new Set(symbolsToFetch)].filter(s=>s&&typeof s==='string');if(uniqueSymbols.length===0||isInvalidApiKey(FINNHUB_API_KEY)){setLivePrices(prev=>{const newPrices={};if(uniqueSymbols.length===0)return prev;uniqueSymbols.forEach(sym=>{if(prev[sym])newPrices[sym]=prev[sym];});return newPrices;});return;}try{const responses=await Promise.all(uniqueSymbols.map(symbol=>axios.get(\"https://finnhub.io/api/v1/quote?symbol=\".concat(symbol,\"&token=\").concat(FINNHUB_API_KEY))));const newPrices={};responses.forEach((res,index)=>{const symbol=uniqueSymbols[index];if(res.data&&res.data.c!==0){newPrices[symbol]=res.data.c;}else{newPrices[symbol]=null;// Mark as unavailable\n}});setLivePrices(prev=>_objectSpread(_objectSpread({},prev),newPrices));}catch(error){console.error(\"Error fetching live prices:\",error);const errorPrices={};uniqueSymbols.forEach(symbol=>{errorPrices[symbol]=null;});setLivePrices(prev=>_objectSpread(_objectSpread({},prev),errorPrices));}},[]);// --- Helper to fetch user's capital from Supabase ---\nconst fetchCapital=useCallback(async userId=>{if(!userId){setCapital(10000);return;}setLoadingData(true);try{const{data,error}=await supabase.from(\"user_profiles\").select(\"capital\").eq(\"user_id\",userId).single();if(error&&error.code!=='PGRST116'){// PGRST116 means \"no row found\"\nthrow error;}if(data){setCapital(data.capital);}else{// If no profile exists, create one with initial capital\nconst{data:newProfile,error:insertError}=await supabase.from(\"user_profiles\").insert([{user_id:userId,capital:10000}]).select(\"capital\").single();if(insertError)throw insertError;setCapital(newProfile.capital);}}catch(error){console.error(\"Error fetching or setting capital:\",error.message);setCapital(10000);// Default to initial capital on error\n}finally{setLoadingData(false);}},[]);// --- Function to update capital in Supabase ---\nconst updateCapitalInDb=useCallback(async(newCapital,userId)=>{if(!userId){console.warn(\"updateCapitalInDb: No user ID, not updating DB.\");return;}setLoadingData(true);try{const{error}=await supabase.from(\"user_profiles\").update({capital:newCapital}).eq(\"user_id\",userId);if(error)throw error;setCapital(newCapital);// Update local state after successful DB update\n}catch(error){console.error(\"Error updating capital in DB:\",error.message);}finally{setLoadingData(false);}},[]);// --- Wrapped setCapital to update DB as well ---\nconst handleSetCapital=useCallback(async newCapital=>{setCapital(newCapital);// Optimistically update local state\nif(user!==null&&user!==void 0&&user.id){await updateCapitalInDb(newCapital,user.id);}else{console.warn(\"No user ID available for DB capital update.\");}},[user,updateCapitalInDb]);// --- Fetch trades for the current user ---\nconst fetchTrades=useCallback(async userId=>{if(!userId){setTrades([]);return;}setLoadingData(true);try{const{data,error}=await supabase.from(\"trades\").select(\"*\").eq(\"user_id\",userId).order(\"created_at\",{ascending:false});if(error)throw error;setTrades(data);}catch(error){console.error(\"Error fetching trades:\",error.message);setTrades([]);}finally{setLoadingData(false);}},[]);// --- Fetch holdings for the current user ---\nconst fetchHoldings=useCallback(async userId=>{if(!userId){setHoldings({});return;}setLoadingData(true);try{const{data,error}=await supabase.from(\"holdings\").select(\"*\").eq(\"user_id\",userId);if(error)throw error;const newHoldings={};data.forEach(holding=>{newHoldings[holding.symbol]={symbol:holding.symbol,netQty:holding.net_qty,totalCost:holding.total_cost,avgBuyPrice:holding.avg_buy_price};});setHoldings(newHoldings);}catch(error){console.error(\"Error fetching holdings:\",error.message);setHoldings({});}finally{setLoadingData(false);}},[]);// --- Update holdings in Supabase ---\nconst updateHoldingInDb=useCallback(async(userId,symbol,netQty,totalCost,avgBuyPrice)=>{if(!userId){console.warn(\"updateHoldingInDb: No user ID, not updating DB.\");return;}try{if(netQty===0){// If netQty is 0, delete the holding\nconst{error}=await supabase.from(\"holdings\").delete().eq(\"user_id\",userId).eq(\"symbol\",symbol);if(error)throw error;}else{// Upsert the holding\nconst{error}=await supabase.from(\"holdings\").upsert({user_id:userId,symbol,net_qty:netQty,total_cost:totalCost,avg_buy_price:avgBuyPrice},{onConflict:['user_id','symbol']});if(error)throw error;}// Re-fetch holdings to ensure state is in sync\nawait fetchHoldings(userId);}catch(error){console.error(\"Error updating holding in DB:\",error.message);throw error;}},[fetchHoldings]);// --- Fetch watchlist symbols for the current user ---\nconst fetchWatchlist=useCallback(async userId=>{if(!userId){setWatchListSymbols([]);return;}try{const{data,error}=await supabase.from(\"watchlists\").select(\"symbol\").eq(\"user_id\",userId).order(\"created_at\",{ascending:true});if(error)throw error;setWatchListSymbols(data.map(item=>item.symbol));}catch(error){console.error(\"Error fetching watchlist:\",error.message);setWatchListSymbols([]);}},[]);// --- Add symbol to watchlist ---\nconst addToWatchlist=useCallback(async symbol=>{if(!(user!==null&&user!==void 0&&user.id)){throw new Error(\"User not authenticated.\");}const normalizedSymbol=symbol.toUpperCase();if(watchListSymbols.includes(normalizedSymbol)){throw new Error(\"'\".concat(normalizedSymbol,\"' is already in your watchlist.\"));}try{const{data,error}=await supabase.from(\"watchlists\").insert([{user_id:user.id,symbol:normalizedSymbol}]).select(\"symbol\").single();if(error)throw error;setWatchListSymbols(prev=>[...prev,data.symbol]);fetchLivePrices([normalizedSymbol]);}catch(error){console.error(\"Error adding to watchlist:\",error.message);throw error;}},[user,watchListSymbols,fetchLivePrices]);// --- Remove symbol from watchlist ---\nconst removeFromWatchlist=useCallback(async symbol=>{if(!(user!==null&&user!==void 0&&user.id)){throw new Error(\"User not authenticated.\");}try{const{error}=await supabase.from(\"watchlists\").delete().eq(\"user_id\",user.id).eq(\"symbol\",symbol.toUpperCase());if(error)throw error;setWatchListSymbols(prev=>prev.filter(s=>s!==symbol.toUpperCase()));setLivePrices(prev=>{// Clear live price for removed symbol if not needed elsewhere\nconst newPrices=_objectSpread({},prev);delete newPrices[symbol.toUpperCase()];return newPrices;});}catch(error){console.error(\"Error removing from watchlist:\",error.message);throw error;}},[user]);// --- Fetch available US stock symbols from Finnhub (uses Finnhub) ---\nconst fetchAvailableSymbols=useCallback(async()=>{if(isInvalidApiKey(FINNHUB_API_KEY)){setSymbolError(\"Invalid Finnhub API Key. Cannot fetch US stock symbols.\");return;}setLoadingData(true);try{const{data}=await axios.get(\"https://finnhub.io/api/v1/stock/symbol?exchange=US&token=\".concat(FINNHUB_API_KEY));const filteredSymbols=data.filter(s=>s.type===\"Common Stock\"||s.type===\"ADR\"||s.type===\"REIT\"||s.type===\"ETP\"||s.type===\"ETF\").map(s=>s.symbol).sort();setAvailableSymbols(filteredSymbols);setSymbolError(\"\");}catch(error){console.error(\"Error fetching available symbols:\",error);setSymbolError(\"Failed to fetch US stock symbols. This might be due to API rate limits or an invalid Finnhub API key (free tier keys have limited symbol access).\");setAvailableSymbols([]);}finally{setLoadingData(false);}},[]);// --- Calculate PnL and Holdings (now uses `holdings` state directly) ---\nconst calculatePnL=useCallback(()=>{let totalRealizedPnl=0;let currentHoldingsCalculated={};Object.values(holdings).forEach(holding=>{let unrealizedPnl=0;if(holding.netQty>0&&livePrices[holding.symbol]){const livePrice=livePrices[holding.symbol];unrealizedPnl=(livePrice-holding.avgBuyPrice)*holding.netQty;}currentHoldingsCalculated[holding.symbol]=_objectSpread(_objectSpread({},holding),{},{unrealizedPnl:unrealizedPnl.toFixed(2)});});const totalUnrealizedPnl=Object.values(currentHoldingsCalculated).reduce((sum,holding)=>{return sum+parseFloat(holding.unrealizedPnl||0);},0);let realizedPnlFromTrades=0;// Declare tempHoldingsForRealizedPnl before its use\nconst tempHoldingsForRealizedPnl={};trades.slice().reverse().forEach(trade=>{if(!tempHoldingsForRealizedPnl[trade.symbol]){tempHoldingsForRealizedPnl[trade.symbol]={netQty:0,totalCost:0,avgBuyPrice:0};}if(trade.type===\"buy\"){tempHoldingsForRealizedPnl[trade.symbol].totalCost+=trade.quantity*trade.price;// CORRECTED TYPO HERE: was tempHoldingsForRealizedPyl\ntempHoldingsForRealizedPnl[trade.symbol].netQty+=trade.quantity;tempHoldingsForRealizedPnl[trade.symbol].avgBuyPrice=tempHoldingsForRealizedPnl[trade.symbol].netQty>0?tempHoldingsForRealizedPnl[trade.symbol].totalCost/tempHoldingsForRealizedPnl[trade.symbol].netQty:0;}else{// sell\nconst qtySold=trade.quantity;const currentNetQty=tempHoldingsForRealizedPnl[trade.symbol].netQty;const currentAvgBuyPrice=tempHoldingsForRealizedPnl[trade.symbol].avgBuyPrice;if(currentNetQty>0){const sellCostBasis=currentAvgBuyPrice*Math.min(qtySold,currentNetQty);const sellProceeds=trade.price*qtySold;realizedPnlFromTrades+=sellProceeds-sellCostBasis;}tempHoldingsForRealizedPnl[trade.symbol].netQty-=qtySold;if(tempHoldingsForRealizedPnl[trade.symbol].netQty<=0){tempHoldingsForRealizedPnl[trade.symbol].totalCost=0;tempHoldingsForRealizedPnl[trade.symbol].avgBuyPrice=0;tempHoldingsForRealizedPnl[trade.symbol].netQty=0;}else{tempHoldingsForRealizedPnl[trade.symbol].totalCost=tempHoldingsForRealizedPnl[trade.symbol].netQty*tempHoldingsForRealizedPnl[trade.symbol].avgBuyPrice;}}});return{holdings:Object.values(currentHoldingsCalculated),totalRealizedPnl:realizedPnlFromTrades.toFixed(2),totalUnrealizedPnl:totalUnrealizedPnl.toFixed(2)};},[holdings,livePrices,trades]);// --- Calculate total portfolio value ---\nconst calculateTotalPortfolioValue=useCallback(()=>{const{holdings:calculatedHoldings}=calculatePnL();// Use the holdings from calculatePnL\nlet holdingsValue=0;Object.values(calculatedHoldings).forEach(holding=>{if(holding.netQty>0&&livePrices[holding.symbol]){holdingsValue+=holding.netQty*livePrices[holding.symbol];}});return(capital+holdingsValue).toFixed(2);},[capital,calculatePnL,livePrices]);// --- Add trade logic (modified to update holdings as well) ---\nconst addTrade=useCallback(async newTrade=>{if(!(user!==null&&user!==void 0&&user.id))throw new Error(\"User not authenticated.\");const normalizedSymbol=newTrade.symbol.toUpperCase();const tradeCost=newTrade.quantity*newTrade.price;let newCapital=capital;let currentHolding=holdings[normalizedSymbol]||{netQty:0,totalCost:0,avgBuyPrice:0};let newNetQty=currentHolding.netQty;let newTotalCost=currentHolding.totalCost;let newAvgBuyPrice=currentHolding.avgBuyPrice;if(newTrade.type===\"buy\"){newCapital-=tradeCost;newNetQty+=newTrade.quantity;newTotalCost+=tradeCost;newAvgBuyPrice=newTotalCost/newNetQty;}else{// sell\nnewCapital+=tradeCost;const qtySold=newTrade.quantity;if(currentHolding.netQty<qtySold){throw new Error(\"Insufficient shares to sell.\");}// Calculate realized PnL for this specific sale\nconst sellCostBasis=currentHolding.avgBuyPrice*qtySold;const sellProceeds=newTrade.price*qtySold;const realizedPnlForThisSale=sellProceeds-sellCostBasis;// We will sum realized PnL later from all trades, no need to store here directly\nnewNetQty-=qtySold;if(newNetQty<=0){newTotalCost=0;newAvgBuyPrice=0;newNetQty=0;// Ensure netQty doesn't go negative\n}else{// For partial sell, adjust totalCost for remaining shares\nnewTotalCost=newNetQty*currentHolding.avgBuyPrice;// The average buy price remains the same\n}}try{// 1. Insert the trade\nconst{data:insertedTrade,error:tradeError}=await supabase.from(\"trades\").insert([{user_id:user.id,symbol:normalizedSymbol,type:newTrade.type,quantity:newTrade.quantity,price:newTrade.price,created_at:new Date().toISOString()}]).select().single();if(tradeError)throw tradeError;// 2. Update capital\nawait handleSetCapital(newCapital);// 3. Update holdings\nawait updateHoldingInDb(user.id,normalizedSymbol,newNetQty,newTotalCost,newAvgBuyPrice);// Refresh trades and holdings from DB to ensure state is consistent\nawait fetchTrades(user.id);await fetchHoldings(user.id);}catch(error){console.error(\"Error adding trade:\",error.message);throw error;}},[user,capital,holdings,handleSetCapital,updateHoldingInDb,fetchTrades,fetchHoldings]);// --- Remove trade logic (modified to correctly recalculate capital and holdings) ---\nconst removeTrade=useCallback(async tradeToRemove=>{if(!(user!==null&&user!==void 0&&user.id))throw new Error(\"User not authenticated.\");try{const{error:deleteError}=await supabase.from(\"trades\").delete().eq(\"id\",tradeToRemove.id).eq(\"user_id\",user.id);if(deleteError)throw deleteError;// After deleting a trade, we need to recalculate capital and holdings from scratch\n// to ensure accuracy. This is a common pattern for financial transaction systems.\n// 1. Fetch all remaining trades for the user\nconst{data:remainingTrades,error:fetchTradesError}=await supabase.from(\"trades\").select(\"*\").eq(\"user_id\",user.id).order(\"created_at\",{ascending:true});// Crucial: process in chronological order\nif(fetchTradesError)throw fetchTradesError;// 2. Recalculate capital and holdings\nlet recalculatedCapital=10000;// Start with initial capital\nlet recalculatedHoldings={};remainingTrades.forEach(trade=>{const symbol=trade.symbol;const quantity=trade.quantity;const price=trade.price;if(!recalculatedHoldings[symbol]){recalculatedHoldings[symbol]={netQty:0,totalCost:0,avgBuyPrice:0};}if(trade.type==='buy'){recalculatedCapital-=quantity*price;recalculatedHoldings[symbol].totalCost+=quantity*price;recalculatedHoldings[symbol].netQty+=quantity;recalculatedHoldings[symbol].avgBuyPrice=recalculatedHoldings[symbol].netQty>0?recalculatedHoldings[symbol].totalCost/recalculatedHoldings[symbol].netQty:0;}else{// sell\nrecalculatedCapital+=quantity*price;const currentNetQty=recalculatedHoldings[symbol].netQty;const currentAvgBuyPrice=recalculatedHoldings[symbol].avgBuyPrice;// Only adjust holdings if selling existing shares\nif(currentNetQty>0){const qtyToSellFromHolding=Math.min(quantity,currentNetQty);recalculatedHoldings[symbol].netQty-=qtyToSellFromHolding;if(recalculatedHoldings[symbol].netQty<=0){recalculatedHoldings[symbol].totalCost=0;recalculatedHoldings[symbol].avgBuyPrice=0;recalculatedHoldings[symbol].netQty=0;// Ensure it's not negative\n}else{// If partial sell, totalCost adjusts proportionally\nrecalculatedHoldings[symbol].totalCost=recalculatedHoldings[symbol].netQty*currentAvgBuyPrice;}}}});// 3. Update capital in DB and state\nawait handleSetCapital(recalculatedCapital);// 4. Update all holdings in DB based on recalculation\n// First, delete all existing holdings for the user\nconst{error:deleteHoldingsError}=await supabase.from(\"holdings\").delete().eq(\"user_id\",user.id);if(deleteHoldingsError)throw deleteHoldingsError;// Then, insert the recalculated holdings\nconst holdingsToInsert=Object.values(recalculatedHoldings).filter(h=>h.netQty>0)// Only insert holdings with positive quantity\n.map(h=>({user_id:user.id,symbol:h.symbol,net_qty:h.netQty,total_cost:h.totalCost,avg_buy_price:h.avgBuyPrice}));if(holdingsToInsert.length>0){const{error:insertHoldingsError}=await supabase.from(\"holdings\").insert(holdingsToInsert);if(insertHoldingsError)throw insertHoldingsError;}// Finally, re-fetch all state to ensure consistency\nawait fetchTrades(user.id);await fetchHoldings(user.id);}catch(error){console.error(\"Error removing trade:\",error.message);throw error;}},[user,handleSetCapital,fetchTrades,fetchHoldings]);// --- Initial Data Load on Mount or User Change ---\nuseEffect(()=>{const{data:authListener}=supabase.auth.onAuthStateChange(async(event,session)=>{setSession(session);const currentUser=(session===null||session===void 0?void 0:session.user)||null;setUser(currentUser);if(currentUser){setLoadingData(true);await fetchCapital(currentUser.id);await fetchTrades(currentUser.id);await fetchHoldings(currentUser.id);// Fetch holdings on user change\nawait fetchWatchlist(currentUser.id);setLoadingData(false);}else{setCapital(10000);// Reset to initial capital for logged-out state\nsetTrades([]);setHoldings({});// Clear holdings on logout\nsetWatchListSymbols([]);setLivePrices({});setUser(null);setLoadingData(false);}});// Initial check for session on component mount\nconst checkSession=async()=>{setLoadingData(true);const{data:{session}}=await supabase.auth.getSession();setSession(session);const currentUser=(session===null||session===void 0?void 0:session.user)||null;setUser(currentUser);if(currentUser){await fetchCapital(currentUser.id);await fetchTrades(currentUser.id);await fetchHoldings(currentUser.id);// Initial fetch of holdings\nawait fetchWatchlist(currentUser.id);}setLoadingData(false);};checkSession();fetchAvailableSymbols();// Fetch symbols once on load for everyone\nreturn()=>{authListener.subscription.unsubscribe();};},[fetchCapital,fetchTrades,fetchHoldings,fetchAvailableSymbols,fetchWatchlist]);// Dependencies for initial data load\n// --- Effect to fetch live prices for all relevant symbols ---\nuseEffect(()=>{// Combine symbols from trades, watchlist, and holdings\nconst allSymbols=[...new Set([...trades.map(t=>t.symbol),...watchListSymbols,...Object.keys(holdings)// Include symbols from holdings\n])].filter(Boolean);// Filter out any null/undefined/empty symbols\nif(allSymbols.length>0){// Fetch immediately\nfetchLivePrices(allSymbols);// Set up interval for periodic refresh\nconst interval=setInterval(()=>{fetchLivePrices(allSymbols);},20000);// Every 20 seconds\nreturn()=>clearInterval(interval);// Cleanup on unmount or dependency change\n}},[trades,watchListSymbols,holdings,fetchLivePrices]);// Re-run if trades, watchlist, or holdings change\n// Memoize the context value to prevent unnecessary re-renders\nconst contextValue=useMemo(()=>({user,trades,capital,setCapital:handleSetCapital,// Use the wrapped function\nlivePrices,availableSymbols,symbolError,setSymbolError,fetchTrades,fetchLivePrices,calculatePnL,calculateTotalPortfolioValue,loadingData,removeTrade,addTrade,// Expose addTrade function\nwatchListSymbols,addToWatchlist,removeFromWatchlist,holdings:Object.values(holdings)// Provide holdings as an array for easier consumption\n}),[user,trades,capital,handleSetCapital,livePrices,availableSymbols,symbolError,setSymbolError,fetchTrades,fetchLivePrices,calculatePnL,calculateTotalPortfolioValue,loadingData,removeTrade,addTrade,addToWatchlist,removeFromWatchlist,watchListSymbols,holdings]);return/*#__PURE__*/_jsx(TradingDataContext.Provider,{value:contextValue,children:children});};export const useTradingData=()=>{const context=useContext(TradingDataContext);if(context===undefined){throw new Error(\"useTradingData must be used within a TradingDataProvider\");}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","useMemo","supabase","axios","jsx","_jsx","FINNHUB_API_KEY","ALPHA_VANTAGE_API_KEY","CURRENCY_SYMBOL","process","env","REACT_APP_CURRENCY_SYMBOL","isInvalidApiKey","key","trimmedKey","trim","length","TradingDataContext","TradingDataProvider","_ref","children","user","setUser","trades","setTrades","capital","setCapital","livePrices","setLivePrices","availableSymbols","setAvailableSymbols","symbolError","setSymbolError","loadingData","setLoadingData","session","setSession","watchListSymbols","setWatchListSymbols","holdings","setHoldings","fetchLivePrices","symbolsToFetch","uniqueSymbols","Set","filter","s","prev","newPrices","forEach","sym","responses","Promise","all","map","symbol","get","concat","res","index","data","c","_objectSpread","error","console","errorPrices","fetchCapital","userId","from","select","eq","single","code","newProfile","insertError","insert","user_id","message","updateCapitalInDb","newCapital","warn","update","handleSetCapital","id","fetchTrades","order","ascending","fetchHoldings","newHoldings","holding","netQty","net_qty","totalCost","total_cost","avgBuyPrice","avg_buy_price","updateHoldingInDb","delete","upsert","onConflict","fetchWatchlist","item","addToWatchlist","Error","normalizedSymbol","toUpperCase","includes","removeFromWatchlist","fetchAvailableSymbols","filteredSymbols","type","sort","calculatePnL","totalRealizedPnl","currentHoldingsCalculated","Object","values","unrealizedPnl","livePrice","toFixed","totalUnrealizedPnl","reduce","sum","parseFloat","realizedPnlFromTrades","tempHoldingsForRealizedPnl","slice","reverse","trade","quantity","price","qtySold","currentNetQty","currentAvgBuyPrice","sellCostBasis","Math","min","sellProceeds","calculateTotalPortfolioValue","calculatedHoldings","holdingsValue","addTrade","newTrade","tradeCost","currentHolding","newNetQty","newTotalCost","newAvgBuyPrice","realizedPnlForThisSale","insertedTrade","tradeError","created_at","Date","toISOString","removeTrade","tradeToRemove","deleteError","remainingTrades","fetchTradesError","recalculatedCapital","recalculatedHoldings","qtyToSellFromHolding","deleteHoldingsError","holdingsToInsert","h","insertHoldingsError","authListener","auth","onAuthStateChange","event","currentUser","checkSession","getSession","subscription","unsubscribe","allSymbols","t","keys","Boolean","interval","setInterval","clearInterval","contextValue","Provider","value","useTradingData","context","undefined"],"sources":["/Users/aryansrivastava/projects/Paper-Trading-Portal/src/TradingDataContext.js"],"sourcesContent":["// src/TradingDataContext.js\nimport React, { createContext, useContext, useState, useEffect, useCallback, useMemo } from \"react\";\nimport { supabase } from \"./supabaseClient\";\nimport axios from \"axios\";\n\n// Constants for API Key and Currency Symbol\n// WARNING: Hardcoding API keys directly in source code is not recommended for security.\n// Consider using environment variables (.env file) for production deployment.\n\nexport const FINNHUB_API_KEY = \"d108911r01qhkqr8ggb0d108911r01qhkqr8ggbg\"; // YOUR FINNHUB API KEY\nexport const ALPHA_VANTAGE_API_KEY = \"DR0O9MY1P0QU6ZEL\"; // YOUR ALPHA VANTAGE API KEY HERE\nexport const CURRENCY_SYMBOL = process.env.REACT_APP_CURRENCY_SYMBOL || \"$\";\n\n// Helper to check if API key is valid (simple check)\nexport const isInvalidApiKey = (key) => {\n  const trimmedKey = key ? key.trim() : '';\n  // Check for empty string, Finnhub placeholder, or Alpha Vantage placeholder\n  return !trimmedKey || trimmedKey === \"YOUR_FINNHUB_API_KEY_HERE\" || trimmedKey === \"YOUR_ALPHA_VANTAGE_API_KEY\" || trimmedKey.length < 10;\n};\n\nconst TradingDataContext = createContext();\n\nexport const TradingDataProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [trades, setTrades] = useState([]);\n  const [capital, setCapital] = useState(10000); // Initial capital\n  const [livePrices, setLivePrices] = useState({});\n  const [availableSymbols, setAvailableSymbols] = useState([]);\n  const [symbolError, setSymbolError] = useState(\"\");\n  const [loadingData, setLoadingData] = useState(true);\n  const [session, setSession] = useState(null); // Supabase session\n  const [watchListSymbols, setWatchListSymbols] = useState([]);\n  const [holdings, setHoldings] = useState({}); // New state for holdings\n\n  // --- Fetch live prices for a given list of symbols (uses Finnhub) ---\n  const fetchLivePrices = useCallback(async (symbolsToFetch) => {\n    const uniqueSymbols = [...new Set(symbolsToFetch)].filter(s => s && typeof s === 'string');\n\n    if (uniqueSymbols.length === 0 || isInvalidApiKey(FINNHUB_API_KEY)) {\n      setLivePrices((prev) => {\n        const newPrices = {};\n        if (uniqueSymbols.length === 0) return prev;\n\n        uniqueSymbols.forEach(sym => {\n            if (prev[sym]) newPrices[sym] = prev[sym];\n        });\n        return newPrices;\n      });\n      return;\n    }\n\n    try {\n      const responses = await Promise.all(\n        uniqueSymbols.map((symbol) =>\n          axios.get(`https://finnhub.io/api/v1/quote?symbol=${symbol}&token=${FINNHUB_API_KEY}`)\n        )\n      );\n\n      const newPrices = {};\n      responses.forEach((res, index) => {\n        const symbol = uniqueSymbols[index];\n        if (res.data && res.data.c !== 0) {\n          newPrices[symbol] = res.data.c;\n        } else {\n          newPrices[symbol] = null; // Mark as unavailable\n        }\n      });\n\n      setLivePrices((prev) => ({ ...prev, ...newPrices }));\n    } catch (error) {\n      console.error(\"Error fetching live prices:\", error);\n      const errorPrices = {};\n      uniqueSymbols.forEach(symbol => { errorPrices[symbol] = null; });\n      setLivePrices((prev) => ({ ...prev, ...errorPrices }));\n    }\n  }, []);\n\n  // --- Helper to fetch user's capital from Supabase ---\n  const fetchCapital = useCallback(async (userId) => {\n    if (!userId) {\n      setCapital(10000);\n      return;\n    }\n    setLoadingData(true);\n    try {\n      const { data, error } = await supabase\n        .from(\"user_profiles\")\n        .select(\"capital\")\n        .eq(\"user_id\", userId)\n        .single();\n\n      if (error && error.code !== 'PGRST116') { // PGRST116 means \"no row found\"\n        throw error;\n      }\n\n      if (data) {\n        setCapital(data.capital);\n      } else {\n        // If no profile exists, create one with initial capital\n        const { data: newProfile, error: insertError } = await supabase\n          .from(\"user_profiles\")\n          .insert([{ user_id: userId, capital: 10000 }])\n          .select(\"capital\")\n          .single();\n\n        if (insertError) throw insertError;\n        setCapital(newProfile.capital);\n      }\n    } catch (error) {\n      console.error(\"Error fetching or setting capital:\", error.message);\n      setCapital(10000); // Default to initial capital on error\n    } finally {\n      setLoadingData(false);\n    }\n  }, []);\n\n  // --- Function to update capital in Supabase ---\n  const updateCapitalInDb = useCallback(async (newCapital, userId) => {\n    if (!userId) {\n      console.warn(\"updateCapitalInDb: No user ID, not updating DB.\");\n      return;\n    }\n    setLoadingData(true);\n    try {\n      const { error } = await supabase\n        .from(\"user_profiles\")\n        .update({ capital: newCapital })\n        .eq(\"user_id\", userId);\n\n      if (error) throw error;\n      setCapital(newCapital); // Update local state after successful DB update\n    } catch (error) {\n      console.error(\"Error updating capital in DB:\", error.message);\n    } finally {\n      setLoadingData(false);\n    }\n  }, []);\n\n  // --- Wrapped setCapital to update DB as well ---\n  const handleSetCapital = useCallback(async (newCapital) => {\n    setCapital(newCapital); // Optimistically update local state\n    if (user?.id) {\n      await updateCapitalInDb(newCapital, user.id);\n    } else {\n      console.warn(\"No user ID available for DB capital update.\");\n    }\n  }, [user, updateCapitalInDb]);\n\n  // --- Fetch trades for the current user ---\n  const fetchTrades = useCallback(async (userId) => {\n    if (!userId) {\n      setTrades([]);\n      return;\n    }\n    setLoadingData(true);\n    try {\n      const { data, error } = await supabase\n        .from(\"trades\")\n        .select(\"*\")\n        .eq(\"user_id\", userId)\n        .order(\"created_at\", { ascending: false });\n\n      if (error) throw error;\n      setTrades(data);\n    } catch (error) {\n      console.error(\"Error fetching trades:\", error.message);\n      setTrades([]);\n    } finally {\n      setLoadingData(false);\n    }\n  }, []);\n\n  // --- Fetch holdings for the current user ---\n  const fetchHoldings = useCallback(async (userId) => {\n    if (!userId) {\n      setHoldings({});\n      return;\n    }\n    setLoadingData(true);\n    try {\n      const { data, error } = await supabase\n        .from(\"holdings\")\n        .select(\"*\")\n        .eq(\"user_id\", userId);\n\n      if (error) throw error;\n\n      const newHoldings = {};\n      data.forEach(holding => {\n        newHoldings[holding.symbol] = {\n          symbol: holding.symbol,\n          netQty: holding.net_qty,\n          totalCost: holding.total_cost,\n          avgBuyPrice: holding.avg_buy_price,\n        };\n      });\n      setHoldings(newHoldings);\n    } catch (error) {\n      console.error(\"Error fetching holdings:\", error.message);\n      setHoldings({});\n    } finally {\n      setLoadingData(false);\n    }\n  }, []);\n\n  // --- Update holdings in Supabase ---\n  const updateHoldingInDb = useCallback(async (userId, symbol, netQty, totalCost, avgBuyPrice) => {\n    if (!userId) {\n      console.warn(\"updateHoldingInDb: No user ID, not updating DB.\");\n      return;\n    }\n\n    try {\n      if (netQty === 0) {\n        // If netQty is 0, delete the holding\n        const { error } = await supabase\n          .from(\"holdings\")\n          .delete()\n          .eq(\"user_id\", userId)\n          .eq(\"symbol\", symbol);\n        if (error) throw error;\n      } else {\n        // Upsert the holding\n        const { error } = await supabase\n          .from(\"holdings\")\n          .upsert(\n            { user_id: userId, symbol, net_qty: netQty, total_cost: totalCost, avg_buy_price: avgBuyPrice },\n            { onConflict: ['user_id', 'symbol'] }\n          );\n        if (error) throw error;\n      }\n      // Re-fetch holdings to ensure state is in sync\n      await fetchHoldings(userId);\n    } catch (error) {\n      console.error(\"Error updating holding in DB:\", error.message);\n      throw error;\n    }\n  }, [fetchHoldings]);\n\n  // --- Fetch watchlist symbols for the current user ---\n  const fetchWatchlist = useCallback(async (userId) => {\n    if (!userId) {\n      setWatchListSymbols([]);\n      return;\n    }\n    try {\n      const { data, error } = await supabase\n        .from(\"watchlists\")\n        .select(\"symbol\")\n        .eq(\"user_id\", userId)\n        .order(\"created_at\", { ascending: true });\n\n      if (error) throw error;\n      setWatchListSymbols(data.map(item => item.symbol));\n    } catch (error) {\n      console.error(\"Error fetching watchlist:\", error.message);\n      setWatchListSymbols([]);\n    }\n  }, []);\n\n  // --- Add symbol to watchlist ---\n  const addToWatchlist = useCallback(async (symbol) => {\n    if (!user?.id) {\n      throw new Error(\"User not authenticated.\");\n    }\n    const normalizedSymbol = symbol.toUpperCase();\n    if (watchListSymbols.includes(normalizedSymbol)) {\n      throw new Error(`'${normalizedSymbol}' is already in your watchlist.`);\n    }\n\n    try {\n      const { data, error } = await supabase\n        .from(\"watchlists\")\n        .insert([{ user_id: user.id, symbol: normalizedSymbol }])\n        .select(\"symbol\")\n        .single();\n\n      if (error) throw error;\n      setWatchListSymbols((prev) => [...prev, data.symbol]);\n      fetchLivePrices([normalizedSymbol]);\n    } catch (error) {\n      console.error(\"Error adding to watchlist:\", error.message);\n      throw error;\n    }\n  }, [user, watchListSymbols, fetchLivePrices]);\n\n  // --- Remove symbol from watchlist ---\n  const removeFromWatchlist = useCallback(async (symbol) => {\n    if (!user?.id) {\n      throw new Error(\"User not authenticated.\");\n    }\n    try {\n      const { error } = await supabase\n        .from(\"watchlists\")\n        .delete()\n        .eq(\"user_id\", user.id)\n        .eq(\"symbol\", symbol.toUpperCase());\n\n      if (error) throw error;\n      setWatchListSymbols((prev) => prev.filter((s) => s !== symbol.toUpperCase()));\n      setLivePrices((prev) => { // Clear live price for removed symbol if not needed elsewhere\n        const newPrices = { ...prev };\n        delete newPrices[symbol.toUpperCase()];\n        return newPrices;\n      });\n    } catch (error) {\n      console.error(\"Error removing from watchlist:\", error.message);\n      throw error;\n    }\n  }, [user]);\n\n  // --- Fetch available US stock symbols from Finnhub (uses Finnhub) ---\n  const fetchAvailableSymbols = useCallback(async () => {\n    if (isInvalidApiKey(FINNHUB_API_KEY)) {\n      setSymbolError(\"Invalid Finnhub API Key. Cannot fetch US stock symbols.\");\n      return;\n    }\n    setLoadingData(true);\n    try {\n      const { data } = await axios.get(\n        `https://finnhub.io/api/v1/stock/symbol?exchange=US&token=${FINNHUB_API_KEY}`\n      );\n      const filteredSymbols = data\n        .filter(\n          (s) =>\n            s.type === \"Common Stock\" ||\n            s.type === \"ADR\" ||\n            s.type === \"REIT\" ||\n            s.type === \"ETP\" ||\n            s.type === \"ETF\"\n        )\n        .map((s) => s.symbol)\n        .sort();\n\n      setAvailableSymbols(filteredSymbols);\n      setSymbolError(\"\");\n    } catch (error) {\n      console.error(\"Error fetching available symbols:\", error);\n      setSymbolError(\n        \"Failed to fetch US stock symbols. This might be due to API rate limits or an invalid Finnhub API key (free tier keys have limited symbol access).\"\n      );\n      setAvailableSymbols([]);\n    } finally {\n      setLoadingData(false);\n    }\n  }, []);\n\n  // --- Calculate PnL and Holdings (now uses `holdings` state directly) ---\n  const calculatePnL = useCallback(() => {\n    let totalRealizedPnl = 0;\n\n    let currentHoldingsCalculated = {};\n    Object.values(holdings).forEach((holding) => {\n        let unrealizedPnl = 0;\n        if (holding.netQty > 0 && livePrices[holding.symbol]) {\n            const livePrice = livePrices[holding.symbol];\n            unrealizedPnl = (livePrice - holding.avgBuyPrice) * holding.netQty;\n        }\n        currentHoldingsCalculated[holding.symbol] = {\n            ...holding,\n            unrealizedPnl: unrealizedPnl.toFixed(2),\n        };\n    });\n\n    const totalUnrealizedPnl = Object.values(currentHoldingsCalculated).reduce((sum, holding) => {\n        return sum + parseFloat(holding.unrealizedPnl || 0);\n    }, 0);\n\n    let realizedPnlFromTrades = 0;\n    // Declare tempHoldingsForRealizedPnl before its use\n    const tempHoldingsForRealizedPnl = {}; \n    trades.slice().reverse().forEach((trade) => {\n        if (!tempHoldingsForRealizedPnl[trade.symbol]) {\n            tempHoldingsForRealizedPnl[trade.symbol] = { netQty: 0, totalCost: 0, avgBuyPrice: 0 };\n        }\n\n        if (trade.type === \"buy\") {\n            tempHoldingsForRealizedPnl[trade.symbol].totalCost += trade.quantity * trade.price;\n            // CORRECTED TYPO HERE: was tempHoldingsForRealizedPyl\n            tempHoldingsForRealizedPnl[trade.symbol].netQty += trade.quantity; \n            tempHoldingsForRealizedPnl[trade.symbol].avgBuyPrice =\n                tempHoldingsForRealizedPnl[trade.symbol].netQty > 0\n                    ? tempHoldingsForRealizedPnl[trade.symbol].totalCost / tempHoldingsForRealizedPnl[trade.symbol].netQty\n                    : 0;\n        } else { // sell\n            const qtySold = trade.quantity;\n            const currentNetQty = tempHoldingsForRealizedPnl[trade.symbol].netQty;\n            const currentAvgBuyPrice = tempHoldingsForRealizedPnl[trade.symbol].avgBuyPrice;\n\n            if (currentNetQty > 0) {\n                const sellCostBasis = (currentAvgBuyPrice * Math.min(qtySold, currentNetQty));\n                const sellProceeds = trade.price * qtySold;\n                realizedPnlFromTrades += (sellProceeds - sellCostBasis);\n            }\n\n            tempHoldingsForRealizedPnl[trade.symbol].netQty -= qtySold;\n            if (tempHoldingsForRealizedPnl[trade.symbol].netQty <= 0) {\n                tempHoldingsForRealizedPnl[trade.symbol].totalCost = 0;\n                tempHoldingsForRealizedPnl[trade.symbol].avgBuyPrice = 0;\n                tempHoldingsForRealizedPnl[trade.symbol].netQty = 0;\n            } else {\n                tempHoldingsForRealizedPnl[trade.symbol].totalCost = tempHoldingsForRealizedPnl[trade.symbol].netQty * tempHoldingsForRealizedPnl[trade.symbol].avgBuyPrice;\n            }\n        }\n    });\n\n\n    return {\n      holdings: Object.values(currentHoldingsCalculated),\n      totalRealizedPnl: realizedPnlFromTrades.toFixed(2),\n      totalUnrealizedPnl: totalUnrealizedPnl.toFixed(2),\n    };\n  }, [holdings, livePrices, trades]);\n\n  // --- Calculate total portfolio value ---\n  const calculateTotalPortfolioValue = useCallback(() => {\n    const { holdings: calculatedHoldings } = calculatePnL(); // Use the holdings from calculatePnL\n    let holdingsValue = 0;\n    Object.values(calculatedHoldings).forEach(holding => {\n      if (holding.netQty > 0 && livePrices[holding.symbol]) {\n        holdingsValue += holding.netQty * livePrices[holding.symbol];\n      }\n    });\n    return (capital + holdingsValue).toFixed(2);\n  }, [capital, calculatePnL, livePrices]);\n\n  // --- Add trade logic (modified to update holdings as well) ---\n  const addTrade = useCallback(async (newTrade) => {\n    if (!user?.id) throw new Error(\"User not authenticated.\");\n\n    const normalizedSymbol = newTrade.symbol.toUpperCase();\n    const tradeCost = newTrade.quantity * newTrade.price;\n    let newCapital = capital;\n    let currentHolding = holdings[normalizedSymbol] || { netQty: 0, totalCost: 0, avgBuyPrice: 0 };\n    let newNetQty = currentHolding.netQty;\n    let newTotalCost = currentHolding.totalCost;\n    let newAvgBuyPrice = currentHolding.avgBuyPrice;\n\n    if (newTrade.type === \"buy\") {\n      newCapital -= tradeCost;\n      newNetQty += newTrade.quantity;\n      newTotalCost += tradeCost;\n      newAvgBuyPrice = newTotalCost / newNetQty;\n    } else { // sell\n      newCapital += tradeCost;\n      const qtySold = newTrade.quantity;\n\n      if (currentHolding.netQty < qtySold) {\n          throw new Error(\"Insufficient shares to sell.\");\n      }\n\n      // Calculate realized PnL for this specific sale\n      const sellCostBasis = (currentHolding.avgBuyPrice * qtySold);\n      const sellProceeds = newTrade.price * qtySold;\n      const realizedPnlForThisSale = (sellProceeds - sellCostBasis);\n      // We will sum realized PnL later from all trades, no need to store here directly\n\n      newNetQty -= qtySold;\n      if (newNetQty <= 0) {\n        newTotalCost = 0;\n        newAvgBuyPrice = 0;\n        newNetQty = 0; // Ensure netQty doesn't go negative\n      } else {\n        // For partial sell, adjust totalCost for remaining shares\n        newTotalCost = newNetQty * currentHolding.avgBuyPrice; // The average buy price remains the same\n      }\n    }\n\n    try {\n      // 1. Insert the trade\n      const { data: insertedTrade, error: tradeError } = await supabase\n        .from(\"trades\")\n        .insert([{\n          user_id: user.id,\n          symbol: normalizedSymbol,\n          type: newTrade.type,\n          quantity: newTrade.quantity,\n          price: newTrade.price,\n          created_at: new Date().toISOString(),\n        }])\n        .select()\n        .single();\n\n      if (tradeError) throw tradeError;\n\n      // 2. Update capital\n      await handleSetCapital(newCapital);\n\n      // 3. Update holdings\n      await updateHoldingInDb(user.id, normalizedSymbol, newNetQty, newTotalCost, newAvgBuyPrice);\n\n      // Refresh trades and holdings from DB to ensure state is consistent\n      await fetchTrades(user.id);\n      await fetchHoldings(user.id);\n\n    } catch (error) {\n      console.error(\"Error adding trade:\", error.message);\n      throw error;\n    }\n  }, [user, capital, holdings, handleSetCapital, updateHoldingInDb, fetchTrades, fetchHoldings]);\n\n  // --- Remove trade logic (modified to correctly recalculate capital and holdings) ---\n  const removeTrade = useCallback(async (tradeToRemove) => {\n    if (!user?.id) throw new Error(\"User not authenticated.\");\n\n    try {\n      const { error: deleteError } = await supabase\n        .from(\"trades\")\n        .delete()\n        .eq(\"id\", tradeToRemove.id)\n        .eq(\"user_id\", user.id);\n\n      if (deleteError) throw deleteError;\n\n      // After deleting a trade, we need to recalculate capital and holdings from scratch\n      // to ensure accuracy. This is a common pattern for financial transaction systems.\n\n      // 1. Fetch all remaining trades for the user\n      const { data: remainingTrades, error: fetchTradesError } = await supabase\n        .from(\"trades\")\n        .select(\"*\")\n        .eq(\"user_id\", user.id)\n        .order(\"created_at\", { ascending: true }); // Crucial: process in chronological order\n\n      if (fetchTradesError) throw fetchTradesError;\n\n      // 2. Recalculate capital and holdings\n      let recalculatedCapital = 10000; // Start with initial capital\n      let recalculatedHoldings = {};\n\n      remainingTrades.forEach(trade => {\n        const symbol = trade.symbol;\n        const quantity = trade.quantity;\n        const price = trade.price;\n\n        if (!recalculatedHoldings[symbol]) {\n          recalculatedHoldings[symbol] = { netQty: 0, totalCost: 0, avgBuyPrice: 0 };\n        }\n\n        if (trade.type === 'buy') {\n          recalculatedCapital -= (quantity * price);\n          recalculatedHoldings[symbol].totalCost += (quantity * price);\n          recalculatedHoldings[symbol].netQty += quantity;\n          recalculatedHoldings[symbol].avgBuyPrice = recalculatedHoldings[symbol].netQty > 0\n            ? recalculatedHoldings[symbol].totalCost / recalculatedHoldings[symbol].netQty\n            : 0;\n        } else { // sell\n          recalculatedCapital += (quantity * price);\n          \n          const currentNetQty = recalculatedHoldings[symbol].netQty;\n          const currentAvgBuyPrice = recalculatedHoldings[symbol].avgBuyPrice;\n\n          // Only adjust holdings if selling existing shares\n          if (currentNetQty > 0) {\n              const qtyToSellFromHolding = Math.min(quantity, currentNetQty);\n              recalculatedHoldings[symbol].netQty -= qtyToSellFromHolding;\n              \n              if (recalculatedHoldings[symbol].netQty <= 0) {\n                  recalculatedHoldings[symbol].totalCost = 0;\n                  recalculatedHoldings[symbol].avgBuyPrice = 0;\n                  recalculatedHoldings[symbol].netQty = 0; // Ensure it's not negative\n              } else {\n                  // If partial sell, totalCost adjusts proportionally\n                  recalculatedHoldings[symbol].totalCost = recalculatedHoldings[symbol].netQty * currentAvgBuyPrice;\n              }\n          }\n        }\n      });\n\n      // 3. Update capital in DB and state\n      await handleSetCapital(recalculatedCapital);\n\n      // 4. Update all holdings in DB based on recalculation\n      // First, delete all existing holdings for the user\n      const { error: deleteHoldingsError } = await supabase\n        .from(\"holdings\")\n        .delete()\n        .eq(\"user_id\", user.id);\n      if (deleteHoldingsError) throw deleteHoldingsError;\n\n      // Then, insert the recalculated holdings\n      const holdingsToInsert = Object.values(recalculatedHoldings)\n        .filter(h => h.netQty > 0) // Only insert holdings with positive quantity\n        .map(h => ({\n          user_id: user.id,\n          symbol: h.symbol,\n          net_qty: h.netQty,\n          total_cost: h.totalCost,\n          avg_buy_price: h.avgBuyPrice,\n        }));\n\n      if (holdingsToInsert.length > 0) {\n        const { error: insertHoldingsError } = await supabase\n          .from(\"holdings\")\n          .insert(holdingsToInsert);\n        if (insertHoldingsError) throw insertHoldingsError;\n      }\n      \n      // Finally, re-fetch all state to ensure consistency\n      await fetchTrades(user.id);\n      await fetchHoldings(user.id);\n\n    } catch (error) {\n      console.error(\"Error removing trade:\", error.message);\n      throw error;\n    }\n  }, [user, handleSetCapital, fetchTrades, fetchHoldings]);\n\n\n  // --- Initial Data Load on Mount or User Change ---\n  useEffect(() => {\n    const { data: authListener } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        setSession(session);\n        const currentUser = session?.user || null;\n        setUser(currentUser);\n\n        if (currentUser) {\n          setLoadingData(true);\n          await fetchCapital(currentUser.id);\n          await fetchTrades(currentUser.id);\n          await fetchHoldings(currentUser.id); // Fetch holdings on user change\n          await fetchWatchlist(currentUser.id);\n          setLoadingData(false);\n        } else {\n          setCapital(10000); // Reset to initial capital for logged-out state\n          setTrades([]);\n          setHoldings({}); // Clear holdings on logout\n          setWatchListSymbols([]);\n          setLivePrices({});\n          setUser(null);\n          setLoadingData(false);\n        }\n      }\n    );\n\n    // Initial check for session on component mount\n    const checkSession = async () => {\n      setLoadingData(true);\n      const { data: { session } } = await supabase.auth.getSession();\n      setSession(session);\n      const currentUser = session?.user || null;\n      setUser(currentUser);\n\n      if (currentUser) {\n        await fetchCapital(currentUser.id);\n        await fetchTrades(currentUser.id);\n        await fetchHoldings(currentUser.id); // Initial fetch of holdings\n        await fetchWatchlist(currentUser.id);\n      }\n      setLoadingData(false);\n    };\n\n    checkSession();\n    fetchAvailableSymbols(); // Fetch symbols once on load for everyone\n\n    return () => {\n      authListener.subscription.unsubscribe();\n    };\n  }, [fetchCapital, fetchTrades, fetchHoldings, fetchAvailableSymbols, fetchWatchlist]); // Dependencies for initial data load\n\n  // --- Effect to fetch live prices for all relevant symbols ---\n  useEffect(() => {\n    // Combine symbols from trades, watchlist, and holdings\n    const allSymbols = [\n      ...new Set([\n        ...trades.map((t) => t.symbol),\n        ...watchListSymbols,\n        ...Object.keys(holdings), // Include symbols from holdings\n      ])\n    ].filter(Boolean); // Filter out any null/undefined/empty symbols\n\n    if (allSymbols.length > 0) {\n      // Fetch immediately\n      fetchLivePrices(allSymbols);\n\n      // Set up interval for periodic refresh\n      const interval = setInterval(() => {\n        fetchLivePrices(allSymbols);\n      }, 20000); // Every 20 seconds\n\n      return () => clearInterval(interval); // Cleanup on unmount or dependency change\n    }\n  }, [trades, watchListSymbols, holdings, fetchLivePrices]); // Re-run if trades, watchlist, or holdings change\n\n  // Memoize the context value to prevent unnecessary re-renders\n  const contextValue = useMemo(\n    () => ({\n      user,\n      trades,\n      capital,\n      setCapital: handleSetCapital, // Use the wrapped function\n      livePrices,\n      availableSymbols,\n      symbolError,\n      setSymbolError,\n      fetchTrades,\n      fetchLivePrices,\n      calculatePnL,\n      calculateTotalPortfolioValue,\n      loadingData,\n      removeTrade,\n      addTrade, // Expose addTrade function\n      watchListSymbols,\n      addToWatchlist,\n      removeFromWatchlist,\n      holdings: Object.values(holdings), // Provide holdings as an array for easier consumption\n    }),\n    [\n      user,\n      trades,\n      capital,\n      handleSetCapital,\n      livePrices,\n      availableSymbols,\n      symbolError,\n      setSymbolError,\n      fetchTrades,\n      fetchLivePrices,\n      calculatePnL,\n      calculateTotalPortfolioValue,\n      loadingData,\n      removeTrade,\n      addTrade,\n      addToWatchlist,\n      removeFromWatchlist,\n      watchListSymbols,\n      holdings,\n    ]\n  );\n\n  return (\n    <TradingDataContext.Provider value={contextValue}>\n      {children}\n    </TradingDataContext.Provider>\n  );\n};\n\nexport const useTradingData = () => {\n  const context = useContext(TradingDataContext);\n  if (context === undefined) {\n    throw new Error(\"useTradingData must be used within a TradingDataProvider\");\n  }\n  return context;\n};"],"mappings":"yIAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,CAAEC,WAAW,CAAEC,OAAO,KAAQ,OAAO,CACnG,OAASC,QAAQ,KAAQ,kBAAkB,CAC3C,MAAO,CAAAC,KAAK,KAAM,OAAO,CAEzB;AACA;AACA;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBAEA,MAAO,MAAM,CAAAC,eAAe,CAAG,0CAA0C,CAAE;AAC3E,MAAO,MAAM,CAAAC,qBAAqB,CAAG,kBAAkB,CAAE;AACzD,MAAO,MAAM,CAAAC,eAAe,CAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB,EAAI,GAAG,CAE3E;AACA,MAAO,MAAM,CAAAC,eAAe,CAAIC,GAAG,EAAK,CACtC,KAAM,CAAAC,UAAU,CAAGD,GAAG,CAAGA,GAAG,CAACE,IAAI,CAAC,CAAC,CAAG,EAAE,CACxC;AACA,MAAO,CAACD,UAAU,EAAIA,UAAU,GAAK,2BAA2B,EAAIA,UAAU,GAAK,4BAA4B,EAAIA,UAAU,CAACE,MAAM,CAAG,EAAE,CAC3I,CAAC,CAED,KAAM,CAAAC,kBAAkB,cAAGrB,aAAa,CAAC,CAAC,CAE1C,MAAO,MAAM,CAAAsB,mBAAmB,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC9C,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGxB,QAAQ,CAAC,IAAI,CAAC,CACtC,KAAM,CAACyB,MAAM,CAAEC,SAAS,CAAC,CAAG1B,QAAQ,CAAC,EAAE,CAAC,CACxC,KAAM,CAAC2B,OAAO,CAAEC,UAAU,CAAC,CAAG5B,QAAQ,CAAC,KAAK,CAAC,CAAE;AAC/C,KAAM,CAAC6B,UAAU,CAAEC,aAAa,CAAC,CAAG9B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAChD,KAAM,CAAC+B,gBAAgB,CAAEC,mBAAmB,CAAC,CAAGhC,QAAQ,CAAC,EAAE,CAAC,CAC5D,KAAM,CAACiC,WAAW,CAAEC,cAAc,CAAC,CAAGlC,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAACmC,WAAW,CAAEC,cAAc,CAAC,CAAGpC,QAAQ,CAAC,IAAI,CAAC,CACpD,KAAM,CAACqC,OAAO,CAAEC,UAAU,CAAC,CAAGtC,QAAQ,CAAC,IAAI,CAAC,CAAE;AAC9C,KAAM,CAACuC,gBAAgB,CAAEC,mBAAmB,CAAC,CAAGxC,QAAQ,CAAC,EAAE,CAAC,CAC5D,KAAM,CAACyC,QAAQ,CAAEC,WAAW,CAAC,CAAG1C,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAE;AAE9C;AACA,KAAM,CAAA2C,eAAe,CAAGzC,WAAW,CAAC,KAAO,CAAA0C,cAAc,EAAK,CAC5D,KAAM,CAAAC,aAAa,CAAG,CAAC,GAAG,GAAI,CAAAC,GAAG,CAACF,cAAc,CAAC,CAAC,CAACG,MAAM,CAACC,CAAC,EAAIA,CAAC,EAAI,MAAO,CAAAA,CAAC,GAAK,QAAQ,CAAC,CAE1F,GAAIH,aAAa,CAAC3B,MAAM,GAAK,CAAC,EAAIJ,eAAe,CAACN,eAAe,CAAC,CAAE,CAClEsB,aAAa,CAAEmB,IAAI,EAAK,CACtB,KAAM,CAAAC,SAAS,CAAG,CAAC,CAAC,CACpB,GAAIL,aAAa,CAAC3B,MAAM,GAAK,CAAC,CAAE,MAAO,CAAA+B,IAAI,CAE3CJ,aAAa,CAACM,OAAO,CAACC,GAAG,EAAI,CACzB,GAAIH,IAAI,CAACG,GAAG,CAAC,CAAEF,SAAS,CAACE,GAAG,CAAC,CAAGH,IAAI,CAACG,GAAG,CAAC,CAC7C,CAAC,CAAC,CACF,MAAO,CAAAF,SAAS,CAClB,CAAC,CAAC,CACF,OACF,CAEA,GAAI,CACF,KAAM,CAAAG,SAAS,CAAG,KAAM,CAAAC,OAAO,CAACC,GAAG,CACjCV,aAAa,CAACW,GAAG,CAAEC,MAAM,EACvBpD,KAAK,CAACqD,GAAG,2CAAAC,MAAA,CAA2CF,MAAM,YAAAE,MAAA,CAAUnD,eAAe,CAAE,CACvF,CACF,CAAC,CAED,KAAM,CAAA0C,SAAS,CAAG,CAAC,CAAC,CACpBG,SAAS,CAACF,OAAO,CAAC,CAACS,GAAG,CAAEC,KAAK,GAAK,CAChC,KAAM,CAAAJ,MAAM,CAAGZ,aAAa,CAACgB,KAAK,CAAC,CACnC,GAAID,GAAG,CAACE,IAAI,EAAIF,GAAG,CAACE,IAAI,CAACC,CAAC,GAAK,CAAC,CAAE,CAChCb,SAAS,CAACO,MAAM,CAAC,CAAGG,GAAG,CAACE,IAAI,CAACC,CAAC,CAChC,CAAC,IAAM,CACLb,SAAS,CAACO,MAAM,CAAC,CAAG,IAAI,CAAE;AAC5B,CACF,CAAC,CAAC,CAEF3B,aAAa,CAAEmB,IAAI,EAAAe,aAAA,CAAAA,aAAA,IAAWf,IAAI,EAAKC,SAAS,CAAG,CAAC,CACtD,CAAE,MAAOe,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACnD,KAAM,CAAAE,WAAW,CAAG,CAAC,CAAC,CACtBtB,aAAa,CAACM,OAAO,CAACM,MAAM,EAAI,CAAEU,WAAW,CAACV,MAAM,CAAC,CAAG,IAAI,CAAE,CAAC,CAAC,CAChE3B,aAAa,CAAEmB,IAAI,EAAAe,aAAA,CAAAA,aAAA,IAAWf,IAAI,EAAKkB,WAAW,CAAG,CAAC,CACxD,CACF,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAC,YAAY,CAAGlE,WAAW,CAAC,KAAO,CAAAmE,MAAM,EAAK,CACjD,GAAI,CAACA,MAAM,CAAE,CACXzC,UAAU,CAAC,KAAK,CAAC,CACjB,OACF,CACAQ,cAAc,CAAC,IAAI,CAAC,CACpB,GAAI,CACF,KAAM,CAAE0B,IAAI,CAAEG,KAAM,CAAC,CAAG,KAAM,CAAA7D,QAAQ,CACnCkE,IAAI,CAAC,eAAe,CAAC,CACrBC,MAAM,CAAC,SAAS,CAAC,CACjBC,EAAE,CAAC,SAAS,CAAEH,MAAM,CAAC,CACrBI,MAAM,CAAC,CAAC,CAEX,GAAIR,KAAK,EAAIA,KAAK,CAACS,IAAI,GAAK,UAAU,CAAE,CAAE;AACxC,KAAM,CAAAT,KAAK,CACb,CAEA,GAAIH,IAAI,CAAE,CACRlC,UAAU,CAACkC,IAAI,CAACnC,OAAO,CAAC,CAC1B,CAAC,IAAM,CACL;AACA,KAAM,CAAEmC,IAAI,CAAEa,UAAU,CAAEV,KAAK,CAAEW,WAAY,CAAC,CAAG,KAAM,CAAAxE,QAAQ,CAC5DkE,IAAI,CAAC,eAAe,CAAC,CACrBO,MAAM,CAAC,CAAC,CAAEC,OAAO,CAAET,MAAM,CAAE1C,OAAO,CAAE,KAAM,CAAC,CAAC,CAAC,CAC7C4C,MAAM,CAAC,SAAS,CAAC,CACjBE,MAAM,CAAC,CAAC,CAEX,GAAIG,WAAW,CAAE,KAAM,CAAAA,WAAW,CAClChD,UAAU,CAAC+C,UAAU,CAAChD,OAAO,CAAC,CAChC,CACF,CAAE,MAAOsC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,CAAEA,KAAK,CAACc,OAAO,CAAC,CAClEnD,UAAU,CAAC,KAAK,CAAC,CAAE;AACrB,CAAC,OAAS,CACRQ,cAAc,CAAC,KAAK,CAAC,CACvB,CACF,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAA4C,iBAAiB,CAAG9E,WAAW,CAAC,MAAO+E,UAAU,CAAEZ,MAAM,GAAK,CAClE,GAAI,CAACA,MAAM,CAAE,CACXH,OAAO,CAACgB,IAAI,CAAC,iDAAiD,CAAC,CAC/D,OACF,CACA9C,cAAc,CAAC,IAAI,CAAC,CACpB,GAAI,CACF,KAAM,CAAE6B,KAAM,CAAC,CAAG,KAAM,CAAA7D,QAAQ,CAC7BkE,IAAI,CAAC,eAAe,CAAC,CACrBa,MAAM,CAAC,CAAExD,OAAO,CAAEsD,UAAW,CAAC,CAAC,CAC/BT,EAAE,CAAC,SAAS,CAAEH,MAAM,CAAC,CAExB,GAAIJ,KAAK,CAAE,KAAM,CAAAA,KAAK,CACtBrC,UAAU,CAACqD,UAAU,CAAC,CAAE;AAC1B,CAAE,MAAOhB,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAACc,OAAO,CAAC,CAC/D,CAAC,OAAS,CACR3C,cAAc,CAAC,KAAK,CAAC,CACvB,CACF,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAgD,gBAAgB,CAAGlF,WAAW,CAAC,KAAO,CAAA+E,UAAU,EAAK,CACzDrD,UAAU,CAACqD,UAAU,CAAC,CAAE;AACxB,GAAI1D,IAAI,SAAJA,IAAI,WAAJA,IAAI,CAAE8D,EAAE,CAAE,CACZ,KAAM,CAAAL,iBAAiB,CAACC,UAAU,CAAE1D,IAAI,CAAC8D,EAAE,CAAC,CAC9C,CAAC,IAAM,CACLnB,OAAO,CAACgB,IAAI,CAAC,6CAA6C,CAAC,CAC7D,CACF,CAAC,CAAE,CAAC3D,IAAI,CAAEyD,iBAAiB,CAAC,CAAC,CAE7B;AACA,KAAM,CAAAM,WAAW,CAAGpF,WAAW,CAAC,KAAO,CAAAmE,MAAM,EAAK,CAChD,GAAI,CAACA,MAAM,CAAE,CACX3C,SAAS,CAAC,EAAE,CAAC,CACb,OACF,CACAU,cAAc,CAAC,IAAI,CAAC,CACpB,GAAI,CACF,KAAM,CAAE0B,IAAI,CAAEG,KAAM,CAAC,CAAG,KAAM,CAAA7D,QAAQ,CACnCkE,IAAI,CAAC,QAAQ,CAAC,CACdC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,SAAS,CAAEH,MAAM,CAAC,CACrBkB,KAAK,CAAC,YAAY,CAAE,CAAEC,SAAS,CAAE,KAAM,CAAC,CAAC,CAE5C,GAAIvB,KAAK,CAAE,KAAM,CAAAA,KAAK,CACtBvC,SAAS,CAACoC,IAAI,CAAC,CACjB,CAAE,MAAOG,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAACc,OAAO,CAAC,CACtDrD,SAAS,CAAC,EAAE,CAAC,CACf,CAAC,OAAS,CACRU,cAAc,CAAC,KAAK,CAAC,CACvB,CACF,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAqD,aAAa,CAAGvF,WAAW,CAAC,KAAO,CAAAmE,MAAM,EAAK,CAClD,GAAI,CAACA,MAAM,CAAE,CACX3B,WAAW,CAAC,CAAC,CAAC,CAAC,CACf,OACF,CACAN,cAAc,CAAC,IAAI,CAAC,CACpB,GAAI,CACF,KAAM,CAAE0B,IAAI,CAAEG,KAAM,CAAC,CAAG,KAAM,CAAA7D,QAAQ,CACnCkE,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,SAAS,CAAEH,MAAM,CAAC,CAExB,GAAIJ,KAAK,CAAE,KAAM,CAAAA,KAAK,CAEtB,KAAM,CAAAyB,WAAW,CAAG,CAAC,CAAC,CACtB5B,IAAI,CAACX,OAAO,CAACwC,OAAO,EAAI,CACtBD,WAAW,CAACC,OAAO,CAAClC,MAAM,CAAC,CAAG,CAC5BA,MAAM,CAAEkC,OAAO,CAAClC,MAAM,CACtBmC,MAAM,CAAED,OAAO,CAACE,OAAO,CACvBC,SAAS,CAAEH,OAAO,CAACI,UAAU,CAC7BC,WAAW,CAAEL,OAAO,CAACM,aACvB,CAAC,CACH,CAAC,CAAC,CACFvD,WAAW,CAACgD,WAAW,CAAC,CAC1B,CAAE,MAAOzB,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAACc,OAAO,CAAC,CACxDrC,WAAW,CAAC,CAAC,CAAC,CAAC,CACjB,CAAC,OAAS,CACRN,cAAc,CAAC,KAAK,CAAC,CACvB,CACF,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAA8D,iBAAiB,CAAGhG,WAAW,CAAC,MAAOmE,MAAM,CAAEZ,MAAM,CAAEmC,MAAM,CAAEE,SAAS,CAAEE,WAAW,GAAK,CAC9F,GAAI,CAAC3B,MAAM,CAAE,CACXH,OAAO,CAACgB,IAAI,CAAC,iDAAiD,CAAC,CAC/D,OACF,CAEA,GAAI,CACF,GAAIU,MAAM,GAAK,CAAC,CAAE,CAChB;AACA,KAAM,CAAE3B,KAAM,CAAC,CAAG,KAAM,CAAA7D,QAAQ,CAC7BkE,IAAI,CAAC,UAAU,CAAC,CAChB6B,MAAM,CAAC,CAAC,CACR3B,EAAE,CAAC,SAAS,CAAEH,MAAM,CAAC,CACrBG,EAAE,CAAC,QAAQ,CAAEf,MAAM,CAAC,CACvB,GAAIQ,KAAK,CAAE,KAAM,CAAAA,KAAK,CACxB,CAAC,IAAM,CACL;AACA,KAAM,CAAEA,KAAM,CAAC,CAAG,KAAM,CAAA7D,QAAQ,CAC7BkE,IAAI,CAAC,UAAU,CAAC,CAChB8B,MAAM,CACL,CAAEtB,OAAO,CAAET,MAAM,CAAEZ,MAAM,CAAEoC,OAAO,CAAED,MAAM,CAAEG,UAAU,CAAED,SAAS,CAAEG,aAAa,CAAED,WAAY,CAAC,CAC/F,CAAEK,UAAU,CAAE,CAAC,SAAS,CAAE,QAAQ,CAAE,CACtC,CAAC,CACH,GAAIpC,KAAK,CAAE,KAAM,CAAAA,KAAK,CACxB,CACA;AACA,KAAM,CAAAwB,aAAa,CAACpB,MAAM,CAAC,CAC7B,CAAE,MAAOJ,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAACc,OAAO,CAAC,CAC7D,KAAM,CAAAd,KAAK,CACb,CACF,CAAC,CAAE,CAACwB,aAAa,CAAC,CAAC,CAEnB;AACA,KAAM,CAAAa,cAAc,CAAGpG,WAAW,CAAC,KAAO,CAAAmE,MAAM,EAAK,CACnD,GAAI,CAACA,MAAM,CAAE,CACX7B,mBAAmB,CAAC,EAAE,CAAC,CACvB,OACF,CACA,GAAI,CACF,KAAM,CAAEsB,IAAI,CAAEG,KAAM,CAAC,CAAG,KAAM,CAAA7D,QAAQ,CACnCkE,IAAI,CAAC,YAAY,CAAC,CAClBC,MAAM,CAAC,QAAQ,CAAC,CAChBC,EAAE,CAAC,SAAS,CAAEH,MAAM,CAAC,CACrBkB,KAAK,CAAC,YAAY,CAAE,CAAEC,SAAS,CAAE,IAAK,CAAC,CAAC,CAE3C,GAAIvB,KAAK,CAAE,KAAM,CAAAA,KAAK,CACtBzB,mBAAmB,CAACsB,IAAI,CAACN,GAAG,CAAC+C,IAAI,EAAIA,IAAI,CAAC9C,MAAM,CAAC,CAAC,CACpD,CAAE,MAAOQ,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAACc,OAAO,CAAC,CACzDvC,mBAAmB,CAAC,EAAE,CAAC,CACzB,CACF,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAgE,cAAc,CAAGtG,WAAW,CAAC,KAAO,CAAAuD,MAAM,EAAK,CACnD,GAAI,EAAClC,IAAI,SAAJA,IAAI,WAAJA,IAAI,CAAE8D,EAAE,EAAE,CACb,KAAM,IAAI,CAAAoB,KAAK,CAAC,yBAAyB,CAAC,CAC5C,CACA,KAAM,CAAAC,gBAAgB,CAAGjD,MAAM,CAACkD,WAAW,CAAC,CAAC,CAC7C,GAAIpE,gBAAgB,CAACqE,QAAQ,CAACF,gBAAgB,CAAC,CAAE,CAC/C,KAAM,IAAI,CAAAD,KAAK,KAAA9C,MAAA,CAAK+C,gBAAgB,mCAAiC,CAAC,CACxE,CAEA,GAAI,CACF,KAAM,CAAE5C,IAAI,CAAEG,KAAM,CAAC,CAAG,KAAM,CAAA7D,QAAQ,CACnCkE,IAAI,CAAC,YAAY,CAAC,CAClBO,MAAM,CAAC,CAAC,CAAEC,OAAO,CAAEvD,IAAI,CAAC8D,EAAE,CAAE5B,MAAM,CAAEiD,gBAAiB,CAAC,CAAC,CAAC,CACxDnC,MAAM,CAAC,QAAQ,CAAC,CAChBE,MAAM,CAAC,CAAC,CAEX,GAAIR,KAAK,CAAE,KAAM,CAAAA,KAAK,CACtBzB,mBAAmB,CAAES,IAAI,EAAK,CAAC,GAAGA,IAAI,CAAEa,IAAI,CAACL,MAAM,CAAC,CAAC,CACrDd,eAAe,CAAC,CAAC+D,gBAAgB,CAAC,CAAC,CACrC,CAAE,MAAOzC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,CAAEA,KAAK,CAACc,OAAO,CAAC,CAC1D,KAAM,CAAAd,KAAK,CACb,CACF,CAAC,CAAE,CAAC1C,IAAI,CAAEgB,gBAAgB,CAAEI,eAAe,CAAC,CAAC,CAE7C;AACA,KAAM,CAAAkE,mBAAmB,CAAG3G,WAAW,CAAC,KAAO,CAAAuD,MAAM,EAAK,CACxD,GAAI,EAAClC,IAAI,SAAJA,IAAI,WAAJA,IAAI,CAAE8D,EAAE,EAAE,CACb,KAAM,IAAI,CAAAoB,KAAK,CAAC,yBAAyB,CAAC,CAC5C,CACA,GAAI,CACF,KAAM,CAAExC,KAAM,CAAC,CAAG,KAAM,CAAA7D,QAAQ,CAC7BkE,IAAI,CAAC,YAAY,CAAC,CAClB6B,MAAM,CAAC,CAAC,CACR3B,EAAE,CAAC,SAAS,CAAEjD,IAAI,CAAC8D,EAAE,CAAC,CACtBb,EAAE,CAAC,QAAQ,CAAEf,MAAM,CAACkD,WAAW,CAAC,CAAC,CAAC,CAErC,GAAI1C,KAAK,CAAE,KAAM,CAAAA,KAAK,CACtBzB,mBAAmB,CAAES,IAAI,EAAKA,IAAI,CAACF,MAAM,CAAEC,CAAC,EAAKA,CAAC,GAAKS,MAAM,CAACkD,WAAW,CAAC,CAAC,CAAC,CAAC,CAC7E7E,aAAa,CAAEmB,IAAI,EAAK,CAAE;AACxB,KAAM,CAAAC,SAAS,CAAAc,aAAA,IAAQf,IAAI,CAAE,CAC7B,MAAO,CAAAC,SAAS,CAACO,MAAM,CAACkD,WAAW,CAAC,CAAC,CAAC,CACtC,MAAO,CAAAzD,SAAS,CAClB,CAAC,CAAC,CACJ,CAAE,MAAOe,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAACc,OAAO,CAAC,CAC9D,KAAM,CAAAd,KAAK,CACb,CACF,CAAC,CAAE,CAAC1C,IAAI,CAAC,CAAC,CAEV;AACA,KAAM,CAAAuF,qBAAqB,CAAG5G,WAAW,CAAC,SAAY,CACpD,GAAIY,eAAe,CAACN,eAAe,CAAC,CAAE,CACpC0B,cAAc,CAAC,yDAAyD,CAAC,CACzE,OACF,CACAE,cAAc,CAAC,IAAI,CAAC,CACpB,GAAI,CACF,KAAM,CAAE0B,IAAK,CAAC,CAAG,KAAM,CAAAzD,KAAK,CAACqD,GAAG,6DAAAC,MAAA,CAC8BnD,eAAe,CAC7E,CAAC,CACD,KAAM,CAAAuG,eAAe,CAAGjD,IAAI,CACzBf,MAAM,CACJC,CAAC,EACAA,CAAC,CAACgE,IAAI,GAAK,cAAc,EACzBhE,CAAC,CAACgE,IAAI,GAAK,KAAK,EAChBhE,CAAC,CAACgE,IAAI,GAAK,MAAM,EACjBhE,CAAC,CAACgE,IAAI,GAAK,KAAK,EAChBhE,CAAC,CAACgE,IAAI,GAAK,KACf,CAAC,CACAxD,GAAG,CAAER,CAAC,EAAKA,CAAC,CAACS,MAAM,CAAC,CACpBwD,IAAI,CAAC,CAAC,CAETjF,mBAAmB,CAAC+E,eAAe,CAAC,CACpC7E,cAAc,CAAC,EAAE,CAAC,CACpB,CAAE,MAAO+B,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,CAAEA,KAAK,CAAC,CACzD/B,cAAc,CACZ,mJACF,CAAC,CACDF,mBAAmB,CAAC,EAAE,CAAC,CACzB,CAAC,OAAS,CACRI,cAAc,CAAC,KAAK,CAAC,CACvB,CACF,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAA8E,YAAY,CAAGhH,WAAW,CAAC,IAAM,CACrC,GAAI,CAAAiH,gBAAgB,CAAG,CAAC,CAExB,GAAI,CAAAC,yBAAyB,CAAG,CAAC,CAAC,CAClCC,MAAM,CAACC,MAAM,CAAC7E,QAAQ,CAAC,CAACU,OAAO,CAAEwC,OAAO,EAAK,CACzC,GAAI,CAAA4B,aAAa,CAAG,CAAC,CACrB,GAAI5B,OAAO,CAACC,MAAM,CAAG,CAAC,EAAI/D,UAAU,CAAC8D,OAAO,CAAClC,MAAM,CAAC,CAAE,CAClD,KAAM,CAAA+D,SAAS,CAAG3F,UAAU,CAAC8D,OAAO,CAAClC,MAAM,CAAC,CAC5C8D,aAAa,CAAG,CAACC,SAAS,CAAG7B,OAAO,CAACK,WAAW,EAAIL,OAAO,CAACC,MAAM,CACtE,CACAwB,yBAAyB,CAACzB,OAAO,CAAClC,MAAM,CAAC,CAAAO,aAAA,CAAAA,aAAA,IAClC2B,OAAO,MACV4B,aAAa,CAAEA,aAAa,CAACE,OAAO,CAAC,CAAC,CAAC,EAC1C,CACL,CAAC,CAAC,CAEF,KAAM,CAAAC,kBAAkB,CAAGL,MAAM,CAACC,MAAM,CAACF,yBAAyB,CAAC,CAACO,MAAM,CAAC,CAACC,GAAG,CAAEjC,OAAO,GAAK,CACzF,MAAO,CAAAiC,GAAG,CAAGC,UAAU,CAAClC,OAAO,CAAC4B,aAAa,EAAI,CAAC,CAAC,CACvD,CAAC,CAAE,CAAC,CAAC,CAEL,GAAI,CAAAO,qBAAqB,CAAG,CAAC,CAC7B;AACA,KAAM,CAAAC,0BAA0B,CAAG,CAAC,CAAC,CACrCtG,MAAM,CAACuG,KAAK,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC9E,OAAO,CAAE+E,KAAK,EAAK,CACxC,GAAI,CAACH,0BAA0B,CAACG,KAAK,CAACzE,MAAM,CAAC,CAAE,CAC3CsE,0BAA0B,CAACG,KAAK,CAACzE,MAAM,CAAC,CAAG,CAAEmC,MAAM,CAAE,CAAC,CAAEE,SAAS,CAAE,CAAC,CAAEE,WAAW,CAAE,CAAE,CAAC,CAC1F,CAEA,GAAIkC,KAAK,CAAClB,IAAI,GAAK,KAAK,CAAE,CACtBe,0BAA0B,CAACG,KAAK,CAACzE,MAAM,CAAC,CAACqC,SAAS,EAAIoC,KAAK,CAACC,QAAQ,CAAGD,KAAK,CAACE,KAAK,CAClF;AACAL,0BAA0B,CAACG,KAAK,CAACzE,MAAM,CAAC,CAACmC,MAAM,EAAIsC,KAAK,CAACC,QAAQ,CACjEJ,0BAA0B,CAACG,KAAK,CAACzE,MAAM,CAAC,CAACuC,WAAW,CAChD+B,0BAA0B,CAACG,KAAK,CAACzE,MAAM,CAAC,CAACmC,MAAM,CAAG,CAAC,CAC7CmC,0BAA0B,CAACG,KAAK,CAACzE,MAAM,CAAC,CAACqC,SAAS,CAAGiC,0BAA0B,CAACG,KAAK,CAACzE,MAAM,CAAC,CAACmC,MAAM,CACpG,CAAC,CACf,CAAC,IAAM,CAAE;AACL,KAAM,CAAAyC,OAAO,CAAGH,KAAK,CAACC,QAAQ,CAC9B,KAAM,CAAAG,aAAa,CAAGP,0BAA0B,CAACG,KAAK,CAACzE,MAAM,CAAC,CAACmC,MAAM,CACrE,KAAM,CAAA2C,kBAAkB,CAAGR,0BAA0B,CAACG,KAAK,CAACzE,MAAM,CAAC,CAACuC,WAAW,CAE/E,GAAIsC,aAAa,CAAG,CAAC,CAAE,CACnB,KAAM,CAAAE,aAAa,CAAID,kBAAkB,CAAGE,IAAI,CAACC,GAAG,CAACL,OAAO,CAAEC,aAAa,CAAE,CAC7E,KAAM,CAAAK,YAAY,CAAGT,KAAK,CAACE,KAAK,CAAGC,OAAO,CAC1CP,qBAAqB,EAAKa,YAAY,CAAGH,aAAc,CAC3D,CAEAT,0BAA0B,CAACG,KAAK,CAACzE,MAAM,CAAC,CAACmC,MAAM,EAAIyC,OAAO,CAC1D,GAAIN,0BAA0B,CAACG,KAAK,CAACzE,MAAM,CAAC,CAACmC,MAAM,EAAI,CAAC,CAAE,CACtDmC,0BAA0B,CAACG,KAAK,CAACzE,MAAM,CAAC,CAACqC,SAAS,CAAG,CAAC,CACtDiC,0BAA0B,CAACG,KAAK,CAACzE,MAAM,CAAC,CAACuC,WAAW,CAAG,CAAC,CACxD+B,0BAA0B,CAACG,KAAK,CAACzE,MAAM,CAAC,CAACmC,MAAM,CAAG,CAAC,CACvD,CAAC,IAAM,CACHmC,0BAA0B,CAACG,KAAK,CAACzE,MAAM,CAAC,CAACqC,SAAS,CAAGiC,0BAA0B,CAACG,KAAK,CAACzE,MAAM,CAAC,CAACmC,MAAM,CAAGmC,0BAA0B,CAACG,KAAK,CAACzE,MAAM,CAAC,CAACuC,WAAW,CAC/J,CACJ,CACJ,CAAC,CAAC,CAGF,MAAO,CACLvD,QAAQ,CAAE4E,MAAM,CAACC,MAAM,CAACF,yBAAyB,CAAC,CAClDD,gBAAgB,CAAEW,qBAAqB,CAACL,OAAO,CAAC,CAAC,CAAC,CAClDC,kBAAkB,CAAEA,kBAAkB,CAACD,OAAO,CAAC,CAAC,CAClD,CAAC,CACH,CAAC,CAAE,CAAChF,QAAQ,CAAEZ,UAAU,CAAEJ,MAAM,CAAC,CAAC,CAElC;AACA,KAAM,CAAAmH,4BAA4B,CAAG1I,WAAW,CAAC,IAAM,CACrD,KAAM,CAAEuC,QAAQ,CAAEoG,kBAAmB,CAAC,CAAG3B,YAAY,CAAC,CAAC,CAAE;AACzD,GAAI,CAAA4B,aAAa,CAAG,CAAC,CACrBzB,MAAM,CAACC,MAAM,CAACuB,kBAAkB,CAAC,CAAC1F,OAAO,CAACwC,OAAO,EAAI,CACnD,GAAIA,OAAO,CAACC,MAAM,CAAG,CAAC,EAAI/D,UAAU,CAAC8D,OAAO,CAAClC,MAAM,CAAC,CAAE,CACpDqF,aAAa,EAAInD,OAAO,CAACC,MAAM,CAAG/D,UAAU,CAAC8D,OAAO,CAAClC,MAAM,CAAC,CAC9D,CACF,CAAC,CAAC,CACF,MAAO,CAAC9B,OAAO,CAAGmH,aAAa,EAAErB,OAAO,CAAC,CAAC,CAAC,CAC7C,CAAC,CAAE,CAAC9F,OAAO,CAAEuF,YAAY,CAAErF,UAAU,CAAC,CAAC,CAEvC;AACA,KAAM,CAAAkH,QAAQ,CAAG7I,WAAW,CAAC,KAAO,CAAA8I,QAAQ,EAAK,CAC/C,GAAI,EAACzH,IAAI,SAAJA,IAAI,WAAJA,IAAI,CAAE8D,EAAE,EAAE,KAAM,IAAI,CAAAoB,KAAK,CAAC,yBAAyB,CAAC,CAEzD,KAAM,CAAAC,gBAAgB,CAAGsC,QAAQ,CAACvF,MAAM,CAACkD,WAAW,CAAC,CAAC,CACtD,KAAM,CAAAsC,SAAS,CAAGD,QAAQ,CAACb,QAAQ,CAAGa,QAAQ,CAACZ,KAAK,CACpD,GAAI,CAAAnD,UAAU,CAAGtD,OAAO,CACxB,GAAI,CAAAuH,cAAc,CAAGzG,QAAQ,CAACiE,gBAAgB,CAAC,EAAI,CAAEd,MAAM,CAAE,CAAC,CAAEE,SAAS,CAAE,CAAC,CAAEE,WAAW,CAAE,CAAE,CAAC,CAC9F,GAAI,CAAAmD,SAAS,CAAGD,cAAc,CAACtD,MAAM,CACrC,GAAI,CAAAwD,YAAY,CAAGF,cAAc,CAACpD,SAAS,CAC3C,GAAI,CAAAuD,cAAc,CAAGH,cAAc,CAAClD,WAAW,CAE/C,GAAIgD,QAAQ,CAAChC,IAAI,GAAK,KAAK,CAAE,CAC3B/B,UAAU,EAAIgE,SAAS,CACvBE,SAAS,EAAIH,QAAQ,CAACb,QAAQ,CAC9BiB,YAAY,EAAIH,SAAS,CACzBI,cAAc,CAAGD,YAAY,CAAGD,SAAS,CAC3C,CAAC,IAAM,CAAE;AACPlE,UAAU,EAAIgE,SAAS,CACvB,KAAM,CAAAZ,OAAO,CAAGW,QAAQ,CAACb,QAAQ,CAEjC,GAAIe,cAAc,CAACtD,MAAM,CAAGyC,OAAO,CAAE,CACjC,KAAM,IAAI,CAAA5B,KAAK,CAAC,8BAA8B,CAAC,CACnD,CAEA;AACA,KAAM,CAAA+B,aAAa,CAAIU,cAAc,CAAClD,WAAW,CAAGqC,OAAQ,CAC5D,KAAM,CAAAM,YAAY,CAAGK,QAAQ,CAACZ,KAAK,CAAGC,OAAO,CAC7C,KAAM,CAAAiB,sBAAsB,CAAIX,YAAY,CAAGH,aAAc,CAC7D;AAEAW,SAAS,EAAId,OAAO,CACpB,GAAIc,SAAS,EAAI,CAAC,CAAE,CAClBC,YAAY,CAAG,CAAC,CAChBC,cAAc,CAAG,CAAC,CAClBF,SAAS,CAAG,CAAC,CAAE;AACjB,CAAC,IAAM,CACL;AACAC,YAAY,CAAGD,SAAS,CAAGD,cAAc,CAAClD,WAAW,CAAE;AACzD,CACF,CAEA,GAAI,CACF;AACA,KAAM,CAAElC,IAAI,CAAEyF,aAAa,CAAEtF,KAAK,CAAEuF,UAAW,CAAC,CAAG,KAAM,CAAApJ,QAAQ,CAC9DkE,IAAI,CAAC,QAAQ,CAAC,CACdO,MAAM,CAAC,CAAC,CACPC,OAAO,CAAEvD,IAAI,CAAC8D,EAAE,CAChB5B,MAAM,CAAEiD,gBAAgB,CACxBM,IAAI,CAAEgC,QAAQ,CAAChC,IAAI,CACnBmB,QAAQ,CAAEa,QAAQ,CAACb,QAAQ,CAC3BC,KAAK,CAAEY,QAAQ,CAACZ,KAAK,CACrBqB,UAAU,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACrC,CAAC,CAAC,CAAC,CACFpF,MAAM,CAAC,CAAC,CACRE,MAAM,CAAC,CAAC,CAEX,GAAI+E,UAAU,CAAE,KAAM,CAAAA,UAAU,CAEhC;AACA,KAAM,CAAApE,gBAAgB,CAACH,UAAU,CAAC,CAElC;AACA,KAAM,CAAAiB,iBAAiB,CAAC3E,IAAI,CAAC8D,EAAE,CAAEqB,gBAAgB,CAAEyC,SAAS,CAAEC,YAAY,CAAEC,cAAc,CAAC,CAE3F;AACA,KAAM,CAAA/D,WAAW,CAAC/D,IAAI,CAAC8D,EAAE,CAAC,CAC1B,KAAM,CAAAI,aAAa,CAAClE,IAAI,CAAC8D,EAAE,CAAC,CAE9B,CAAE,MAAOpB,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,CAAEA,KAAK,CAACc,OAAO,CAAC,CACnD,KAAM,CAAAd,KAAK,CACb,CACF,CAAC,CAAE,CAAC1C,IAAI,CAAEI,OAAO,CAAEc,QAAQ,CAAE2C,gBAAgB,CAAEc,iBAAiB,CAAEZ,WAAW,CAAEG,aAAa,CAAC,CAAC,CAE9F;AACA,KAAM,CAAAmE,WAAW,CAAG1J,WAAW,CAAC,KAAO,CAAA2J,aAAa,EAAK,CACvD,GAAI,EAACtI,IAAI,SAAJA,IAAI,WAAJA,IAAI,CAAE8D,EAAE,EAAE,KAAM,IAAI,CAAAoB,KAAK,CAAC,yBAAyB,CAAC,CAEzD,GAAI,CACF,KAAM,CAAExC,KAAK,CAAE6F,WAAY,CAAC,CAAG,KAAM,CAAA1J,QAAQ,CAC1CkE,IAAI,CAAC,QAAQ,CAAC,CACd6B,MAAM,CAAC,CAAC,CACR3B,EAAE,CAAC,IAAI,CAAEqF,aAAa,CAACxE,EAAE,CAAC,CAC1Bb,EAAE,CAAC,SAAS,CAAEjD,IAAI,CAAC8D,EAAE,CAAC,CAEzB,GAAIyE,WAAW,CAAE,KAAM,CAAAA,WAAW,CAElC;AACA;AAEA;AACA,KAAM,CAAEhG,IAAI,CAAEiG,eAAe,CAAE9F,KAAK,CAAE+F,gBAAiB,CAAC,CAAG,KAAM,CAAA5J,QAAQ,CACtEkE,IAAI,CAAC,QAAQ,CAAC,CACdC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,SAAS,CAAEjD,IAAI,CAAC8D,EAAE,CAAC,CACtBE,KAAK,CAAC,YAAY,CAAE,CAAEC,SAAS,CAAE,IAAK,CAAC,CAAC,CAAE;AAE7C,GAAIwE,gBAAgB,CAAE,KAAM,CAAAA,gBAAgB,CAE5C;AACA,GAAI,CAAAC,mBAAmB,CAAG,KAAK,CAAE;AACjC,GAAI,CAAAC,oBAAoB,CAAG,CAAC,CAAC,CAE7BH,eAAe,CAAC5G,OAAO,CAAC+E,KAAK,EAAI,CAC/B,KAAM,CAAAzE,MAAM,CAAGyE,KAAK,CAACzE,MAAM,CAC3B,KAAM,CAAA0E,QAAQ,CAAGD,KAAK,CAACC,QAAQ,CAC/B,KAAM,CAAAC,KAAK,CAAGF,KAAK,CAACE,KAAK,CAEzB,GAAI,CAAC8B,oBAAoB,CAACzG,MAAM,CAAC,CAAE,CACjCyG,oBAAoB,CAACzG,MAAM,CAAC,CAAG,CAAEmC,MAAM,CAAE,CAAC,CAAEE,SAAS,CAAE,CAAC,CAAEE,WAAW,CAAE,CAAE,CAAC,CAC5E,CAEA,GAAIkC,KAAK,CAAClB,IAAI,GAAK,KAAK,CAAE,CACxBiD,mBAAmB,EAAK9B,QAAQ,CAAGC,KAAM,CACzC8B,oBAAoB,CAACzG,MAAM,CAAC,CAACqC,SAAS,EAAKqC,QAAQ,CAAGC,KAAM,CAC5D8B,oBAAoB,CAACzG,MAAM,CAAC,CAACmC,MAAM,EAAIuC,QAAQ,CAC/C+B,oBAAoB,CAACzG,MAAM,CAAC,CAACuC,WAAW,CAAGkE,oBAAoB,CAACzG,MAAM,CAAC,CAACmC,MAAM,CAAG,CAAC,CAC9EsE,oBAAoB,CAACzG,MAAM,CAAC,CAACqC,SAAS,CAAGoE,oBAAoB,CAACzG,MAAM,CAAC,CAACmC,MAAM,CAC5E,CAAC,CACP,CAAC,IAAM,CAAE;AACPqE,mBAAmB,EAAK9B,QAAQ,CAAGC,KAAM,CAEzC,KAAM,CAAAE,aAAa,CAAG4B,oBAAoB,CAACzG,MAAM,CAAC,CAACmC,MAAM,CACzD,KAAM,CAAA2C,kBAAkB,CAAG2B,oBAAoB,CAACzG,MAAM,CAAC,CAACuC,WAAW,CAEnE;AACA,GAAIsC,aAAa,CAAG,CAAC,CAAE,CACnB,KAAM,CAAA6B,oBAAoB,CAAG1B,IAAI,CAACC,GAAG,CAACP,QAAQ,CAAEG,aAAa,CAAC,CAC9D4B,oBAAoB,CAACzG,MAAM,CAAC,CAACmC,MAAM,EAAIuE,oBAAoB,CAE3D,GAAID,oBAAoB,CAACzG,MAAM,CAAC,CAACmC,MAAM,EAAI,CAAC,CAAE,CAC1CsE,oBAAoB,CAACzG,MAAM,CAAC,CAACqC,SAAS,CAAG,CAAC,CAC1CoE,oBAAoB,CAACzG,MAAM,CAAC,CAACuC,WAAW,CAAG,CAAC,CAC5CkE,oBAAoB,CAACzG,MAAM,CAAC,CAACmC,MAAM,CAAG,CAAC,CAAE;AAC7C,CAAC,IAAM,CACH;AACAsE,oBAAoB,CAACzG,MAAM,CAAC,CAACqC,SAAS,CAAGoE,oBAAoB,CAACzG,MAAM,CAAC,CAACmC,MAAM,CAAG2C,kBAAkB,CACrG,CACJ,CACF,CACF,CAAC,CAAC,CAEF;AACA,KAAM,CAAAnD,gBAAgB,CAAC6E,mBAAmB,CAAC,CAE3C;AACA;AACA,KAAM,CAAEhG,KAAK,CAAEmG,mBAAoB,CAAC,CAAG,KAAM,CAAAhK,QAAQ,CAClDkE,IAAI,CAAC,UAAU,CAAC,CAChB6B,MAAM,CAAC,CAAC,CACR3B,EAAE,CAAC,SAAS,CAAEjD,IAAI,CAAC8D,EAAE,CAAC,CACzB,GAAI+E,mBAAmB,CAAE,KAAM,CAAAA,mBAAmB,CAElD;AACA,KAAM,CAAAC,gBAAgB,CAAGhD,MAAM,CAACC,MAAM,CAAC4C,oBAAoB,CAAC,CACzDnH,MAAM,CAACuH,CAAC,EAAIA,CAAC,CAAC1E,MAAM,CAAG,CAAC,CAAE;AAAA,CAC1BpC,GAAG,CAAC8G,CAAC,GAAK,CACTxF,OAAO,CAAEvD,IAAI,CAAC8D,EAAE,CAChB5B,MAAM,CAAE6G,CAAC,CAAC7G,MAAM,CAChBoC,OAAO,CAAEyE,CAAC,CAAC1E,MAAM,CACjBG,UAAU,CAAEuE,CAAC,CAACxE,SAAS,CACvBG,aAAa,CAAEqE,CAAC,CAACtE,WACnB,CAAC,CAAC,CAAC,CAEL,GAAIqE,gBAAgB,CAACnJ,MAAM,CAAG,CAAC,CAAE,CAC/B,KAAM,CAAE+C,KAAK,CAAEsG,mBAAoB,CAAC,CAAG,KAAM,CAAAnK,QAAQ,CAClDkE,IAAI,CAAC,UAAU,CAAC,CAChBO,MAAM,CAACwF,gBAAgB,CAAC,CAC3B,GAAIE,mBAAmB,CAAE,KAAM,CAAAA,mBAAmB,CACpD,CAEA;AACA,KAAM,CAAAjF,WAAW,CAAC/D,IAAI,CAAC8D,EAAE,CAAC,CAC1B,KAAM,CAAAI,aAAa,CAAClE,IAAI,CAAC8D,EAAE,CAAC,CAE9B,CAAE,MAAOpB,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAACc,OAAO,CAAC,CACrD,KAAM,CAAAd,KAAK,CACb,CACF,CAAC,CAAE,CAAC1C,IAAI,CAAE6D,gBAAgB,CAAEE,WAAW,CAAEG,aAAa,CAAC,CAAC,CAGxD;AACAxF,SAAS,CAAC,IAAM,CACd,KAAM,CAAE6D,IAAI,CAAE0G,YAAa,CAAC,CAAGpK,QAAQ,CAACqK,IAAI,CAACC,iBAAiB,CAC5D,MAAOC,KAAK,CAAEtI,OAAO,GAAK,CACxBC,UAAU,CAACD,OAAO,CAAC,CACnB,KAAM,CAAAuI,WAAW,CAAG,CAAAvI,OAAO,SAAPA,OAAO,iBAAPA,OAAO,CAAEd,IAAI,GAAI,IAAI,CACzCC,OAAO,CAACoJ,WAAW,CAAC,CAEpB,GAAIA,WAAW,CAAE,CACfxI,cAAc,CAAC,IAAI,CAAC,CACpB,KAAM,CAAAgC,YAAY,CAACwG,WAAW,CAACvF,EAAE,CAAC,CAClC,KAAM,CAAAC,WAAW,CAACsF,WAAW,CAACvF,EAAE,CAAC,CACjC,KAAM,CAAAI,aAAa,CAACmF,WAAW,CAACvF,EAAE,CAAC,CAAE;AACrC,KAAM,CAAAiB,cAAc,CAACsE,WAAW,CAACvF,EAAE,CAAC,CACpCjD,cAAc,CAAC,KAAK,CAAC,CACvB,CAAC,IAAM,CACLR,UAAU,CAAC,KAAK,CAAC,CAAE;AACnBF,SAAS,CAAC,EAAE,CAAC,CACbgB,WAAW,CAAC,CAAC,CAAC,CAAC,CAAE;AACjBF,mBAAmB,CAAC,EAAE,CAAC,CACvBV,aAAa,CAAC,CAAC,CAAC,CAAC,CACjBN,OAAO,CAAC,IAAI,CAAC,CACbY,cAAc,CAAC,KAAK,CAAC,CACvB,CACF,CACF,CAAC,CAED;AACA,KAAM,CAAAyI,YAAY,CAAG,KAAAA,CAAA,GAAY,CAC/BzI,cAAc,CAAC,IAAI,CAAC,CACpB,KAAM,CAAE0B,IAAI,CAAE,CAAEzB,OAAQ,CAAE,CAAC,CAAG,KAAM,CAAAjC,QAAQ,CAACqK,IAAI,CAACK,UAAU,CAAC,CAAC,CAC9DxI,UAAU,CAACD,OAAO,CAAC,CACnB,KAAM,CAAAuI,WAAW,CAAG,CAAAvI,OAAO,SAAPA,OAAO,iBAAPA,OAAO,CAAEd,IAAI,GAAI,IAAI,CACzCC,OAAO,CAACoJ,WAAW,CAAC,CAEpB,GAAIA,WAAW,CAAE,CACf,KAAM,CAAAxG,YAAY,CAACwG,WAAW,CAACvF,EAAE,CAAC,CAClC,KAAM,CAAAC,WAAW,CAACsF,WAAW,CAACvF,EAAE,CAAC,CACjC,KAAM,CAAAI,aAAa,CAACmF,WAAW,CAACvF,EAAE,CAAC,CAAE;AACrC,KAAM,CAAAiB,cAAc,CAACsE,WAAW,CAACvF,EAAE,CAAC,CACtC,CACAjD,cAAc,CAAC,KAAK,CAAC,CACvB,CAAC,CAEDyI,YAAY,CAAC,CAAC,CACd/D,qBAAqB,CAAC,CAAC,CAAE;AAEzB,MAAO,IAAM,CACX0D,YAAY,CAACO,YAAY,CAACC,WAAW,CAAC,CAAC,CACzC,CAAC,CACH,CAAC,CAAE,CAAC5G,YAAY,CAAEkB,WAAW,CAAEG,aAAa,CAAEqB,qBAAqB,CAAER,cAAc,CAAC,CAAC,CAAE;AAEvF;AACArG,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAgL,UAAU,CAAG,CACjB,GAAG,GAAI,CAAAnI,GAAG,CAAC,CACT,GAAGrB,MAAM,CAAC+B,GAAG,CAAE0H,CAAC,EAAKA,CAAC,CAACzH,MAAM,CAAC,CAC9B,GAAGlB,gBAAgB,CACnB,GAAG8E,MAAM,CAAC8D,IAAI,CAAC1I,QAAQ,CAAG;AAAA,CAC3B,CAAC,CACH,CAACM,MAAM,CAACqI,OAAO,CAAC,CAAE;AAEnB,GAAIH,UAAU,CAAC/J,MAAM,CAAG,CAAC,CAAE,CACzB;AACAyB,eAAe,CAACsI,UAAU,CAAC,CAE3B;AACA,KAAM,CAAAI,QAAQ,CAAGC,WAAW,CAAC,IAAM,CACjC3I,eAAe,CAACsI,UAAU,CAAC,CAC7B,CAAC,CAAE,KAAK,CAAC,CAAE;AAEX,MAAO,IAAMM,aAAa,CAACF,QAAQ,CAAC,CAAE;AACxC,CACF,CAAC,CAAE,CAAC5J,MAAM,CAAEc,gBAAgB,CAAEE,QAAQ,CAAEE,eAAe,CAAC,CAAC,CAAE;AAE3D;AACA,KAAM,CAAA6I,YAAY,CAAGrL,OAAO,CAC1B,KAAO,CACLoB,IAAI,CACJE,MAAM,CACNE,OAAO,CACPC,UAAU,CAAEwD,gBAAgB,CAAE;AAC9BvD,UAAU,CACVE,gBAAgB,CAChBE,WAAW,CACXC,cAAc,CACdoD,WAAW,CACX3C,eAAe,CACfuE,YAAY,CACZ0B,4BAA4B,CAC5BzG,WAAW,CACXyH,WAAW,CACXb,QAAQ,CAAE;AACVxG,gBAAgB,CAChBiE,cAAc,CACdK,mBAAmB,CACnBpE,QAAQ,CAAE4E,MAAM,CAACC,MAAM,CAAC7E,QAAQ,CAAG;AACrC,CAAC,CAAC,CACF,CACElB,IAAI,CACJE,MAAM,CACNE,OAAO,CACPyD,gBAAgB,CAChBvD,UAAU,CACVE,gBAAgB,CAChBE,WAAW,CACXC,cAAc,CACdoD,WAAW,CACX3C,eAAe,CACfuE,YAAY,CACZ0B,4BAA4B,CAC5BzG,WAAW,CACXyH,WAAW,CACXb,QAAQ,CACRvC,cAAc,CACdK,mBAAmB,CACnBtE,gBAAgB,CAChBE,QAAQ,CAEZ,CAAC,CAED,mBACElC,IAAA,CAACY,kBAAkB,CAACsK,QAAQ,EAACC,KAAK,CAAEF,YAAa,CAAAlK,QAAA,CAC9CA,QAAQ,CACkB,CAAC,CAElC,CAAC,CAED,MAAO,MAAM,CAAAqK,cAAc,CAAGA,CAAA,GAAM,CAClC,KAAM,CAAAC,OAAO,CAAG7L,UAAU,CAACoB,kBAAkB,CAAC,CAC9C,GAAIyK,OAAO,GAAKC,SAAS,CAAE,CACzB,KAAM,IAAI,CAAApF,KAAK,CAAC,0DAA0D,CAAC,CAC7E,CACA,MAAO,CAAAmF,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}