{"ast":null,"code":"import React,{useState,useEffect}from'react';import{BrowserRouter as Router,Routes,Route,Navigate}from'react-router-dom';import{supabase}from'./supabaseClient';import{TradingDataProvider}from'./TradingDataContext';// Import your components\nimport Auth from'./components/Auth.jsx';import Account from'./pages/Account.js';import Dashboard from'./components/Dashboard.js';import Navbar from'./components/Navbar.js';import StockDetailPage from'./pages/StockDetailsPage.js';import WatchlistPage from'./pages/WatchlistPage.js';import AboutDeveloper from'./pages/AboutDeveloper.js';// <--- ADD THIS LINE: Import the AboutDeveloper component\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function App(){const[session,setSession]=useState(null);const[loadingSession,setLoadingSession]=useState(true);useEffect(()=>{supabase.auth.getSession().then(_ref=>{let{data:{session}}=_ref;setSession(session);setLoadingSession(false);});const{data:{subscription}}=supabase.auth.onAuthStateChange((_event,session)=>{setSession(session);setLoadingSession(false);});return()=>subscription.unsubscribe();},[]);if(loadingSession){return/*#__PURE__*/_jsxs(\"div\",{className:\"app-loading\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"spinner\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Loading session...\"})]});}return/*#__PURE__*/_jsxs(Router,{children:[/*#__PURE__*/_jsx(Navbar,{session:session}),/*#__PURE__*/_jsx(TradingDataProvider,{children:/*#__PURE__*/_jsx(\"main\",{className:\"container\",children:/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/about-developer\",element:/*#__PURE__*/_jsx(AboutDeveloper,{})}),\" \",!session?/*#__PURE__*/// If no session, and the path is not a public one (like /about-developer),\n// it defaults to the Auth component. The \"about-developer\" route above\n// will catch that path first if it matches.\n_jsx(Route,{path:\"*\",element:/*#__PURE__*/_jsx(Auth,{})}):/*#__PURE__*/// If logged in (session exists), show these authenticated routes\n_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(Dashboard,{})}),/*#__PURE__*/_jsx(Route,{path:\"/dashboard\",element:/*#__PURE__*/_jsx(Dashboard,{})}),/*#__PURE__*/_jsx(Route,{path:\"/account\",element:/*#__PURE__*/_jsx(Account,{session:session},session.user.id)}),/*#__PURE__*/_jsx(Route,{path:\"/stock/:symbol\",element:/*#__PURE__*/_jsx(StockDetailPage,{})}),/*#__PURE__*/_jsx(Route,{path:\"/watchlist\",element:/*#__PURE__*/_jsx(WatchlistPage,{})}),/*#__PURE__*/_jsx(Route,{path:\"*\",element:/*#__PURE__*/_jsx(Navigate,{to:\"/dashboard\",replace:true})})]})]})})})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","Navigate","supabase","TradingDataProvider","Auth","Account","Dashboard","Navbar","StockDetailPage","WatchlistPage","AboutDeveloper","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","App","session","setSession","loadingSession","setLoadingSession","auth","getSession","then","_ref","data","subscription","onAuthStateChange","_event","unsubscribe","className","children","path","element","user","id","to","replace"],"sources":["/Users/aryansrivastava/projects/Paper-Trading-Portal/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport { supabase } from './supabaseClient';\nimport { TradingDataProvider } from './TradingDataContext';\n\n// Import your components\nimport Auth from './components/Auth.jsx';\nimport Account from './pages/Account.js';\nimport Dashboard from './components/Dashboard.js';\nimport Navbar from './components/Navbar.js';\nimport StockDetailPage from './pages/StockDetailsPage.js';\nimport WatchlistPage from './pages/WatchlistPage.js';\nimport AboutDeveloper from './pages/AboutDeveloper.js'; // <--- ADD THIS LINE: Import the AboutDeveloper component\n\nfunction App() {\n  const [session, setSession] = useState(null);\n  const [loadingSession, setLoadingSession] = useState(true);\n\n  useEffect(() => {\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setSession(session);\n      setLoadingSession(false);\n    });\n\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange((_event, session) => {\n      setSession(session);\n      setLoadingSession(false);\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  if (loadingSession) {\n    return (\n      <div className=\"app-loading\">\n        <div className=\"spinner\"></div>\n        <p>Loading session...</p>\n      </div>\n    );\n  }\n\n  return (\n    <Router>\n      {/* Navbar is rendered unconditionally so it's always visible for public pages too */}\n      <Navbar session={session} />\n      \n      {/* TradingDataProvider wraps only the content that needs the trading context */}\n      <TradingDataProvider> \n        <main className=\"container\">\n          <Routes>\n            {/* PUBLIC ROUTES (accessible without requiring a session) */}\n            <Route path=\"/about-developer\" element={<AboutDeveloper />} /> {/* <--- ADD THIS ROUTE */}\n\n            {/* CONDITIONAL ROUTES BASED ON SESSION */}\n            {!session ? (\n              // If no session, and the path is not a public one (like /about-developer),\n              // it defaults to the Auth component. The \"about-developer\" route above\n              // will catch that path first if it matches.\n              <Route path=\"*\" element={<Auth />} />\n            ) : (\n              // If logged in (session exists), show these authenticated routes\n              <>\n                <Route path=\"/\" element={<Dashboard />} />\n                <Route path=\"/dashboard\" element={<Dashboard />} />\n                <Route path=\"/account\" element={<Account key={session.user.id} session={session} />} />\n                <Route path=\"/stock/:symbol\" element={<StockDetailPage />} />\n                <Route path=\"/watchlist\" element={<WatchlistPage />} />\n\n                {/* Fallback for any other undefined path when authenticated, redirects to dashboard */}\n                <Route path=\"*\" element={<Navigate to=\"/dashboard\" replace />} />\n              </>\n            )}\n          </Routes>\n        </main>\n      </TradingDataProvider>\n    </Router>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}